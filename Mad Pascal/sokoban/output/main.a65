; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.6 [2022/06/27] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

zpage

.ifdef @vbxe_detect
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

.local	RESOURCE
	icl 'atari\resource.asm'
	?EXTDETECT = 0
	?VBXDETECT = 0

	RCDATA 'res/board.fnt' BOARD_GFX 0 0 0 0 0 0 0 0
	MPTPLAY '' MPT_PLAYER 0 0 0 0 0 0 0 0
	MPT 'res/porazka.mpt' MPT_MODUL 0 0 0 0 0 0 0 0
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	@fill #VADR #VLEN #$00
	eif

.ifdef :psptr
	mwa #PROGRAMSTACK :psptr
.fi

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

	ldx #$0F					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx skctl					; reset POKEY
	lda #3
	sta skctl

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_1A97

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	dex
@main

; -------------------  ASM Block 00000018  -------------------

	ldy #0
	mva value (:edx),y

; ------------------------------------------------------------

A	= :EDX
VALUE	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PAUSE_1AF8					; PROCEDURE | ASSEMBLER | OVERLOAD

; -------------------  ASM Block 00000034  -------------------

	lda:cmp:req :rtclok+2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PAUSE_1AF9					; PROCEDURE | ASSEMBLER | OVERLOAD

; -------------------  ASM Block 00000035  -------------------


loop	lda n
	ora n+1
	beq stop

	lda:cmp:req :rtclok+2

	dew n

	jmp loop
stop


; ------------------------------------------------------------

N	= DATAORIGIN+$000B

@VarData	= N
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
ITIM1	= $02
ITIM2	= $03
ITIM4	= $04
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
PAL_PMCOLOR0	= $00
PAL_PMCOLOR1	= $01
PAL_PMCOLOR2	= $02
PAL_PMCOLOR3	= $03
PAL_COLOR0	= $04
PAL_COLOR1	= $05
PAL_COLOR2	= $06
PAL_COLOR3	= $07
PAL_COLBAK	= $08
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

IRQENS	= $10
RTCLOK	= $12
RTCLOK1	= $12
RTCLOK2	= $13
RTCLOK3	= $14
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
CONSOL	= $D01F
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
KBCODE	= $D209
IRQEN	= $D20E
SKSTAT	= $D20F
PORTA	= $D300
PORTB	= $D301
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E
NMIVEC	= $FFFA
RESETVEC	= $FFFC
IRQVEC	= $FFFE

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	TYPES						; UNIT

; ------------------------------------------------------------

.endl							; UNIT TYPES

; ------------------------------------------------------------

.local	GRAPH						; UNIT

.local	INITGRAPH_1B26					; PROCEDURE | OVERLOAD
	sta MODE

; -------------------  ASM Block 00000050  -------------------

	txa:pha

	lda mode
	sta MAIN.SYSTEM.GraphMode
	and #$0f
	tay

	ldx #$60		; 6*16
	lda mode		; %00010000 with text window
	and #$10
	eor #$10
	ora #2			; read

	.nowarn @GRAPHICS

	sty GraphResult


	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.endif

	ldx dindex
	ldy adr.tlshc,x
	lda #5
shift	asl @
	dey
	bne shift

	sta SCANLINE_WIDTH

; Fox/TQA

dindex	equ $57

	ldx dindex
	lda adr.tmccn,x
	ldy adr.tmrcn,x
	ldx #0
	cmp #<320
	sne:inx

; X:A = horizontal resolution
; Y = vertical resolution

	@SCREENSIZE

	.ifdef MAIN.@DEFINES.ROMOFF
	dec portb
	.endif

	pla:tax
 
; optimize OK (graph_atari.inc), line = 82

	lda ATARI.SAVMSC
	sta VIDEORAM
	lda ATARI.SAVMSC+1
	sta VIDEORAM+1

; ------------------------------------------------------------

MODE	= DATAORIGIN+$002A
adr.TLSHC	= CODEORIGIN+$1A90
.var TLSHC	= adr.TLSHC .word
adr.TMCCN	= CODEORIGIN+$1AA0
.var TMCCN	= adr.TMCCN .word
adr.TMRCN	= CODEORIGIN+$1AB0
.var TMRCN	= adr.TMRCN .word

@VarData	= MODE
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

CURRENTDRIVER	= $80
DETECT	= $00
CGA	= $01
MCGA	= $02
EGA	= $03
EGA64	= $04
EGAMONO	= $05
LOWRES	= $06
HERCMONO	= $07
VGA	= $09
VESA	= $0A
D1BIT	= $0B
D2BIT	= $0C
D4BIT	= $0D
D6BIT	= $0E
D8BIT	= $0F
D12BIT	= $10
M640X400	= $18
M640X480	= $18
GROK	= $01
GRNOINITGRAPH	= $FF
GRNOTDETECTED	= $FE
GRFILENOTFOUND	= $FD
GRINVALIDDRIVER	= $FC
GRNOLOADMEM	= $FB
GRNOSCANMEM	= $FA
GRNOFLOODMEM	= $F9
GRFONTNOTFOUND	= $F8
GRNOFONTMEM	= $F7
GRINVALIDMODE	= $F6
GRERROR	= $F5
GRIOERROR	= $F4
GRINVALIDFONT	= $F3
GRINVALIDFONTNUM	= $F2
GRINVALIDVERSION	= $EE
CGAC0	= $00
CGAC1	= $01
CGAC2	= $02
CGAC3	= $03
CGAHI	= $04
MCGAC0	= $00
MCGAC1	= $01
MCGAC2	= $02
MCGAC3	= $03
MCGAMED	= $04
MCGAHI	= $05
EGALO	= $00
EGAHI	= $01
EGA64LO	= $00
EGA64HI	= $01
EGAMONOHI	= $03
VGALO	= $0A
VGAMED	= $1F
VGAHI	= $18
WIN_LEFT	= DATAORIGIN+$000D
WIN_RIGHT	= DATAORIGIN+$000F
WIN_TOP	= DATAORIGIN+$0011
WIN_BOTTOM	= DATAORIGIN+$0013
GRAPHRESULT	= DATAORIGIN+$0015
GETCOLOR	= DATAORIGIN+$0016
VIDEORAM	= DATAORIGIN+$0017
adr.LASTARCCOORDS	= DATAORIGIN+$0019	; [12] RECORD
.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
LASTARCCOORDS.X	= DATAORIGIN+$0019
LASTARCCOORDS.Y	= DATAORIGIN+$001B
LASTARCCOORDS.XSTART	= DATAORIGIN+$001D
LASTARCCOORDS.YSTART	= DATAORIGIN+$001F
LASTARCCOORDS.XEND	= DATAORIGIN+$0021
LASTARCCOORDS.YEND	= DATAORIGIN+$0023
SCANLINE_WIDTH	= DATAORIGIN+$0025
CURRENTX	= DATAORIGIN+$0026
CURRENTY	= DATAORIGIN+$0028

.endl							; UNIT GRAPH

; ------------------------------------------------------------

.local	JOYSTICK					; UNIT

; ------------------------------------------------------------

JOY_NONE	= $0F
JOY_UP	= $0E
JOY_DOWN	= $0D
JOY_LEFT	= $0B
JOY_LEFT_UP	= $0A
JOY_LEFT_DOWN	= $09
JOY_RIGHT	= $07
JOY_RIGHT_UP	= $06
JOY_RIGHT_DOWN	= $05
JOY_1	= $0278
JOY_2	= $0279
adr.STICK	= $0278
.var STICK	= adr.STICK .word
STICK0	= $0278
STICK1	= $0279
adr.STRIG	= $0284
.var STRIG	= adr.STRIG .word
STRIG0	= $0284
STRIG1	= $0285
adr.PADDL	= $0270
.var PADDL	= adr.PADDL .word
PADDL0	= $0270
PADDL1	= $0271
PADDL2	= $0272
PADDL3	= $0273
PADDL4	= $0274
PADDL5	= $0275
PADDL6	= $0276
PADDL7	= $0277
adr.PTRIG	= $027C
.var PTRIG	= adr.PTRIG .word
PTRIG0	= $027C
PTRIG1	= $027D
PTRIG2	= $027E
PTRIG3	= $027F
PTRIG4	= $0280
PTRIG5	= $0281
PTRIG6	= $0282
PTRIG7	= $0283
TRIG0	= $D010
TRIG1	= $D011

.endl							; UNIT JOYSTICK

; ------------------------------------------------------------

.local	MISC						; UNIT

.local	DETECTANTIC					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000074  -------------------


// ANTIC PAL Test for Atari 8-bits
// (C) 2019 Guillermo Fuenzalida

antic_loop1
	lda vcount
	cmp #100
	bcc antic_loop1		// wait till scanline 200
	sta scanline
antic_loop2
	lda vcount
	cmp #10
	bmi antic_loop2_fin
	cmp scanline
	bmi antic_loop2
	sta scanline
	bpl antic_loop2

antic_loop2_fin
	ldy #$00
	lda #0
scanline equ *-1
	cmp #135
	bmi ntsc
	iny
ntsc
	sty Result


@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$002B
	rts						; ret
.endl

; ------------------------------------------------------------

adr.BANKS	= $0101
.var BANKS	= adr.BANKS .word
DETECTOS	= $FFF7

.endl							; UNIT MISC

; ------------------------------------------------------------

.local	MPT						; UNIT

.local	TMPT.INIT					; PROCEDURE | ASSEMBLER
	sta TMPT
	sty TMPT+1
	sta PLAYER
	sty PLAYER+1
	add #2
	scc
	iny
	sta MODUL
	sty MODUL+1

; -------------------  ASM Block 00000084  -------------------

	txa:pha

	mwa TMPT :bp2

	ldy #0
	lda (:bp2),y
	add #3		; jsr player+3
	sta adr
	iny
	lda (:bp2),y
	adc #0
	sta adr+1

	iny
	lda (:bp2),y
	tax		; low byte of MPT module to X reg
	iny
	lda (:bp2),y
	tay		; hi byte of MPT module to Y reg

	jsr $ffff
adr	equ *-2

	pla:tax

; ------------------------------------------------------------

TMPT	= DATAORIGIN+$002D
PLAYER	= DATAORIGIN+$002F
MODUL	= DATAORIGIN+$0031

@VarData	= TMPT
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TMPT.PLAY					; PROCEDURE | ASSEMBLER
	sta TMPT
	sty TMPT+1
	sta PLAYER
	sty PLAYER+1
	add #2
	scc
	iny
	sta MODUL
	sty MODUL+1

; -------------------  ASM Block 00000085  -------------------

	txa:pha

	asl ntsc		; =0 PAL, =4 NTSC
	bcc skp

	lda #%00000100
	sta ntsc

	bne quit
skp
	mwa TMPT adr

	ldy #1
mov	lda $ff00,y
adr	equ *-2
	sta ptr,y
	dey
	bpl mov

	jsr $ff00		; jmp (TMPT)	6502 buggy indirect jump
ptr	equ *-2

quit	pla:tax

; ------------------------------------------------------------

TMPT	= DATAORIGIN+$0033
PLAYER	= DATAORIGIN+$0035
MODUL	= DATAORIGIN+$0037

@VarData	= TMPT
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; optimize FAIL ('MISC.DETECTANTIC', MPT), line = 134

	jsr MISC.DETECTANTIC
	lda MISC.DETECTANTIC.RESULT
	jeq l_1B82

; optimize OK (MPT), line = 135

	lda #$00
	sta NTSC
	jmp l_1B90
l_1B82

; optimize OK (MPT), line = 137

	lda #$04
	sta NTSC
l_1B90

	rts

; ------------------------------------------------------------

NTSC	= DATAORIGIN+$002C

.endl							; UNIT MPT

; ------------------------------------------------------------

.local	SOKO_LV						; UNIT

.local	GETLV						; PROCEDURE

; optimize OK (SOKO_LV), line = 170

	lda #$00
	sta OFFSET

; optimize OK (SOKO_LV), line = 171

	sta CRATES

; optimize OK (SOKO_LV), line = 173

	lda LV
	sta :STACKORIGIN+9
	lda LV+1
	asl :STACKORIGIN+9
	rol @
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add #$00
	tay
	lda :STACKORIGIN+STACKWIDTH+9
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda adr.LEVELS,y
	sta LEVEL
	sta :bp2
	lda adr.LEVELS+1,y
	sta LEVEL+1
	sta :bp2+1
; optimize OK (SOKO_LV), line = 174
	ldy #$00
	lda (:bp2),y
	sub #$01
	sta LVX

; optimize OK (SOKO_LV), line = 175

	iny
	lda (:bp2),y
	sub #$01
	sta LVY

; optimize OK (SOKO_LV), line = 176

	lda LV
	asl @
	tay
	lda adr.LEVELS,y
	add #$02
	sta LEVEL
	lda adr.LEVELS+1,y
	adc #$00
	sta LEVEL+1

; optimize OK (SOKO_LV), line = 177

	ldy LVX
	iny
	sty ROW

; optimize OK (SOKO_LV), line = 179

	lda LVY
	add #$01
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*2+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH*3+11
	lda #$0C
	sub :STACKORIGIN+11
	sta :STACKORIGIN+10
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+11
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*2+11
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH*3+11
	sta :STACKORIGIN+STACKWIDTH*3+10
	lsr :STACKORIGIN+STACKWIDTH*3+10
	ror :STACKORIGIN+STACKWIDTH*2+10
	ror :STACKORIGIN+STACKWIDTH+10
	ror :STACKORIGIN+10
	lda #$50
	sta :ecx
	lda #$00
	sta :ecx+1
	lda :STACKORIGIN+10
	sta :eax
	lda :STACKORIGIN+STACKWIDTH+10
	sta :eax+1
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :eax
	sta :STACKORIGIN+10
	lda :eax+2
	sta :STACKORIGIN+STACKWIDTH*2+10
	lda :eax+3
	sta :STACKORIGIN+STACKWIDTH*3+10
	lda ATARI.SAVMSC
	add :STACKORIGIN+10
	sta :STACKORIGIN+9
	lda ATARI.SAVMSC+1
	adc :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda LVX
	add #$01
	sta :STACKORIGIN+11
	lda #$00
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda #$14
	sub :STACKORIGIN+11
	sta :STACKORIGIN+10
	lda #$00
	sbc :STACKORIGIN+STACKWIDTH+11
	sta :STACKORIGIN+STACKWIDTH+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	sta CENTERED
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta CENTERED+1

; optimize OK (SOKO_LV), line = 181

	lda #$00
	sta IY

l_1C05
; --- ForToDoCondition
	lda IY
	cmp LVY
	scc
	jne l_1C13

; optimize OK (SOKO_LV), line = 182

	lda #$00
	sta IX

l_1C1E
; --- ForToDoCondition
	lda IX
	cmp LVX
	scc
	jne l_1C2C

; optimize OK (SOKO_LV), line = 183

	lda LEVEL
	add OFFSET
	sta :bp2
	lda LEVEL+1
	adc #$00
	sta :bp2+1
	ldy IX
	lda (:bp2),y
	sta TMPCHR

; optimize OK (SOKO_LV), line = 185

	cmp #$40
	jeq l_1C59x
	cmp #$2B
	jne l_1C59
l_1C59x

; optimize OK (SOKO_LV), line = 186

	lda IX
	sta PLAYERX

; optimize OK (SOKO_LV), line = 187

	lda IY
	sta PLAYERY
l_1C59

; optimize OK (SOKO_LV), line = 190

	lda TMPCHR
	cmp #$24
	jne l_1C7A
	inc CRATES
l_1C7A

; optimize OK (SOKO_LV), line = 192

	lda #$14
	sta :ecx
	lda IY
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda :eax
	add IX
	tay
	lda TMPCHR
	sta adr.BOARD,y

; --- ForToDoEpilog
	inc IX
	jne l_1C1E
l_1C2C

; optimize OK (SOKO_LV), line = 194

	lda OFFSET
	add ROW
	sta OFFSET

; --- ForToDoEpilog
	inc IY
	jne l_1C05
l_1C13

; ------------------------------------------------------------

LV	= DATAORIGIN+$01FE
IX	= DATAORIGIN+$0200
IY	= DATAORIGIN+$0201
OFFSET	= DATAORIGIN+$0202
ROW	= DATAORIGIN+$0203
TMPCHR	= DATAORIGIN+$0204

@VarData	= LV
@VarDataSize	= 7

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

	rts

; ------------------------------------------------------------

S_WAL	= $23
S_GRA	= $78
S_PLA	= $40
S_PLD	= $2B
S_DEC	= $2E
S_CRA	= $24
S_CRD	= $2A
S_FLO	= $20
MAX_X	= $14
MAX_Y	= $0C
MIN_X	= $03
MIN_Y	= $05
SCR_ROW	= $28
SET_SIZE	= $63
LVX	= DATAORIGIN+$003D
LVY	= DATAORIGIN+$003E
PLAYERX	= DATAORIGIN+$003F
PLAYERY	= DATAORIGIN+$0040
CRATES	= DATAORIGIN+$0041
LEVEL	= DATAORIGIN+$0042
adr.BOARD	= [DATAORIGIN+$0044] .array [12] [20]
.var BOARD	= adr.BOARD .word
CENTERED	= DATAORIGIN+$0134
adr.LEVELS	= [DATAORIGIN+$0136] .array [100] .word
.var LEVELS	= adr.LEVELS .word

.endl							; UNIT SOKO_LV

; ------------------------------------------------------------

.local	SOKO_DRAW					; UNIT

.local	PUTTILE						; PROCEDURE | REGISTER

; optimize OK (SOKO_DRAW), line = 50

	ldy A+1
	sty :bp+1
	ldy A
	lda T
	sta (:bp),y

; optimize OK (SOKO_DRAW), line = 51

	add #$01
	mwy A :bp2
	ldy #$01
	sta (:bp2),y

; optimize OK (SOKO_DRAW), line = 52

	lda T
	add #$20
	ldy #$28
	sta (:bp2),y

; optimize OK (SOKO_DRAW), line = 53

	lda T
	add #$21
	iny
	sta (:bp2),y

; ------------------------------------------------------------

A	= :EDX
T	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DRAWGRASS					; PROCEDURE

; optimize OK (SOKO_DRAW), line = 63

	lda #$00
	sta OFFSET
	sta OFFSET+1

; optimize OK (SOKO_DRAW), line = 64

	sta IY

l_1CEA
; --- ForToDoCondition
	lda IY
	cmp #$0C
	jcs l_1CF8

; optimize OK (SOKO_DRAW), line = 65

	lda #$00
	sta IX

l_1D01
; --- ForToDoCondition
	lda IX
	cmp #$14
	jcs l_1D0F

; optimize OK (SOKO_DRAW), line = 66

	lda ATARI.SAVMSC
	add OFFSET
	sta :STACKORIGIN+10
	lda ATARI.SAVMSC+1
	adc OFFSET+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda IX
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	add :STACKORIGIN+10
	sta PUTTILE.A
	lda :STACKORIGIN+STACKWIDTH+10
	adc :STACKORIGIN+STACKWIDTH+11
	sta PUTTILE.A+1
	lda #$02
	sta PUTTILE.T
	jsr PUTTILE

; --- ForToDoEpilog
	inc IX
	jne l_1D01
l_1D0F

; optimize OK (SOKO_DRAW), line = 68

	lda OFFSET
	add #$50
	sta OFFSET
	scc
	inc OFFSET+1

; --- ForToDoEpilog
	inc IY
	jne l_1CEA
l_1CF8

; ------------------------------------------------------------

IX	= DATAORIGIN+$0207
IY	= DATAORIGIN+$0208
OFFSET	= DATAORIGIN+$0209

@VarData	= IX
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DRAWBOARD					; PROCEDURE

; optimize OK (SOKO_DRAW), line = 80

	lda #$00
	sta OFFSET
	sta OFFSET+1

; optimize OK (SOKO_DRAW), line = 82

	sta IY

l_1D40
; --- ForToDoCondition
	lda IY
	cmp SOKO_LV.LVY
	scc
	jne l_1D4E

; optimize OK (SOKO_DRAW), line = 83

	lda #$00
	sta IX

l_1D59
; --- ForToDoCondition
	lda IX
	cmp SOKO_LV.LVX
	scc
	jne l_1D67

; optimize OK (SOKO_DRAW), line = 84

	lda #$14
	sta :ecx
	lda IY
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda :eax
	add IX
	tay
	lda SOKO_LV.adr.BOARD,y
	sta @CASETMP_0004
	cmp #$23
	jne l_1D7F
@

; optimize OK (SOKO_DRAW), line = 85

	lda #$04
	sta TILE

	jmp a_0004
l_1D7F
	cmp #$20
	jne l_1D8C
@

; optimize OK (SOKO_DRAW), line = 86

	lda #$00
	sta TILE

	jmp a_0004
l_1D8C
	cmp #$24
	jne l_1D99
@

; optimize OK (SOKO_DRAW), line = 87

	lda #$86
	sta TILE

	jmp a_0004
l_1D99
	cmp #$2A
	jne l_1DA6
@

; optimize OK (SOKO_DRAW), line = 88

	lda #$06
	sta TILE

	jmp a_0004
l_1DA6
	cmp #$2E
	jne l_1DB3
@

; optimize OK (SOKO_DRAW), line = 89

	lda #$08
	sta TILE

	jmp a_0004
l_1DB3
	cmp #$78
	jne l_1DC0
@

; optimize OK (SOKO_DRAW), line = 90

	lda #$02
	sta TILE

	jmp a_0004
l_1DC0
	cmp #$40
	jne l_1DCD
@

; optimize OK (SOKO_DRAW), line = 91

	mwy GFX_PLA :bp2
	ldy #$00
	lda (:bp2),y
	sta TILE

	jmp a_0004
l_1DCD
	cmp #$2B
	jne l_1DDC
@

; optimize OK (SOKO_DRAW), line = 92

	mwy GFX_PLA :bp2
	ldy #$00
	lda (:bp2),y
	sta TILE

l_1DDC
a_0004

; optimize OK (SOKO_DRAW), line = 94

	lda SOKO_LV.CENTERED
	add OFFSET
	sta :STACKORIGIN+10
	lda SOKO_LV.CENTERED+1
	adc OFFSET+1
	sta :STACKORIGIN+STACKWIDTH+10
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+11
	lda IX
	asl @
	rol :STACKORIGIN+STACKWIDTH+11
	add :STACKORIGIN+10
	sta PUTTILE.A
	lda :STACKORIGIN+STACKWIDTH+10
	adc :STACKORIGIN+STACKWIDTH+11
	sta PUTTILE.A+1
	lda TILE
	sta PUTTILE.T
	jsr PUTTILE

; --- ForToDoEpilog
	inc IX
	jne l_1D59
l_1D67

; optimize OK (SOKO_DRAW), line = 96

	lda OFFSET
	add #$50
	sta OFFSET
	scc
	inc OFFSET+1

; --- ForToDoEpilog
	inc IY
	jne l_1D40
l_1D4E

; ------------------------------------------------------------

IX	= DATAORIGIN+$020B
IY	= DATAORIGIN+$020C
OFFSET	= DATAORIGIN+$020D
TILE	= DATAORIGIN+$020F
@CASETMP_0004	= DATAORIGIN+$0210

@VarData	= IX
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

	rts

; ------------------------------------------------------------

GFX_FLO	= $00
GFX_GRA	= $02
GFX_WAL	= $04
GFX_CRD	= $06
GFX_CRA	= $86
GFX_DEC	= $08
PLA_UP	= $16
PLA_DOWN	= $12
PLA_RIGHT	= $0A
PLA_LEFT	= $0E
PLA_WAVE	= $1A
GFX_PLA	= DATAORIGIN+$0205

.endl							; UNIT SOKO_DRAW

.local	SETVBK						; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000087  -------------------

  lda mode
  ldx msb
  ldy lsb
  jsr SETVBV

; ------------------------------------------------------------

MODE	= DATAORIGIN+$021B
MSB	= DATAORIGIN+$021C
LSB	= DATAORIGIN+$021D

@VarData	= MODE
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	EXITVBK						; PROCEDURE | ASSEMBLER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000088  -------------------

  jmp XITVBV

	.ENDM
@exit
.endl

.local	MAKEMOVE					; PROCEDURE
	sta JOY

; optimize OK (main.pas), line = 65

	lda #$00
	sta UPDATEPOS

; optimize OK (main.pas), line = 66

	lda SOKO_LV.PLAYERX
	sta PX
	lda SOKO_LV.PLAYERY
	sta PY

; optimize OK (main.pas), line = 67

	lda #$14
	sta :ecx
	lda SOKO_LV.PLAYERY
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda :eax
	add SOKO_LV.PLAYERX
	sta :STACKORIGIN+9
	lda :eax+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda <SOKO_LV.adr.BOARD
	add :STACKORIGIN+9
	sta STEP0
	lda >SOKO_LV.adr.BOARD
	adc :STACKORIGIN+STACKWIDTH+9
	sta STEP0+1

; optimize OK (main.pas), line = 69

	lda JOY
	sta @CASETMP_0005
	cmp #$07
	jne l_1E3F
@

; optimize OK (main.pas), line = 71

	lda STEP0
	add #$01
	sta STEP1
	lda STEP0+1
	adc #$00
	sta STEP1+1

; optimize OK (main.pas), line = 72

	lda STEP1
	add #$01
	sta STEP2
	lda STEP1+1
	adc #$00
	sta STEP2+1

; optimize FAIL (0, main.pas), line = 73

	inc PX

; optimize OK (main.pas), line = 74

	mwy SOKO_DRAW.GFX_PLA :bp2
	ldy #$00
	lda #$0A
	sta (:bp2),y

	jmp a_0005
l_1E3F
	cmp #$0B
	jne l_1E62
@

; optimize OK (main.pas), line = 77

	lda STEP0
	sub #$01
	sta STEP1
	lda STEP0+1
	sbc #$00
	sta STEP1+1

; optimize OK (main.pas), line = 78

	lda STEP1
	sub #$01
	sta STEP2
	lda STEP1+1
	sbc #$00
	sta STEP2+1

; optimize FAIL (0, main.pas), line = 79

	dec PX

; optimize OK (main.pas), line = 80

	mwy SOKO_DRAW.GFX_PLA :bp2
	ldy #$00
	lda #$0E
	sta (:bp2),y

	jmp a_0005
l_1E62
	cmp #$0E
	jne l_1E85
@

; optimize OK (main.pas), line = 83

	lda STEP0
	sub #$14
	sta STEP1
	lda STEP0+1
	sbc #$00
	sta STEP1+1

; optimize OK (main.pas), line = 84

	lda STEP1
	sub #$14
	sta STEP2
	lda STEP1+1
	sbc #$00
	sta STEP2+1

; optimize FAIL (0, main.pas), line = 85

	dec PY

; optimize OK (main.pas), line = 86

	mwy SOKO_DRAW.GFX_PLA :bp2
	ldy #$00
	lda #$16
	sta (:bp2),y

	jmp a_0005
l_1E85
	cmp #$0D
	jne l_1EA8
@

; optimize OK (main.pas), line = 89

	lda STEP0
	add #$14
	sta STEP1
	lda STEP0+1
	adc #$00
	sta STEP1+1

; optimize OK (main.pas), line = 90

	lda STEP1
	add #$14
	sta STEP2
	lda STEP1+1
	adc #$00
	sta STEP2+1

; optimize FAIL (0, main.pas), line = 91

	inc PY

; optimize OK (main.pas), line = 92

	mwy SOKO_DRAW.GFX_PLA :bp2
	ldy #$00
	lda #$12
	sta (:bp2),y

l_1EA8
a_0005

; optimize OK (main.pas), line = 96

	mvy STEP1+1 :bp+1
	ldy STEP1
	lda (:bp),y
	cmp #$20
	jne l_1EDC

; optimize OK (main.pas), line = 98

	mwy STEP1 :bp2
	ldy #$00
	lda #$40
	sta (:bp2),y
	lda #$01
	sta UPDATEPOS
	jmp l_1EEE
l_1EDC

; optimize OK (main.pas), line = 101

	mvy STEP1+1 :bp+1
	ldy STEP1
	lda (:bp),y
	cmp #$2E
	jne l_1F00

; optimize OK (main.pas), line = 103

	mwy STEP1 :bp2
	ldy #$00
	lda #$2B
	sta (:bp2),y
	lda #$01
	sta UPDATEPOS
	jmp l_1F12
l_1F00

; optimize OK (main.pas), line = 106

	mwy STEP1 :bp2
	ldy #$00
	lda (:bp2),y
	ldy #1
	cmp #$24
	beq @+
	dey
@
	sty :STACKORIGIN+9
	ldy #$00
	lda (:bp2),y
	ldy #1
	cmp #$2A
	beq @+
	dey
@
	tya
	ora :STACKORIGIN+9
	sta :STACKORIGIN+9
	mwy STEP2 :bp2
	ldy #$00
	lda (:bp2),y
	ldy #1
	cmp #$20
	beq @+
	dey
@
	sty :STACKORIGIN+10
	ldy #$00
	lda (:bp2),y
	ldy #1
	cmp #$2E
	beq @+
	dey
@
	tya
	ora :STACKORIGIN+10
	and :STACKORIGIN+9
	jeq l_1F48

; optimize OK (main.pas), line = 108

	mvy STEP2+1 :bp+1
	ldy STEP2
	lda (:bp),y
	cmp #$20
	jne l_1F5B
	ldy #$00
	lda #$24
	sta (:bp2),y
	jmp l_1F69
l_1F5B
	mwy STEP2 :bp2
	ldy #$00
	lda #$2A
	sta (:bp2),y
l_1F69

; optimize OK (main.pas), line = 110

	mvy STEP1+1 :bp+1
	ldy STEP1
	lda (:bp),y
	cmp #$24
	jne l_1F8B
	mvy STEP2+1 :bp+1
	ldy STEP2
	lda (:bp),y
	cmp #$2A
	jne l_1F8B
	dec SOKO_LV.CRATES
	jmp l_1F99
l_1F8B

; optimize OK (main.pas), line = 111

	mvy STEP1+1 :bp+1
	ldy STEP1
	lda (:bp),y
	cmp #$2A
	jne l_1FB7
	mvy STEP2+1 :bp+1
	ldy STEP2
	lda (:bp),y
	cmp #$24
	jne l_1FB7
	inc SOKO_LV.CRATES
l_1FB7
l_1F99

; optimize OK (main.pas), line = 113

	mvy STEP1+1 :bp+1
	ldy STEP1
	lda (:bp),y
	cmp #$24
	jne l_1FD0
	mwy STEP1 :bp2
	ldy #$00
	lda #$40
	sta (:bp2),y
	jmp l_1FDE
l_1FD0
	mwy STEP1 :bp2
	ldy #$00
	lda #$2B
	sta (:bp2),y
l_1FDE

; optimize OK (main.pas), line = 115

	lda #$01
	sta UPDATEPOS
l_1F48
l_1F12
l_1EEE

; optimize OK (main.pas), line = 118

	lda UPDATEPOS
	jeq l_1FF4

; optimize OK (main.pas), line = 119

	mvy STEP0+1 :bp+1
	ldy STEP0
	lda (:bp),y
	cmp #$40
	jne l_2007
	mwy STEP0 :bp2
	ldy #$00
	lda #$20
	sta (:bp2),y
	jmp l_2015
l_2007
	mwy STEP0 :bp2
	ldy #$00
	lda #$2E
	sta (:bp2),y
l_2015

; optimize OK (main.pas), line = 120

	lda PX
	sta SOKO_LV.PLAYERX
	lda PY
	sta SOKO_LV.PLAYERY

; optimize OK (main.pas), line = 122

	lda ISODDFRAME
	jeq l_2031
	mwy SOKO_DRAW.GFX_PLA :bp2
	ldy #$00
	lda (:bp2),y
	add #$02
	sta (:bp2),y
l_2031

; optimize OK (main.pas), line = 123

	ldy #1
	lda ISODDFRAME
	beq @+
	dey
@
	tya
	sta ISODDFRAME

; optimize FAIL ('SOKO_DRAW.DRAWBOARD', main.pas), line = 125

	jsr SOKO_DRAW.DRAWBOARD

; optimize OK (main.pas), line = 127

	lda #$07
	sta MOVETIMER
l_1FF4

; ------------------------------------------------------------

JOY	= DATAORIGIN+$021E
UPDATEPOS	= DATAORIGIN+$021F
PX	= DATAORIGIN+$0220
PY	= DATAORIGIN+$0221
STEP0	= DATAORIGIN+$0222
STEP1	= DATAORIGIN+$0224
STEP2	= DATAORIGIN+$0226
@CASETMP_0005	= DATAORIGIN+$0228

@VarData	= JOY
@VarDataSize	= 11

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITLV						; PROCEDURE

; optimize OK (main.pas), line = 136

	lda #$00
	sta ISODDFRAME

; optimize OK (main.pas), line = 137

	mwy SOKO_DRAW.GFX_PLA :bp2
	ldy #$00
	lda #$12
	sta (:bp2),y

; optimize OK (main.pas), line = 138

	lda ILV
	sta SOKO_LV.GETLV.LV
	lda #$00
	sta SOKO_LV.GETLV.LV+1
	jsr SOKO_LV.GETLV

; optimize FAIL ('SOKO_DRAW.DRAWBOARD', main.pas), line = 139

	jsr SOKO_DRAW.DRAWBOARD
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	NEXTLV						; PROCEDURE

; optimize OK (main.pas), line = 144

	lda ILV
	cmp #$63
	jcs l_206C
	inc ILV
	jmp l_207A
l_206C
	lda #$00
	sta ILV
l_207A

; optimize FAIL ('SOKO_DRAW.DRAWGRASS', main.pas), line = 145

	jsr SOKO_DRAW.DRAWGRASS

; optimize FAIL ('INITLV', main.pas), line = 146

	jsr INITLV
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PREVLV						; PROCEDURE

; optimize OK (main.pas), line = 151

	lda ILV
	jeq l_2096
	dec ILV
	jmp l_20A4
l_2096
	lda #$63
	sta ILV
l_20A4

; optimize FAIL ('SOKO_DRAW.DRAWGRASS', main.pas), line = 152

	jsr SOKO_DRAW.DRAWGRASS

; optimize FAIL ('INITLV', main.pas), line = 153

	jsr INITLV
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	COMPLETELV					; PROCEDURE

; optimize OK (main.pas), line = 161

	lda #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda SOKO_LV.PLAYERX
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	add SOKO_LV.CENTERED
	sta :STACKORIGIN+9
	lda SOKO_LV.CENTERED+1
	adc :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+STACKWIDTH+9
	lda SOKO_LV.PLAYERY
	sta :STACKORIGIN+10
	lda #$00
	asl :STACKORIGIN+10
	rol @
	sta :eax+1
	lda #$28
	sta :ecx
	lda #$00
	sta :ecx+1
	lda :STACKORIGIN+10
	sta :eax
	.ifdef fmulinit
	fmulu_16
	els
	imulCX
	eif
	lda :STACKORIGIN+9
	add :eax
	sta TMP
	lda :STACKORIGIN+STACKWIDTH+9
	adc :eax+1
	sta TMP+1

; optimize OK (main.pas), line = 162

	lda #$07
	sta I

l_20D4
; --- ForToDoCondition

; optimize OK (main.pas), line = 163

	lda I
	and #$01
	jne l_20F8
	lda TMP
	sta SOKO_DRAW.PUTTILE.A
	lda TMP+1
	sta SOKO_DRAW.PUTTILE.A+1
	lda #$1A
	sta SOKO_DRAW.PUTTILE.T
	jsr SOKO_DRAW.PUTTILE
	jmp l_2106
l_20F8
	lda TMP
	sta SOKO_DRAW.PUTTILE.A
	lda TMP+1
	sta SOKO_DRAW.PUTTILE.A+1
	lda #$1C
	sta SOKO_DRAW.PUTTILE.T
	jsr SOKO_DRAW.PUTTILE
l_2106

; optimize OK (main.pas), line = 164

	lda #$0A
	sta SYSTEM.PAUSE_1AF9.N
	lda #$00
	sta SYSTEM.PAUSE_1AF9.N+1
	jsr SYSTEM.PAUSE_1AF9

; --- ForToDoEpilog
	dec I
	jpl l_20D4
l_20E2

; optimize OK (main.pas), line = 166

	lda #$19
	sta SYSTEM.PAUSE_1AF9.N
	lda #$00
	sta SYSTEM.PAUSE_1AF9.N+1
	jsr SYSTEM.PAUSE_1AF9

; optimize FAIL ('NEXTLV', main.pas), line = 168

	jsr NEXTLV

; ------------------------------------------------------------

I	= DATAORIGIN+$0229
TMP	= DATAORIGIN+$022A

@VarData	= I
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITSCREEN					; PROCEDURE

; optimize OK (main.pas), line = 175

	lda #$1C
	jsr GRAPH.INITGRAPH_1B26

; optimize OK (main.pas), line = 177

	lda #$9C
	sta ATARI.CHBAS

; optimize OK (main.pas), line = 179

	lda #$04
	sta ATARI.COLOR0

; optimize OK (main.pas), line = 180

	lda #$06
	sta ATARI.COLOR1

; optimize OK (main.pas), line = 181

	lda #$0E
	sta ATARI.COLOR2

; optimize OK (main.pas), line = 182

	lda #$0A
	sta ATARI.COLOR3

; optimize OK (main.pas), line = 183

	lda #$C0
	sta ATARI.COLOR4
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	VBLANKD						; PROCEDURE

; optimize OK (main.pas), line = 190

	lda MOVETIMER
	jeq l_2148
	dec MOVETIMER
l_2148

; optimize FAIL ('MPT.TMPT.PLAY', main.pas), line = 191

	lda MSX
	ldy MSX+1
	jsr MPT.TMPT.PLAY

; optimize FAIL ('m@INLINE', main.pas), line = 192

	.local +MAIN.EXITVBK
	m@INLINE
	.endl
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_1A97

; optimize FAIL ('SYSTEM.PAUSE_1AF8', main.pas), line = 199

	jsr SYSTEM.PAUSE_1AF8

; optimize OK (main.pas), line = 200

	lda #$07
	sta SETVBK.MODE
	lda >VBLANKD
	sta SETVBK.MSB
	lda <VBLANKD
	sta SETVBK.LSB
	jsr SETVBK

; optimize OK (main.pas), line = 202

	lda #$00
	sta MSX.PLAYER
	lda #$A0
	sta MSX.PLAYER+1

; optimize OK (main.pas), line = 203

	lda #$00
	sta MSX.MODUL
	lda #$A5
	sta MSX.MODUL+1

; optimize FAIL ('MPT.TMPT.INIT', main.pas), line = 204

	lda MSX
	ldy MSX+1
	jsr MPT.TMPT.INIT

; optimize FAIL ('INITSCREEN', main.pas), line = 206

	jsr INITSCREEN

; optimize FAIL ('NEXTLV', main.pas), line = 207

	jsr NEXTLV

; --- RepeatUntilProlog
l_2161

; optimize OK (main.pas), line = 211

	lda SOKO_LV.CRATES
	jne l_2173
	jsr COMPLETELV
l_2173

; optimize OK (main.pas), line = 213

	lda MOVETIMER
	jne l_2189

; optimize OK (main.pas), line = 215

?volatile:
	lda JOYSTICK.JOY_1
	cmp #$0E
	jeq l_21C0x
?volatile:
	cmp #$0D
	jeq l_21C0x
?volatile:
	cmp #$0B
	jeq l_21C0x
?volatile:
	cmp #$07
	jne l_21C0
l_21C0x

; optimize OK (main.pas), line = 220

?volatile:
	lda JOYSTICK.JOY_1
	jsr MAKEMOVE
l_21C0
l_2189

; optimize OK (main.pas), line = 222

	lda ATARI.CH
	cmp #$FF
	jeq l_21DB

; optimize OK (main.pas), line = 223

	sta @CASETMP_0006
	cmp #$21
	jne l_21E7
@

; optimize FAIL ('INITLV', main.pas), line = 224

	jsr INITLV
	jmp a_0006
l_21E7
	cmp #$87
	jne l_21F1
@

; optimize FAIL ('NEXTLV', main.pas), line = 225

	jsr NEXTLV
	jmp a_0006
l_21F1
	cmp #$86
	jne l_21FB
@

; optimize FAIL ('PREVLV', main.pas), line = 226

	jsr PREVLV
l_21FB
a_0006

; optimize OK (main.pas), line = 228

	lda #$FF
	sta ATARI.CH
l_21DB

; optimize FAIL ('SYSTEM.PAUSE_1AF8', main.pas), line = 231

	jsr SYSTEM.PAUSE_1AF8

; optimize OK (main.pas), line = 232

	jmp l_2161

; ------------------------------------------------------------

SETVBV	= $E45C
XITVBV	= $E462
BOARD_GFX	= $9C00
MPT_PLAYER	= $A000
MPT_MODUL	= $A500
JOY_DELAY	= $07
KEY_SPACE	= $21
KEY_R	= $28
KEY_RIGHT	= $87
KEY_LEFT	= $86
DIR	= DATAORIGIN+$0211
ISFIRE	= DATAORIGIN+$0212
ISODDFRAME	= DATAORIGIN+$0213
TILE	= DATAORIGIN+$0214
ILV	= DATAORIGIN+$0215
MOVETIMER	= DATAORIGIN+$0216
adr.MSX	= DATAORIGIN+$0217	; [4] OBJECT
.var MSX	= adr.MSX .word
MSX.PLAYER	= DATAORIGIN+$0217
MSX.MODUL	= DATAORIGIN+$0219
@CASETMP_0006	= DATAORIGIN+$022C
@exit

@halt	ldx #$00
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	.fi

	.ifdef MAIN.TYPES.@UnitInit
	jsr MAIN.TYPES.@UnitInit
	.fi

	.ifdef MAIN.GRAPH.@UnitInit
	jsr MAIN.GRAPH.@UnitInit
	.fi

	.ifdef MAIN.JOYSTICK.@UnitInit
	jsr MAIN.JOYSTICK.@UnitInit
	.fi

	.ifdef MAIN.MISC.@UnitInit
	jsr MAIN.MISC.@UnitInit
	.fi

	.ifdef MAIN.MPT.@UnitInit
	jsr MAIN.MPT.@UnitInit
	.fi

	.ifdef MAIN.SOKO_LV.@UnitInit
	jsr MAIN.SOKO_LV.@UnitInit
	.fi

	.ifdef MAIN.SOKO_DRAW.@UnitInit
	jsr MAIN.SOKO_DRAW.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.TYPES) > 0
	.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
	eif

	ift .SIZEOF(MAIN.GRAPH) > 0
	.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
	eif

	ift .SIZEOF(MAIN.JOYSTICK) > 0
	.print 'JOYSTICK: ',MAIN.JOYSTICK,'..',MAIN.JOYSTICK+.SIZEOF(MAIN.JOYSTICK)-1
	eif

	ift .SIZEOF(MAIN.MISC) > 0
	.print 'MISC: ',MAIN.MISC,'..',MAIN.MISC+.SIZEOF(MAIN.MISC)-1
	eif

	ift .SIZEOF(MAIN.MPT) > 0
	.print 'MPT: ',MAIN.MPT,'..',MAIN.MPT+.SIZEOF(MAIN.MPT)-1
	eif

	ift .SIZEOF(MAIN.SOKO_LV) > 0
	.print 'SOKO_LV: ',MAIN.SOKO_LV,'..',MAIN.SOKO_LV+.SIZEOF(MAIN.SOKO_LV)-1
	eif

	ift .SIZEOF(MAIN.SOKO_DRAW) > 0
	.print 'SOKO_DRAW: ',MAIN.SOKO_DRAW,'..',MAIN.SOKO_DRAW+.SIZEOF(MAIN.SOKO_DRAW)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	.align $0004

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $27  $00 $00 $00 $17 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $01 $20
.by  $45 $20 $89 $20 $CD $20 $11 $21  $55 $21 $99 $21 $DD $21 $21 $22  $65 $22 $A9 $22 $ED $22 $31 $23
.by  $75 $23 $B9 $23 $FD $23 $41 $24  $85 $24 $C9 $24 $0D $25 $51 $25  $95 $25 $D9 $25 $1D $26 $61 $26
.by  $A5 $26 $E9 $26 $2D $27 $71 $27  $B5 $27 $F9 $27 $3D $28 $81 $28  $C5 $28 $09 $29 $4D $29 $91 $29
.by  $D5 $29 $19 $2A $5D $2A $A1 $2A  $E5 $2A $29 $2B $6D $2B $B1 $2B  $F5 $2B $39 $2C $7D $2C $C1 $2C
.by  $05 $2D $49 $2D $8D $2D $D1 $2D  $15 $2E $59 $2E $9D $2E $E1 $2E  $25 $2F $69 $2F $AD $2F $F1 $2F
.by  $35 $30 $79 $30 $BD $30 $01 $31  $45 $31 $89 $31 $CD $31 $11 $32  $55 $32 $99 $32 $DD $32 $21 $33
.by  $65 $33 $A9 $33 $ED $33 $31 $34  $75 $34 $B9 $34 $FD $34 $41 $35  $85 $35 $C9 $35 $0D $36 $51 $36
.by  $95 $36 $D9 $36 $1D $37 $61 $37  $A5 $37 $E9 $37 $2D $38 $71 $38  $B5 $38 $F9 $38 $3D $39 $81 $39
.by  $C5 $39 $09 $3A $4D $3A $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $64

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 557

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $42 $08 $08 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $20 $2E $23  $23 $23 $23 $23 $23 $20 $20 $23
.by  $23 $23 $23 $23 $23 $2A $40 $20  $20 $23 $23 $23 $23 $20 $20 $24  $20 $23 $23 $23 $23 $20 $20 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $20 $20 $20 $20 $23 $23 $23  $23 $20 $23 $40 $20 $23 $23 $23
.by  $23 $20 $24 $2A $20 $23 $23 $23  $23 $20 $2E $2A $20 $23 $23 $23  $23 $20 $20 $20 $20 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $00  $42 $08 $08 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $20 $20 $20 $20  $20 $20 $23 $23 $20 $2E $2A $2A
.by  $24 $40 $23 $23 $20 $20 $20 $20  $20 $20 $23 $23 $23 $23 $23 $23  $20 $20 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $20 $20 $20 $20 $20 $23 $23  $23 $20 $2E $24 $2E $20 $23 $23  $23 $20 $24 $40 $24 $20 $23 $23
.by  $20 $20 $2E $24 $2E $20 $23 $23  $20 $20 $20 $20 $20 $20 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $00  $42 $08 $08 $23 $23 $23 $23 $23  $23 $23 $23 $23 $20 $20 $20 $20
.by  $20 $23 $23 $23 $20 $2E $24 $2E  $20 $23 $23 $23 $20 $24 $2E $24  $20 $23 $23 $23 $20 $2E $24 $2E
.by  $20 $23 $23 $23 $20 $24 $2E $24  $20 $23 $23 $23 $20 $20 $40 $20  $20 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $00 $42 $08 $08 $23  $23 $23 $23 $23 $23 $23 $23 $23  $23 $2E $20 $20 $23 $23 $23 $23
.by  $23 $40 $24 $24 $20 $23 $23 $23  $23 $23 $20 $20 $20 $23 $23 $23  $23 $23 $23 $20 $20 $23 $23 $23
.by  $23 $23 $23 $23 $2E $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $00
.by  $42 $08 $08 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $20 $20 $20 $20
.by  $20 $23 $23 $23 $20 $23 $20 $23  $20 $23 $23 $23 $2E $20 $24 $2A  $40 $23 $23 $23 $20 $20 $20 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $20 $40 $20 $23 $23 $23 $23  $23 $2E $2E $2E $23 $23 $23 $23
.by  $23 $24 $24 $24 $23 $23 $23 $23  $23 $20 $20 $20 $20 $23 $23 $23  $23 $20 $20 $20 $20 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $00  $42 $08 $08 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $20 $20 $20 $2E  $2E $20 $23 $23 $20 $20 $40 $24  $24 $20 $23 $23 $23 $23 $23 $23
.by  $20 $23 $23 $23 $23 $23 $23 $20  $20 $23 $23 $23 $23 $23 $23 $20  $20 $23 $23 $23 $23 $23 $23 $20
.by  $20 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $20 $20 $23 $23 $23 $23 $23 $23  $20 $2E $20 $2E $20 $23 $23 $23
.by  $20 $24 $24 $23 $40 $23 $23 $23  $23 $20 $20 $20 $20 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $00  $42 $08 $08 $23 $23 $23 $23 $23  $23 $23 $23 $23 $20 $20 $2A $20
.by  $20 $23 $23 $23 $20 $20 $20 $20  $20 $23 $23 $23 $23 $20 $23 $20  $23 $23 $23 $23 $23 $24 $40 $2E
.by  $23 $23 $23 $23 $23 $20 $20 $20  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $00 $42 $08 $08 $23  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $20 $20 $20 $23 $23 $23
.by  $23 $23 $24 $24 $40 $23 $23 $23  $20 $20 $20 $23 $23 $23 $23 $23  $20 $20 $20 $20 $20 $23 $23 $23
.by  $20 $2E $20 $2E $20 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $00
.by  $42 $08 $08 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $20 $20 $23  $23 $23 $23 $23 $23 $20 $24 $24
.by  $20 $23 $23 $23 $23 $2E $2E $2E  $20 $23 $23 $23 $20 $20 $40 $24  $20 $23 $23 $23 $20 $20 $20 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $20 $40 $20 $23 $23 $23  $23 $23 $20 $20 $20 $23 $23 $23
.by  $23 $23 $23 $24 $20 $23 $23 $23  $23 $20 $2E $2E $2E $23 $23 $23  $23 $20 $24 $24 $20 $23 $23 $23
.by  $23 $23 $23 $20 $20 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $00  $42 $08 $08 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $20 $20 $20 $2E  $23 $23 $23 $23 $20 $23 $23 $20  $23 $23 $23 $23 $20 $20 $24 $24
.by  $40 $23 $23 $23 $20 $23 $20 $20  $20 $23 $23 $23 $2E $20 $20 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $20 $20 $20 $23 $23 $23 $23 $23  $20 $40 $20 $23 $23 $23 $23 $23  $20 $24 $24 $23 $23 $23 $23 $23
.by  $23 $2E $20 $2E $20 $23 $23 $23  $23 $20 $20 $20 $20 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $00  $42 $08 $08 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $20 $20 $23
.by  $23 $23 $23 $23 $23 $20 $24 $24  $20 $23 $23 $23 $23 $2E $2E $2E  $20 $23 $23 $23 $23 $20 $40 $24
.by  $20 $23 $23 $23 $23 $20 $20 $20  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $00 $42 $08 $08 $23  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $20 $20 $23 $23 $23 $23
.by  $23 $40 $24 $2E $23 $23 $23 $23  $20 $24 $24 $20 $20 $23 $23 $23  $20 $2E $20 $2E $20 $23 $23 $23
.by  $23 $23 $20 $20 $20 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $00
.by  $42 $08 $08 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $20 $20 $23  $23 $23 $23 $23 $20 $20 $20 $20
.by  $20 $23 $23 $23 $2E $2A $2A $24  $40 $23 $23 $23 $20 $20 $20 $23  $23 $23 $23 $23 $23 $20 $20 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $2E $20 $23 $20 $20 $23 $23 $23  $20 $20 $24 $20 $20 $23 $23 $23
.by  $2E $20 $24 $23 $40 $23 $23 $23  $20 $20 $24 $20 $20 $23 $23 $23  $2E $20 $23 $20 $20 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $00  $42 $08 $08 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $20 $20 $20  $23 $23 $23 $23 $23 $20 $20 $20
.by  $23 $23 $23 $23 $20 $24 $24 $24  $20 $23 $23 $23 $20 $2E $2B $2E  $20 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $20 $20 $20 $20 $20 $23 $23 $23  $40 $24 $24 $24 $20 $23 $23 $23
.by  $20 $20 $23 $2E $2E $2E $23 $23  $23 $20 $20 $20 $20 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $00  $42 $08 $08 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $20
.by  $20 $23 $23 $23 $23 $23 $23 $40  $20 $23 $23 $23 $23 $23 $23 $24  $2E $23 $23 $23 $20 $20 $20 $24
.by  $2E $23 $23 $23 $20 $23 $20 $24  $2E $23 $23 $23 $20 $20 $20 $20  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $00 $42 $08 $08 $23  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $40 $24 $2E $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $00
.by  $42 $08 $08 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $2E $2E $2E  $20 $23 $23 $23 $23 $20 $20 $24
.by  $20 $23 $23 $23 $23 $20 $23 $24  $23 $23 $23 $23 $23 $20 $20 $24  $20 $23 $23 $23 $23 $20 $20 $40
.by  $20 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $20 $20 $20 $20 $23 $23 $23  $20 $20 $23 $23 $20 $23 $23 $23
.by  $20 $23 $20 $24 $20 $23 $23 $23  $20 $20 $2A $20 $2E $23 $23 $23  $23 $20 $23 $40 $23 $23 $23 $23
.by  $23 $20 $20 $20 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $00  $42 $08 $08 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $20 $20 $40 $20  $23 $23 $23 $23 $20 $20 $23 $20  $23 $23 $23 $23 $20 $2E $23 $20
.by  $20 $23 $23 $23 $20 $2E $24 $24  $24 $20 $23 $23 $20 $2E $23 $20  $20 $20 $23 $23 $23 $23 $23 $20
.by  $20 $20 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $20 $20 $23 $23 $23 $23 $23 $23  $20 $20 $20 $20 $23 $23 $23 $23  $20 $20 $24 $2A $40 $20 $23 $23
.by  $23 $23 $20 $2E $23 $20 $23 $23  $23 $23 $20 $20 $20 $20 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $00  $42 $08 $08 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $20
.by  $40 $23 $23 $23 $23 $20 $20 $24  $20 $23 $23 $23 $23 $20 $20 $2A  $2E $23 $23 $23 $23 $20 $20 $2A
.by  $2E $23 $23 $23 $23 $20 $20 $24  $20 $23 $23 $23 $23 $23 $23 $20  $20 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $00 $42 $08 $08 $23  $23 $23 $23 $23 $23 $23 $23 $23  $23 $2E $20 $2E $23 $23 $23 $23
.by  $20 $2A $20 $2A $20 $23 $23 $23  $20 $20 $23 $20 $20 $23 $23 $23  $20 $24 $20 $24 $20 $23 $23 $23
.by  $23 $20 $40 $20 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $00
.by  $42 $08 $08 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $20 $20 $20 $23
.by  $23 $23 $23 $23 $20 $20 $24 $20  $20 $23 $23 $23 $23 $2A $20 $2E  $20 $23 $23 $23 $23 $20 $20 $20
.by  $40 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $20 $20 $23 $23 $23 $23 $23 $23  $2E $2A $24 $20 $20 $23 $23 $23
.by  $20 $2E $24 $23 $20 $23 $23 $23  $23 $20 $40 $20 $20 $23 $23 $23  $23 $20 $20 $20 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $00  $42 $08 $08 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $20 $20 $20 $23  $23 $23 $23 $23 $20 $23 $20 $20  $23 $23 $23 $23 $40 $24 $2A $2E
.by  $23 $23 $23 $23 $23 $20 $20 $2E  $20 $23 $23 $23 $23 $20 $24 $23  $20 $23 $23 $23 $23 $23 $20 $20
.by  $20 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $20 $20 $20 $23 $23 $23 $23 $23  $20 $2E $20 $20 $20 $23 $23 $23  $23 $2A $23 $24 $20 $20 $23 $23
.by  $20 $2E $23 $20 $24 $20 $23 $23  $20 $40 $23 $23 $20 $23 $23 $23  $20 $20 $20 $20 $20 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $00  $42 $08 $08 $23 $23 $23 $23 $23  $23 $23 $23 $23 $40 $20 $20 $20
.by  $20 $20 $23 $23 $20 $2E $24 $24  $2E $20 $23 $23 $20 $24 $2E $2E  $24 $20 $23 $23 $20 $24 $2E $2E
.by  $24 $20 $23 $23 $20 $2E $24 $24  $2E $20 $23 $23 $20 $20 $20 $20  $20 $20 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $00 $42 $08 $08 $23  $23 $23 $23 $23 $23 $23 $23 $23  $20 $40 $23 $20 $20 $23 $23 $23
.by  $2E $24 $20 $20 $20 $23 $23 $23  $2E $20 $23 $20 $24 $23 $23 $23  $2E $24 $23 $20 $20 $20 $23 $23
.by  $2E $20 $23 $20 $24 $20 $23 $23  $20 $20 $23 $20 $20 $20 $23 $23  $23 $23 $23 $23 $23 $23 $23 $00
.by  $42 $08 $08 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $20 $2E  $20 $23 $23 $23 $23 $23 $20 $24
.by  $20 $20 $23 $23 $20 $2E $20 $24  $23 $40 $23 $23 $20 $23 $24 $20  $2E $20 $23 $23 $20 $20 $24 $20
.by  $23 $23 $23 $23 $23 $20 $2E $20  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $20 $20 $20 $20 $20 $20 $23 $23  $20 $24 $2A $2A $2A $20 $23 $23
.by  $20 $2A $20 $20 $2A $20 $23 $23  $20 $2A $20 $20 $2A $20 $23 $23  $20 $2A $2A $2A $2E $20 $23 $23
.by  $20 $20 $20 $20 $20 $40 $23 $23  $23 $23 $23 $23 $23 $23 $23 $00  $42 $08 $08 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $20 $20 $23  $23 $23 $23 $23 $23 $20 $20 $23  $23 $23 $23 $23 $23 $20 $20 $23
.by  $23 $23 $23 $23 $23 $2E $24 $24  $40 $23 $23 $23 $23 $20 $20 $2E  $20 $23 $23 $23 $23 $20 $20 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $20 $20 $20 $23 $23 $23  $23 $23 $2E $23 $20 $23 $23 $23  $23 $20 $20 $40 $20 $23 $23 $23
.by  $23 $20 $20 $24 $20 $23 $23 $23  $23 $20 $23 $2A $23 $23 $23 $23  $23 $20 $20 $20 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $00  $42 $08 $08 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $20
.by  $20 $23 $23 $23 $20 $20 $23 $20  $20 $23 $23 $23 $20 $2E $20 $2E  $20 $23 $23 $23 $20 $40 $24 $24
.by  $20 $23 $23 $23 $20 $23 $20 $23  $23 $23 $23 $23 $20 $20 $20 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $00 $42 $08 $08 $23  $23 $23 $23 $23 $23 $23 $23 $23  $20 $20 $20 $20 $23 $23 $23 $23
.by  $20 $24 $24 $20 $23 $23 $23 $23  $23 $23 $20 $40 $20 $20 $23 $23  $23 $23 $20 $20 $2E $20 $23 $23
.by  $23 $23 $23 $20 $2E $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $00
.by  $42 $08 $08 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $20 $20  $20 $23 $23 $23 $20 $20 $24 $23
.by  $20 $23 $23 $23 $20 $20 $2E $24  $20 $23 $23 $23 $23 $20 $23 $23  $2E $23 $23 $23 $23 $20 $20 $20
.by  $40 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $20 $20 $20 $40 $20 $20 $23 $23  $20 $20 $20 $2A $20 $20 $23 $23
.by  $23 $23 $2E $24 $23 $23 $23 $23  $23 $23 $20 $2A $20 $23 $23 $23  $23 $23 $20 $20 $20 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $00  $42 $08 $08 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $20 $20 $20  $20 $23 $23 $23 $23 $20 $23 $24  $40 $23 $23 $23 $23 $20 $2E $2A
.by  $2E $23 $23 $23 $23 $20 $23 $24  $20 $23 $23 $23 $23 $20 $20 $20  $20 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $20 $20 $20 $23 $23 $23 $23 $23  $20 $20 $20 $23 $23 $23 $23 $23
.by  $24 $24 $24 $40 $20 $23 $23 $23  $2E $2E $2E $20 $20 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $00  $42 $08 $08 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $2E $23 $20  $20 $23 $23 $23 $23 $40 $24 $24  $20 $23 $23 $23 $23 $2E $2E $24
.by  $20 $23 $23 $23 $23 $23 $20 $20  $20 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $00 $42 $08 $08 $23  $23 $23 $23 $23 $23 $23 $23 $23  $20 $20 $20 $23 $23 $23 $23 $23
.by  $20 $20 $20 $20 $20 $23 $23 $23  $20 $20 $20 $20 $20 $23 $23 $23  $23 $23 $2E $23 $23 $23 $23 $23
.by  $20 $24 $2A $24 $20 $23 $23 $23  $20 $20 $2B $20 $20 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $00
.by  $42 $08 $08 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $20 $20 $23  $23 $23 $23 $23 $20 $2E $24 $20
.by  $20 $23 $23 $23 $40 $2E $24 $20  $20 $23 $23 $23 $20 $2E $24 $20  $23 $23 $23 $23 $23 $20 $20 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $20 $20 $23 $23 $23 $23 $23 $23  $20 $20 $23 $20 $20 $23 $23 $23
.by  $2E $24 $2A $2A $40 $23 $23 $23  $23 $20 $20 $20 $20 $23 $23 $23  $23 $20 $20 $20 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $00  $42 $08 $08 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $20 $20 $23 $23 $23 $23 $20 $24  $24 $20 $23 $23 $23 $23 $20 $23
.by  $20 $20 $23 $23 $23 $20 $2E $23  $24 $40 $23 $23 $20 $20 $20 $20  $20 $20 $23 $23 $20 $2E $2E $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $20 $20 $20 $23 $23 $23  $23 $23 $24 $23 $40 $23 $23 $23  $23 $23 $20 $24 $20 $23 $23 $23
.by  $23 $20 $20 $20 $23 $23 $23 $23  $23 $2E $2A $2E $20 $23 $23 $23  $23 $20 $20 $20 $20 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $00  $42 $08 $08 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $20 $20 $20
.by  $23 $23 $23 $23 $23 $24 $23 $40  $20 $23 $23 $23 $23 $20 $24 $20  $20 $23 $23 $23 $23 $20 $20 $23
.by  $23 $23 $23 $23 $20 $24 $2E $20  $20 $23 $23 $23 $2E $20 $2E $20  $20 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $00 $42 $08 $08 $23  $23 $23 $23 $23 $23 $23 $23 $23  $20 $20 $20 $20 $20 $23 $23 $23
.by  $20 $24 $24 $24 $2E $23 $23 $23  $23 $20 $23 $40 $2E $23 $23 $23  $23 $20 $23 $20 $2E $23 $23 $23
.by  $23 $20 $20 $23 $20 $23 $23 $23  $23 $23 $20 $20 $20 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $00
.by  $42 $08 $08 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $20 $20 $23  $23 $23 $23 $23 $23 $24 $20 $20
.by  $20 $23 $23 $23 $23 $20 $2E $23  $20 $23 $23 $23 $23 $2A $2E $20  $20 $23 $23 $23 $20 $24 $20 $23
.by  $23 $23 $23 $23 $20 $40 $20 $23  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $20 $20 $20 $23 $23 $23 $23  $20 $2E $24 $2E $20 $23 $23 $23
.by  $20 $24 $23 $24 $20 $23 $23 $23  $20 $2E $24 $2E $20 $23 $23 $23  $20 $20 $20 $20 $23 $23 $23 $23
.by  $23 $20 $40 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $00  $42 $08 $08 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $20 $20 $20 $20  $20 $20 $23 $23 $20 $23 $23 $23  $24 $20 $23 $23 $20 $23 $20 $20
.by  $24 $20 $23 $23 $20 $23 $2E $2A  $24 $40 $23 $23 $20 $23 $2E $23  $20 $20 $23 $23 $20 $20 $2E $23
.by  $20 $20 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $20 $20 $20 $20 $23 $23 $23 $23  $20 $23 $23 $24 $23 $23 $23 $23  $20 $23 $20 $24 $20 $20 $23 $23
.by  $20 $40 $2E $2A $2E $20 $23 $23  $23 $20 $20 $20 $20 $20 $23 $23  $23 $20 $20 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $00  $42 $08 $08 $23 $23 $23 $23 $23  $23 $23 $23 $23 $20 $20 $20 $23
.by  $23 $23 $23 $23 $20 $23 $20 $2E  $20 $20 $23 $23 $20 $23 $24 $2E  $20 $20 $23 $23 $20 $40 $24 $2A
.by  $23 $20 $23 $23 $23 $23 $23 $20  $20 $20 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $00 $42 $08 $08 $23  $23 $23 $23 $23 $23 $23 $23 $23  $20 $20 $24 $2E $20 $20 $23 $23
.by  $20 $20 $24 $2E $20 $20 $23 $23  $23 $23 $20 $20 $23 $23 $23 $23  $20 $20 $24 $2E $20 $20 $23 $23
.by  $40 $20 $24 $2E $20 $20 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $00
.by  $42 $08 $08 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $20 $20 $20  $20 $23 $23 $23 $23 $2E $20 $2E
.by  $2E $23 $23 $23 $23 $23 $24 $20  $40 $20 $23 $23 $20 $24 $20 $20  $24 $20 $23 $23 $20 $20 $20 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $20 $20 $20 $23 $23  $23 $23 $20 $2E $23 $20 $23 $23
.by  $20 $20 $24 $2A $24 $40 $23 $23  $20 $20 $20 $2E $23 $20 $23 $23  $23 $23 $20 $23 $20 $20 $23 $23
.by  $23 $23 $20 $20 $20 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $00  $42 $08 $08 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $20  $20 $20 $23 $23 $23 $20 $20 $20  $20 $20 $23 $23 $20 $2A $2A $24
.by  $20 $23 $23 $23 $20 $20 $2A $20  $2E $23 $23 $23 $23 $23 $20 $23  $40 $23 $23 $23 $23 $23 $20 $20
.by  $20 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $20 $2E $20 $2E $20 $23 $23 $23  $2E $24 $24 $24 $2E $23 $23 $23  $20 $24 $40 $24 $20 $23 $23 $23
.by  $2E $24 $24 $24 $2E $23 $23 $23  $20 $2E $20 $2E $20 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $00  $42 $08 $08 $23 $23 $23 $23 $23  $23 $23 $23 $23 $20 $20 $23 $20
.by  $20 $20 $23 $23 $20 $20 $23 $2E  $2E $20 $23 $23 $20 $24 $24 $24  $24 $24 $23 $23 $20 $20 $23 $2E
.by  $2E $2E $23 $23 $20 $20 $23 $20  $20 $20 $23 $23 $20 $20 $40 $20  $20 $20 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $00 $42 $08 $08 $23  $23 $23 $23 $23 $23 $23 $23 $23  $20 $20 $20 $23 $20 $20 $23 $23
.by  $20 $24 $2E $24 $2E $20 $23 $23  $23 $2E $20 $20 $24 $20 $23 $23  $20 $24 $20 $20 $2E $23 $23 $23
.by  $20 $2E $24 $2E $24 $20 $23 $23  $20 $20 $23 $20 $20 $40 $23 $23  $23 $23 $23 $23 $23 $23 $23 $00
.by  $42 $08 $08 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $2E $20 $2E  $20 $23 $23 $23 $23 $20 $20 $2A
.by  $2E $23 $23 $23 $23 $23 $24 $20  $40 $20 $23 $23 $20 $24 $20 $20  $24 $20 $23 $23 $20 $20 $20 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $20 $20 $23 $23 $23 $23 $23  $23 $20 $20 $20 $20 $23 $23 $23
.by  $20 $20 $2A $20 $2E $20 $23 $23  $20 $2A $24 $2A $24 $20 $23 $23  $23 $20 $2E $24 $2E $20 $23 $23
.by  $23 $40 $20 $20 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $00  $42 $08 $08 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $20  $20 $23 $23 $23 $23 $20 $20 $20  $20 $20 $23 $23 $23 $2A $20 $20
.by  $23 $20 $23 $23 $20 $2A $24 $2A  $2E $20 $23 $23 $20 $20 $40 $20  $20 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $20 $20 $23 $23 $23 $23 $23 $23  $20 $20 $23 $23 $23 $23 $23 $23  $20 $20 $23 $23 $23 $23 $23 $23
.by  $2E $24 $24 $20 $24 $40 $23 $23  $20 $20 $2E $20 $2E $20 $23 $23  $20 $20 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $00  $42 $08 $08 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $20 $20  $23 $23 $23 $23 $20 $24 $2E $40  $23 $23 $23 $23 $20 $20 $2A $20
.by  $20 $23 $23 $23 $20 $20 $2A $20  $20 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $00 $42 $08 $08 $23  $23 $23 $23 $23 $23 $23 $23 $23  $20 $20 $20 $20 $20 $23 $23 $23
.by  $20 $2E $24 $20 $20 $23 $23 $23  $23 $2E $24 $23 $23 $23 $23 $23  $20 $20 $40 $20 $20 $23 $23 $23
.by  $20 $2E $24 $23 $20 $23 $23 $23  $20 $20 $20 $20 $20 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $00
.by  $42 $08 $08 $23 $23 $23 $23 $23  $23 $23 $23 $23 $20 $20 $23 $20  $20 $23 $23 $23 $20 $2A $23 $24
.by  $2E $23 $23 $23 $20 $2A $20 $24  $2E $20 $23 $23 $20 $40 $20 $20  $20 $20 $23 $23 $20 $20 $20 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $20 $20 $23 $23 $23 $23 $23 $23  $2E $2E $2E $20 $20 $23 $23 $23
.by  $2E $23 $23 $20 $20 $23 $23 $23  $20 $20 $24 $20 $24 $20 $23 $23  $23 $23 $24 $20 $24 $20 $23 $23
.by  $23 $23 $40 $20 $20 $20 $23 $23  $23 $23 $23 $23 $23 $23 $23 $00  $42 $08 $08 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $20 $20 $23  $23 $23 $23 $23 $23 $20 $2A $20  $20 $23 $23 $23 $23 $20 $2A $23
.by  $40 $23 $23 $23 $23 $20 $2A $20  $20 $23 $23 $23 $20 $20 $2E $24  $23 $23 $23 $23 $20 $20 $20 $20
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $20 $20 $20 $20 $40 $20 $23 $23  $20 $24 $20 $20 $24 $20 $23 $23  $23 $20 $23 $23 $20 $23 $23 $23
.by  $20 $24 $23 $20 $24 $23 $23 $23  $20 $20 $2E $2E $20 $23 $23 $23  $23 $20 $2E $2E $20 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $00  $42 $08 $08 $23 $23 $23 $23 $23  $23 $23 $23 $23 $20 $40 $23 $23
.by  $23 $23 $23 $23 $20 $20 $20 $20  $20 $23 $23 $23 $20 $2E $23 $2E  $20 $20 $23 $23 $23 $24 $24 $24
.by  $24 $20 $23 $23 $20 $2E $20 $2E  $23 $23 $23 $23 $20 $20 $20 $20  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $00 $42 $08 $08 $23  $23 $23 $23 $23 $23 $23 $23 $23  $20 $20 $20 $23 $23 $23 $23 $23
.by  $20 $2E $24 $2E $20 $23 $23 $23  $20 $24 $2A $20 $20 $23 $23 $23  $23 $20 $20 $2A $24 $20 $23 $23
.by  $23 $20 $2E $24 $2E $20 $23 $23  $23 $23 $23 $20 $20 $40 $23 $23  $23 $23 $23 $23 $23 $23 $23 $00
.by  $42 $08 $08 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $20  $20 $23 $23 $23 $23 $23 $20 $20
.by  $20 $23 $23 $23 $20 $20 $2E $2A  $24 $20 $23 $23 $20 $20 $2A $2E  $24 $40 $23 $23 $23 $20 $20 $20
.by  $23 $23 $23 $23 $23 $20 $20 $23  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $20 $20 $23 $23 $23  $23 $23 $20 $20 $20 $23 $23 $23
.by  $20 $20 $2E $2A $24 $20 $23 $23  $20 $20 $2A $2E $24 $40 $23 $23  $23 $20 $20 $20 $23 $23 $23 $23
.by  $23 $23 $20 $20 $23 $20 $23 $23  $23 $23 $23 $23 $23 $23 $23 $00  $42 $08 $08 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $20 $20 $20 $20  $20 $20 $23 $23 $20 $23 $24 $2E  $40 $20 $23 $23 $20 $20 $24 $2E
.by  $23 $23 $23 $23 $20 $23 $24 $2E  $23 $23 $23 $23 $20 $20 $20 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $20 $20 $20 $23 $23 $23 $23 $23  $20 $20 $24 $2E $20 $20 $23 $23  $23 $20 $24 $2E $20 $20 $23 $23
.by  $23 $23 $24 $2E $23 $23 $23 $23  $23 $23 $40 $20 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $00  $42 $08 $08 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $20 $20
.by  $23 $23 $23 $23 $23 $23 $20 $20  $23 $23 $23 $23 $23 $23 $24 $2E  $23 $23 $23 $23 $20 $20 $24 $2E
.by  $23 $23 $23 $23 $20 $23 $24 $2E  $20 $23 $23 $23 $20 $20 $20 $40  $20 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $00 $42 $08 $08 $23  $23 $23 $23 $23 $23 $23 $23 $23  $20 $20 $20 $23 $23 $23 $23 $23
.by  $20 $23 $24 $2E $20 $20 $23 $23  $20 $20 $2E $24 $23 $40 $23 $23  $23 $23 $24 $2E $20 $20 $23 $23
.by  $23 $23 $20 $20 $23 $23 $23 $23  $23 $23 $20 $20 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $00
.by  $42 $08 $08 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $20 $20  $20 $20 $23 $23 $20 $20 $24 $2E
.by  $23 $20 $23 $23 $40 $23 $2E $24  $20 $20 $23 $23 $20 $23 $24 $2E  $23 $23 $23 $23 $20 $20 $20 $20
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $20 $20 $20 $23 $23  $20 $20 $24 $2E $23 $20 $23 $23
.by  $40 $23 $2E $24 $20 $20 $23 $23  $20 $23 $24 $2E $23 $23 $23 $23  $20 $23 $20 $20 $23 $23 $23 $23
.by  $20 $20 $20 $20 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $00  $42 $08 $08 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $20 $2E  $20 $23 $23 $23 $23 $23 $20 $2A  $20 $23 $23 $23 $23 $23 $20 $2A
.by  $20 $23 $23 $23 $23 $20 $20 $2A  $20 $23 $23 $23 $23 $20 $40 $24  $20 $23 $23 $23 $23 $20 $20 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $20 $20 $40 $23 $23 $23 $23 $23  $20 $23 $24 $24 $20 $20 $23 $23  $20 $20 $24 $2E $23 $20 $23 $23
.by  $23 $23 $2E $2E $20 $20 $23 $23  $23 $23 $23 $20 $20 $20 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $00  $42 $08 $08 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $20
.by  $40 $23 $23 $23 $20 $20 $24 $24  $20 $23 $23 $23 $20 $23 $24 $2E  $20 $20 $23 $23 $20 $20 $2E $2E
.by  $23 $20 $23 $23 $23 $23 $23 $20  $20 $20 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $00 $42 $08 $08 $23  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $20 $20 $23 $23 $23
.by  $23 $23 $20 $20 $20 $23 $23 $23  $20 $20 $24 $20 $20 $23 $23 $23  $20 $2E $2A $2E $23 $23 $23 $23
.by  $23 $20 $24 $20 $23 $23 $23 $23  $23 $23 $40 $20 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $00
.by  $42 $08 $08 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $20  $20 $23 $23 $23 $23 $23 $23 $24
.by  $20 $23 $23 $23 $23 $20 $2E $2A  $2E $23 $23 $23 $23 $20 $23 $24  $20 $23 $23 $23 $23 $20 $20 $40
.by  $20 $23 $23 $23 $23 $20 $20 $20  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $20 $20 $20 $23 $23 $23 $23 $23  $20 $20 $24 $20 $23 $23 $23 $23
.by  $23 $24 $2A $2E $20 $23 $23 $23  $23 $20 $2E $40 $20 $20 $23 $23  $23 $20 $20 $23 $20 $20 $23 $23
.by  $23 $23 $23 $23 $20 $20 $23 $23  $23 $23 $23 $23 $23 $23 $23 $00  $42 $08 $08 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $20 $20 $20 $23  $23 $23 $23 $23 $20 $23 $40 $24  $20 $20 $23 $23 $20 $20 $24 $2A
.by  $2E $20 $23 $23 $23 $23 $23 $2E  $20 $23 $23 $23 $23 $20 $20 $20  $20 $23 $23 $23 $23 $20 $20 $20
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $20 $20 $20 $23 $23 $23  $23 $23 $20 $20 $20 $23 $23 $23  $20 $20 $2A $20 $23 $23 $23 $23
.by  $20 $2E $40 $24 $23 $23 $23 $23  $20 $20 $2A $20 $23 $23 $23 $23  $23 $20 $20 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $00  $42 $08 $08 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $20 $20 $23
.by  $23 $23 $23 $23 $23 $20 $2A $20  $23 $23 $23 $23 $20 $2E $40 $24  $20 $23 $23 $23 $20 $20 $2A $20
.by  $20 $23 $23 $23 $20 $20 $23 $20  $20 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $00 $42 $08 $08 $23  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $20 $20 $20 $23 $23 $23
.by  $23 $20 $2A $20 $20 $23 $23 $23  $20 $2E $40 $24 $23 $23 $23 $23  $20 $20 $2A $20 $20 $23 $23 $23
.by  $23 $23 $20 $20 $20 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $00
.by  $42 $08 $08 $23 $23 $23 $23 $23  $23 $23 $23 $23 $23 $23 $20 $20  $23 $23 $23 $23 $23 $23 $20 $20
.by  $23 $23 $23 $23 $23 $20 $24 $2A  $20 $20 $23 $23 $20 $20 $2A $2E  $20 $40 $23 $23 $20 $20 $20 $23
.by  $23 $23 $23 $23 $20 $20 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $40 $20 $23 $23 $23 $23  $23 $23 $20 $20 $23 $23 $23 $23
.by  $23 $23 $24 $2A $20 $23 $23 $23  $20 $20 $2A $2E $20 $20 $23 $23  $20 $20 $20 $20 $20 $20 $23 $23
.by  $23 $23 $23 $23 $20 $20 $23 $23  $23 $23 $23 $23 $23 $23 $23 $00  $42 $08 $08 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $20  $23 $23 $23 $23 $40 $20 $23 $23  $23 $20 $23 $23 $20 $24 $24 $20
.by  $23 $23 $23 $23 $20 $24 $20 $2E  $20 $20 $23 $23 $23 $20 $2E $2E  $20 $20 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $23  $23 $23 $23 $00 $42 $08 $08 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $20 $20 $20 $20 $23 $23 $23 $23  $20 $20 $20 $20 $23 $23 $23 $23  $23 $20 $24 $24 $23 $23 $23 $23
.by  $23 $20 $24 $40 $2E $23 $23 $23  $23 $23 $20 $2E $2E $23 $23 $23  $23 $23 $23 $23 $23 $23 $23 $23
.by  $23 $23 $23 $23 $23 $23 $23 $00  $03 $02 $02 $01 $01 $02 $02 $03  $03 $03 $03 $03 $03 $03 $02 $03
.by  $28 $14 $14 $28 $50 $50 $A0 $A0  $40 $50 $50 $50 $28 $28 $A0 $A0  $18 $18 $0C $18 $30 $30 $60 $60
.by  $C0 $C0 $C0 $C0 $18 $0C $C0 $C0
.endm

	end
