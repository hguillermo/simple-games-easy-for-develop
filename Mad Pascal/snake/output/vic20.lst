mads 2.1.5
    57 				  opt l+
   102
   103 				.print 'ZPAGE: ',zpage,'..',zpend-1
   103 				ZPAGE: $0000..$0053
   104
   105 				.print 'RTLIB: ',RTLIB,'..',*-1
   105 				RTLIB: $A07C..$A113
   106
   107 				; ------------------------------------------------------------
   108
   109 A114			START
   110 A114 BA				tsx
   111 A115 8E BA A9			stx MAIN.@halt+1
   112
   113 					.ifdef fmulinit
   114 					fmulinit
   115 					.fi
   116
   117 = 000E			VLEN	= VARDATASIZE-VARINITSIZE
   118 = A9D0			VADR	= DATAORIGIN+VARINITSIZE
   119
   120 					ift VADR > $BFFF
   121 					ert 'Invalid memory address range ',VADR
   122 					eli (VLEN>0) && (VLEN<=256)
   123 A118 A2 F2			ldx #256-VLEN
   124 A11A A9 00			lda #$00
   125 A11C 9D DE A8 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   126 					eli VLEN>256
   127 					@fill #VADR #VLEN #$00
   128 					eif
   129
   130 				.ifdef :psptr
   131 					mwa #PROGRAMSTACK :psptr
   132 				.fi
   133
   134 A122 A2 00			ldx #$00
   135 A124 86 00			stx bp						; BP = 0
   136
   137 A126 CA				dex						; X = 255
   138
   139 A127				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: vic20.a65]
     7 A127 20 FA A2			jsr MAIN.SYS_VIC20.@UnitInit
Source: vic20.a65
   140
   141 A12A			.local	MAIN						; PROCEDURE
   142
   143 A12A 4C 41 A9			jmp l_0067
   144
   145 				; ------------------------------------------------------------
   146
   147 A12D			.local	SYSTEM						; UNIT
   148
   149 A12D			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   150
   151 				; ------------------------------------------------------------
   152
   153 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   154 				; as Pointer
   155 A12D B5 14			lda :STACKORIGIN,x
   156 A12F 85 08			sta A
   157 A131 B5 24			lda :STACKORIGIN+STACKWIDTH,x
   158 A133 85 09			sta A+1
   159 A135 CA				dex
   160 A136			@main
   161
   162 				; -------------------  ASM Block 00000002  -------------------
   163
   164 A136 A0 00			ldy #0
   165 A138 B1 08 8D D2 A9		mva (:edx),y Result
   166
   167 A13D			@exit
   168
   169 				; ------------------------------------------------------------
   170
   171 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   172 				; as Pointer
   173
   174 A13D E8				inx
   175 A13E AD D2 A9 95 14		mva RESULT :STACKORIGIN,x
   176
   177 					.ifdef @new
   178 					lda <@VarData
   179 					sta :ztmp
   180 					lda >@VarData
   181 					ldy #@VarDataSize-1
   182 					jmp @FreeMem
   183 					eif
   184
   185 				; ------------------------------------------------------------
   186
   187 = 0008			A	= :EDX
   188 = A9D2			RESULT	= DATAORIGIN+$0002
   189 A143 60				rts						; ret
   190 				.endl
   191
   192 A144			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   193
   194 				; ------------------------------------------------------------
   195
   196 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   197 				; as Pointer
   198 A144 B5 14			lda :STACKORIGIN,x
   199 A146 85 08			sta A
   200 A148 B5 24			lda :STACKORIGIN+STACKWIDTH,x
   201 A14A 85 09			sta A+1
   202 A14C CA				dex
   203 A14D 30 05			jmi @main
   204
   205 				; ------------------------------------------------------------
   206
   207 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   208 				; as Pointer
   209 A14F B5 14			lda :STACKORIGIN,x
   210 A151 85 0C			sta VALUE
   211 A153 CA				dex
   212 A154			@main
   213
   214 				; -------------------  ASM Block 00000018  -------------------
   215
   216 A154 A0 00			ldy #0
   217 A156 A5 0C 91 08			mva value (:edx),y
   218
   219 				; ------------------------------------------------------------
   220
   221 = 0008			A	= :EDX
   222 = 000C			VALUE	= :ECX
   223 A15A			@exit
   224 					.ifdef @new
   225 					lda <@VarData
   226 					sta :ztmp
   227 					lda >@VarData
   228 					ldy #@VarDataSize-1
   229 					jmp @FreeMem
   230 					els
   231 A15A 60				rts						; ret
   232 					eif
   233 				.endl
   234
   235 A15B			.local	MOVE_00B1					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   236
   237 					.MACRO m@INLINE
   238 				
   239 				; -------------------  ASM Block 00000028  -------------------
   240 				
   241 					jsr @move
   242 				
   243 					.ENDM
   244
   245 				; ------------------------------------------------------------
   246
   247 = 0008			SOURCE	= :EDX
   248 = 000C			DEST	= :ECX
   249 = 0004			COUNT	= :EAX
   250 A15B			@exit
   251 				.endl
   252
   253 				; ------------------------------------------------------------
   254
   255 = 0648			M_PI_2	= $0648
   256 = 0192			D_PI_2	= $0192
   257 = 0004			D_PI_180	= $04
   258 = A9D0			RNDSEED	= DATAORIGIN+$0000
   259
   260 				.endl							; UNIT SYSTEM
   261
   262 				; ------------------------------------------------------------
   263
   264 A15B			.local	SYS_VIC20					; UNIT
   265
   266 A15B			.local	SYS_VBI						; PROCEDURE | ASSEMBLER | INTERRUPT
   267
   268 				; -------------------  ASM Block 00000048  -------------------
   269
   270 A15B E6 60		      inc RTCLOCK
   271
   272 A15D AE 13 91		      ldx VIA1DDRA
   273 A160 AC 22 91		      ldy VIA2DDRB
   274 A163 A9 C3 8D 13 91	      mva #%11000011 VIA1DDRA
   275 A168 AD 11 91		      lda VIA1PA
   276 A16B 8E 13 91		      stx VIA1DDRA
   277 A16E 29 3C		      and #%00111100                  // up, down, left, fire
   278 A170 85 61		      sta JOY
   279 A172 A9 7F 8D 22 91	      mva #%01111111 VIA2DDRB
   280 A177 AD 20 91		      lda VIA2PB
   281 A17A 8C 22 91		      sty VIA2DDRB
   282 A17D 29 80		      and #%10000000                  // right
   283 A17F 05 61		      ora JOY
   284 A181 49 BC		      eor #%10111100                  // inverse values
   285 A183 85 61		      sta JOY
   286
   287 A185 20 00 12		      jsr GAME_VBI_ADR
   288
   289 A188 A9 40 8D 2D 91	      mva #%01000000 VIA2IFR
   290 A18D 68 A8 68 AA 68	      plr
   291
   292 A192 40				rti						; ret
   293 				.endl
   294
   295 A193			.local	SYS_INIT					; PROCEDURE | ASSEMBLER
   296
   297 				; -------------------  ASM Block 00000049  -------------------
   298
   299 A193 78			      sei
   300
   301 A194 A9 7F 8D 1E 91	      mva #%01111111 VIA1IER          // disable all NMI
   302 A199 A9 C0 8D 2E 91	      mva #%11000000 VIA2IER          // enable IRQ via2/timer1
   303 A19E A9 40 8D 2B 91	      mva #%01000000 VIA2ACR          // put via2/timer1 in continuous free-running mode
   304
   305 A1A3 A9 5B 8D 14 03 A9 +       mwa #SYS_VBI CINV               // register IRQ procedure
   306
   307 A1AD A9 00 85 60		      mva #0 RTCLOCK                  // reset raster
   308
   309 A1B1 A9 92		      lda #VBI_START                  // wait for 130 raster line
   310 A1B3 CD 04 90		@     cmp VICCR4
   311 A1B6 D0 FB		      bne @-
   312
   313 A1B8 A9 86 8D 24 91 A9 +       mwa #PAL_TIMER1 VIA2T1CL        // set via2/timer1; 1/50 sec.
   314
   315 A1C2 A0 0F		      ldy #15
   316 A1C4 B9 6C A0 99 00 90 +       mva:rpl adr.VIC_DEF,y VICCR0,y- // init VIC registers
   317
   318 A1CD 58			      cli
   319
   320 A1CE			@exit
   321 					.ifdef @new
   322 					lda <@VarData
   323 					sta :ztmp
   324 					lda >@VarData
   325 					ldy #@VarDataSize-1
   326 					jmp @FreeMem
   327 					els
   328 A1CE 60				rts						; ret
   329 					eif
   330 				.endl
   331
   332 A1CF			.local	WAIT_00DC					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   333 A1CF 85 08			sta N
   334
   335 				; -------------------  ASM Block 00000052  -------------------
   336
   337 A1D1 A5 08		      lda n
   338 A1D3 18 65 60		      add RTCLOCK
   339 A1D6 C5 60		@     cmp RTCLOCK
   340 A1D8 D0 FC		      bne @-
   341
   342 				; ------------------------------------------------------------
   343
   344 = 0008			N	= :EDX
   345 A1DA			@exit
   346 					.ifdef @new
   347 					lda <@VarData
   348 					sta :ztmp
   349 					lda >@VarData
   350 					ldy #@VarDataSize-1
   351 					jmp @FreeMem
   352 					els
   353 A1DA 60				rts						; ret
   354 					eif
   355 				.endl
   356
   357 A1DB			.local	CLRSCR						; PROCEDURE | ASSEMBLER | REGISTER
   358 A1DB 85 08			sta V
   359
   360 				; -------------------  ASM Block 00000053  -------------------
   361
   362 A1DD A0 00		      ldy #0
   363 A1DF A5 08		      lda v
   364 A1E1 99 00 1C		@     sta SCREEN_ADR,y
   365 A1E4 99 00 1D		      sta SCREEN_ADR + $100,y
   366 A1E7 99 00 1E		      sta SCREEN_ADR + $200,y
   367 A1EA C8			      iny
   368 A1EB D0 F4		      bne @-
   369
   370 				; ------------------------------------------------------------
   371
   372 = 0008			V	= :EDX
   373 A1ED			@exit
   374 					.ifdef @new
   375 					lda <@VarData
   376 					sta :ztmp
   377 					lda >@VarData
   378 					ldy #@VarDataSize-1
   379 					jmp @FreeMem
   380 					els
   381 A1ED 60				rts						; ret
   382 					eif
   383 				.endl
   384
   385 A1EE			.local	CLRCOL						; PROCEDURE | ASSEMBLER | REGISTER
   386 A1EE 85 08			sta C
   387
   388 				; -------------------  ASM Block 00000054  -------------------
   389
   390 A1F0 A0 00		      ldy #0
   391 A1F2 A5 08		      lda c
   392 A1F4 99 00 94		@     sta COLORMAP_ADR,y
   393 A1F7 99 00 95		      sta COLORMAP_ADR + $100,y
   394 A1FA 99 00 96		      sta COLORMAP_ADR + $200,y
   395 A1FD C8			      iny
   396 A1FE D0 F4		      bne @-
   397
   398 				; ------------------------------------------------------------
   399
   400 = 0008			C	= :EDX
   401 A200			@exit
   402 					.ifdef @new
   403 					lda <@VarData
   404 					sta :ztmp
   405 					lda >@VarData
   406 					ldy #@VarDataSize-1
   407 					jmp @FreeMem
   408 					els
   409 A200 60				rts						; ret
   410 					eif
   411 				.endl
   412
   413 A201			.local	SET_XY						; PROCEDURE | REGISTER
   414
   415 				; optimize OK (SYS_VIC20), line = 433
   416
   417 A201 A5 08			lda X
   418 A203 85 54			sta T0B
   419 A205 A5 0C			lda Y
   420 A207 85 55			sta T1B
   421
   422 				; optimize OK (SYS_VIC20), line = 434
   423
   424 A209 A9 19			lda #$19
   425 A20B 85 0C			sta :ecx
   426 A20D A5 55			lda T1B
   427 A20F 85 04			sta :eax
   428 					.ifdef fmulinit
   429 					fmulu_8
   430 					els
   431 A211 20 FC A0			imulCL
   432 					eif
   433 A214 A5 04			lda :eax
   434 A216 85 5A			sta TMP
   435 A218 A5 05			lda :eax+1
   436 A21A 85 5B			sta TMP+1
   437 A21C A5 5A			lda TMP
   438 A21E 18 65 54			add T0B
   439 A221 85 5A			sta TMP
   440 A223 90 02			scc
   441 A225 E6 5B			inc TMP+1
   442
   443 				; optimize OK (SYS_VIC20), line = 436
   444
   445 A227 85 56			sta SCR
   446 A229 A5 5B			lda TMP+1
   447 A22B 18 69 1C			add #$1C
   448 A22E 85 57			sta SCR+1
   449
   450 				; optimize OK (SYS_VIC20), line = 437
   451
   452 A230 A5 5A			lda TMP
   453 A232 85 58			sta COLMAP
   454 A234 A5 5B			lda TMP+1
   455 A236 18 69 94			add #$94
   456 A239 85 59			sta COLMAP+1
   457
   458 				; ------------------------------------------------------------
   459
   460 = 0008			X	= :EDX
   461 = 000C			Y	= :ECX
   462 A23B			@exit
   463 					.ifdef @new
   464 					lda <@VarData
   465 					sta :ztmp
   466 					lda >@VarData
   467 					ldy #@VarDataSize-1
   468 					jmp @FreeMem
   469 					els
   470 A23B 60				rts						; ret
   471 					eif
   472 				.endl
   473
   474 A23C			.local	PRINT						; PROCEDURE | ASSEMBLER | REGISTER
   475
   476 				; -------------------  ASM Block 00000055  -------------------
   477
   478 A23C A0 00		      ldy #0
   479 A23E B1 0C 85 54		      mva (s),y ZP_0_B
   480 A242 A8 88 E6 0C		      tay:dey:inc s
   481 A246 B1 0C 91 56		@     mva (s),y (scr),y
   482 A24A A5 08 91 58		      mva col (colmap),y
   483 A24E 88			      dey
   484 A24F 10 F5		      bpl @-
   485
   486 				; ------------------------------------------------------------
   487
   488 = 0008			COL	= :EDX
   489 = 000C			S	= :ECX
   490 A251			@exit
   491 					.ifdef @new
   492 					lda <@VarData
   493 					sta :ztmp
   494 					lda >@VarData
   495 					ldy #@VarDataSize-1
   496 					jmp @FreeMem
   497 					els
   498 A251 60				rts						; ret
   499 					eif
   500 				.endl
   501
   502 A252			.local	PUT_CHAR					; PROCEDURE | ASSEMBLER | REGISTER
   503
   504 				; -------------------  ASM Block 00000056  -------------------
   505
   506 A252 A0 00		      ldy #0
   507 A254 A5 0C 91 56		      mva c (scr),y
   508 A258 A5 08 91 58		      mva col (colmap),y
   509
   510 				; ------------------------------------------------------------
   511
   512 = 0008			COL	= :EDX
   513 = 000C			C	= :ECX
   514 A25C			@exit
   515 					.ifdef @new
   516 					lda <@VarData
   517 					sta :ztmp
   518 					lda >@VarData
   519 					ldy #@VarDataSize-1
   520 					jmp @FreeMem
   521 					els
   522 A25C 60				rts						; ret
   523 					eif
   524 				.endl
   525
   526 A25D			.local	UPDATE_COUNTER_2				; PROCEDURE | ASSEMBLER | REGISTER
   527
   528 				; -------------------  ASM Block 00000057  -------------------
   529
   530 A25D F8			      sed
   531
   532 A25E A0 00		      ldy #0
   533 A260 B1 0C		      lda (counter),y
   534 A262 18 65 08		      add v
   535 A265 91 0C		      sta (counter),y
   536
   537 A267 D8			      cld
   538
   539 A268 A0 00		      ldy #0
   540 A26A B1 0C		      lda (counter),y
   541 A26C 48			      pha
   542 A26D 29 0F		      and #%00001111
   543 A26F 09 30		      ora #%00110000
   544 A271 A0 03		      ldy #3
   545 A273 91 04		      sta (scr_counter),y
   546 A275 68			      pla
   547 A276 4A 4A 4A 4A		:4    lsr
   548 A27A 09 30		      ora #%00110000
   549 A27C 88			      dey
   550 A27D 91 04		      sta (scr_counter),y
   551
   552 				; ------------------------------------------------------------
   553
   554 = 0008			V	= :EDX
   555 = 000C			COUNTER	= :ECX
   556 = 0004			SCR_COUNTER	= :EAX
   557 A27F			@exit
   558 					.ifdef @new
   559 					lda <@VarData
   560 					sta :ztmp
   561 					lda >@VarData
   562 					ldy #@VarDataSize-1
   563 					jmp @FreeMem
   564 					els
   565 A27F 60				rts						; ret
   566 					eif
   567 				.endl
   568
   569 A280			.local	UPDATE_COUNTER_4				; PROCEDURE | ASSEMBLER | REGISTER
   570
   571 				; -------------------  ASM Block 00000058  -------------------
   572
   573 A280 F8			      sed
   574
   575 A281 A0 00		      ldy #0
   576 A283 B1 0C		      lda (counter),y
   577 A285 18 65 08		      add v
   578 A288 91 0C		      sta (counter),y
   579 A28A 90 08		      bcc @+
   580 A28C C8			      iny
   581 A28D B1 0C		      lda (counter),y
   582 A28F 18 69 01		      add #1
   583 A292 91 0C		      sta (counter),y
   584
   585 A294 D8			@     cld
   586
   587 A295 A0 00		      ldy #0
   588 A297 B1 0C		      lda (counter),y
   589 A299 48			      pha
   590 A29A 29 0F		      and #%00001111
   591 A29C 09 30		      ora #%00110000
   592 A29E A0 03		      ldy #3
   593 A2A0 91 04		      sta (scr_counter),y
   594 A2A2 68			      pla
   595 A2A3 4A 4A 4A 4A		:4    lsr
   596 A2A7 09 30		      ora #%00110000
   597 A2A9 88			      dey
   598 A2AA 91 04		      sta (scr_counter),y
   599
   600 A2AC 88			      dey
   601 A2AD B1 0C		      lda (counter),y
   602 A2AF 29 0F		      and #%00001111
   603 A2B1 09 30		      ora #%00110000
   604 A2B3 91 04		      sta (scr_counter),y
   605 A2B5 B1 0C		      lda (counter),y
   606 A2B7 4A 4A 4A 4A		:4    lsr
   607 A2BB 09 30		      ora #%00110000
   608 A2BD 88			      dey
   609 A2BE 91 04		      sta (scr_counter),y
   610
   611 				; ------------------------------------------------------------
   612
   613 = 0008			V	= :EDX
   614 = 000C			COUNTER	= :ECX
   615 = 0004			SCR_COUNTER	= :EAX
   616 A2C0			@exit
   617 					.ifdef @new
   618 					lda <@VarData
   619 					sta :ztmp
   620 					lda >@VarData
   621 					ldy #@VarDataSize-1
   622 					jmp @FreeMem
   623 					els
   624 A2C0 60				rts						; ret
   625 					eif
   626 				.endl
   627
   628 A2C1			.local	PRND_0112					; PROCEDURE | ASSEMBLER | OVERLOAD
   629
   630 				; -------------------  ASM Block 00000059  -------------------
   631
   632 A2C1 AD 04 90		      lda VICCR4
   633 A2C4 65 60		      adc RTCLOCK
   634 A2C6 4D 27 91		      eor VIA2T1LH
   635 A2C9 4D 26 91		      eor VIA2T1LL
   636 A2CC 4D 14 91		      eor VIA1T1CL
   637 A2CF 4D 15 91		      eor VIA1T1CH
   638 A2D2 85 62		      sta RND
   639
   640 A2D4			@exit
   641 					.ifdef @new
   642 					lda <@VarData
   643 					sta :ztmp
   644 					lda >@VarData
   645 					ldy #@VarDataSize-1
   646 					jmp @FreeMem
   647 					els
   648 A2D4 60				rts						; ret
   649 					eif
   650 				.endl
   651
   652 A2D5			.local	PRND_0113					; PROCEDURE | OVERLOAD | REGISTER
   653
   654 				; optimize FAIL ('PRND_0112', SYS_VIC20), line = 554
   655
   656 A2D5 20 C1 A2			jsr PRND_0112
   657
   658 				; optimize OK (SYS_VIC20), line = 556
   659
   660 A2D8 A5 62			lda RND
   661 A2DA 25 04			and MASK
   662 A2DC 85 54			sta T0B
   663
   664 				; optimize OK (SYS_VIC20), line = 558
   665
   666 A2DE C5 08			cmp A
   667 A2E0 B0 05			jcs l_0137
   668 A2E2 18 65 08			add A
   669 A2E5 85 54			sta T0B
   670 A2E7			l_0137
   671
   672 				; optimize OK (SYS_VIC20), line = 559
   673
   674 A2E7 A5 0C			lda B
   675 A2E9 C5 54			cmp T0B
   676 A2EB B0 08			jcs l_0151
   677
   678 				; --- RepeatUntilProlog
   679 A2ED			l_0153
   680
   681 				; optimize OK (SYS_VIC20), line = 560
   682
   683 A2ED 46 54			lsr T0B
   684
   685 				; optimize OK (SYS_VIC20), line = 561
   686
   687 A2EF A5 0C			lda B
   688 A2F1 C5 54			cmp T0B
   689 A2F3 90 F8			jcc l_0153
   690 A2F5			l_0151
   691
   692 				; optimize OK (SYS_VIC20), line = 563
   693
   694 A2F5 A5 54			lda T0B
   695 A2F7 85 62			sta RND
   696
   697 				; ------------------------------------------------------------
   698
   699 = 0008			A	= :EDX
   700 = 000C			B	= :ECX
   701 = 0004			MASK	= :EAX
   702 A2F9			@exit
   703 					.ifdef @new
   704 					lda <@VarData
   705 					sta :ztmp
   706 					lda >@VarData
   707 					ldy #@VarDataSize-1
   708 					jmp @FreeMem
   709 					els
   710 A2F9 60				rts						; ret
   711 					eif
   712 				.endl
   713
   714 				; ------------------------------------------------------------
   715 				; ------------------------------------------------------------
   716 A2FA			@UnitInit
   717
   718 				; optimize OK (SYS_VIC20), line = 570
   719
   720 A2FA A9 00			lda #$00
   721 A2FC 85 56			sta SCR
   722 A2FE A9 1C			lda #$1C
   723 A300 85 57			sta SCR+1
   724
   725 				; optimize OK (SYS_VIC20), line = 571
   726
   727 A302 A9 00			lda #$00
   728 A304 85 58			sta COLMAP
   729 A306 A9 94			lda #$94
   730 A308 85 59			sta COLMAP+1
   731
   732 A30A 60				rts
   733
   734 				; ------------------------------------------------------------
   735
   736 = 0000			BLACK	= $00
   737 = 0001			WHITE	= $01
   738 = 0002			RED	= $02
   739 = 0003			CYAN	= $03
   740 = 0004			PURPLE	= $04
   741 = 0005			GREEN	= $05
   742 = 0006			BLUE	= $06
   743 = 0007			YELLOW	= $07
   744 = 0008			ORANGE	= $08
   745 = 0009			LIGHT_ORANGE	= $09
   746 = 000A			LIGHT_RED	= $0A
   747 = 000B			LIGHT_CYAN	= $0B
   748 = 000C			LIGHT_PURPLE	= $0C
   749 = 000D			LIGHT_GREEN	= $0D
   750 = 000E			LIGHT_BLUE	= $0E
   751 = 000F			LIGHT_YELLOW	= $0F
   752 = 1000			CHARSET_ADR	= $1000
   753 = 1C00			SCREEN_ADR	= $1C00
   754 = 9400			COLORMAP_ADR	= $9400
   755 = 0019			ROW_SIZE	= $19
   756 = 001E			COL_SIZE	= $1E
   757 = 001F			ROW_MASK	= $1F
   758 = 001F			COL_MASK	= $1F
   759 = 02EE			SCREEN_SIZE	= $02EE
   760 = 1200			GAME_VBI_ADR	= $1200
   761 = 0004			JOY_UP	= $04
   762 = 0008			JOY_DOWN	= $08
   763 = 0010			JOY_LEFT	= $10
   764 = 0080			JOY_RIGHT	= $80
   765 = 0020			JOY_FIRE	= $20
   766 = 10011100		JOY_DIR_MASK	= $10011100
   767 = 0060			RTCLOCK	= $60
   768 = 0061			JOY	= $61
   769 = 0062			RND	= $62
   770 = 0054			ZP_0_B	= $54
   771 = 0055			ZP_1_B	= $55
   772 = 0056			ZP_0_W	= $56
   773 = 0058			ZP_1_W	= $58
   774 = 005A			ZP_2_W	= $5A
   775 = 005C			ZP_3_W	= $5C
   776 = 005E			ZP_0_P	= $5E
   777 = A06C			adr.VIC_DEF	= CODEORIGIN+$0060
   778 A30B			.var VIC_DEF	= adr.VIC_DEF .word
   779 = 5686			PAL_TIMER1	= $5686
   780 = 0092			VBI_START	= $92
   781 = 0314			CINV	= $0314
   782 = 0316			CBINV	= $0316
   783 = 0318			NMINV	= $0318
   784 = 9000			VICCR0	= $9000
   785 = 9001			VICCR1	= $9001
   786 = 9002			VICCR2	= $9002
   787 = 9003			VICCR3	= $9003
   788 = 9004			VICCR4	= $9004
   789 = 9005			VICCR5	= $9005
   790 = 9006			VICCR6	= $9006
   791 = 9007			VICCR7	= $9007
   792 = 9008			VICCR8	= $9008
   793 = 9009			VICCR9	= $9009
   794 = 900A			VICCRA	= $900A
   795 = 900B			VICCRB	= $900B
   796 = 900C			VICCRC	= $900C
   797 = 900D			VICCRD	= $900D
   798 = 900E			VICCRE	= $900E
   799 = 900F			VICCRF	= $900F
   800 = 9110			VIA1PB	= $9110
   801 = 9111			VIA1PA	= $9111
   802 = 9112			VIA1DDRB	= $9112
   803 = 9113			VIA1DDRA	= $9113
   804 = 9114			VIA1T1CL	= $9114
   805 = 9115			VIA1T1CH	= $9115
   806 = 9116			VIA1T1LL	= $9116
   807 = 9117			VIA1T1LH	= $9117
   808 = 9118			VIA1T2CL	= $9118
   809 = 9119			VIA1T2CH	= $9119
   810 = 911A			VIA1SR	= $911A
   811 = 911B			VIA1ACR	= $911B
   812 = 911C			VIA1PCR	= $911C
   813 = 911D			VIA1IFR	= $911D
   814 = 911E			VIA1IER	= $911E
   815 = 911F			VIA1PA2	= $911F
   816 = 9120			VIA2PB	= $9120
   817 = 9121			VIA2PA	= $9121
   818 = 9122			VIA2DDRB	= $9122
   819 = 9123			VIA2DDRA	= $9123
   820 = 9124			VIA2T1CL	= $9124
   821 = 9125			VIA2T1CH	= $9125
   822 = 9126			VIA2T1LL	= $9126
   823 = 9127			VIA2T1LH	= $9127
   824 = 9128			VIA2T2CL	= $9128
   825 = 9129			VIA2T2CH	= $9129
   826 = 912A			VIA2SR	= $912A
   827 = 912B			VIA2ACR	= $912B
   828 = 912C			VIA2PCR	= $912C
   829 = 912D			VIA2IFR	= $912D
   830 = 912E			VIA2IER	= $912E
   831 = 912F			VIA2PA2	= $912F
   832 = 0056			SCR	= $56
   833 = 0058			COLMAP	= $58
   834 = 005A			TMP	= $5A
   835 = 005E			GAME_VBI	= $5E
   836 = 0054			T0B	= $54
   837 = 0055			T1B	= $55
   838
   839 = A30B 6C A0		VIC_DEF
   839 				.endl							; UNIT SYS_VIC20
   840
   841 A30D			.local	WELCOME_SCR					; PROCEDURE | INLINE
   842
   843 					.MACRO m@INLINE
   844 				
   845 				; optimize OK (game.inc), line = 81
   846 				
   847 					lda #$01
   848 					jsr SYS_VIC20.CLRCOL
   849 				
   850 				; optimize OK (game.inc), line = 83
   851 				
   852 					lda #$0C
   853 					sta T0B
   854 					sta T2B
   855 				
   856 				; optimize OK (game.inc), line = 85
   857 				
   858 					lda adr.TXT_INFO
   859 					lsr @
   860 					sta T1B
   861 					lda T0B
   862 					sub T1B
   863 					sta T0B
   864 				
   865 				; optimize OK (game.inc), line = 86
   866 				
   867 					sta SYS_VIC20.SET_XY.X
   868 					lda #$02
   869 					sta SYS_VIC20.SET_XY.Y
   870 					jsr SYS_VIC20.SET_XY
   871 				
   872 				; optimize OK (game.inc), line = 87
   873 				
   874 					lda #$07
   875 					sta SYS_VIC20.PRINT.COL
   876 					lda #$53
   877 					sta SYS_VIC20.PRINT.S
   878 					lda #$A0
   879 					sta SYS_VIC20.PRINT.S+1
   880 					jsr SYS_VIC20.PRINT
   881 				
   882 				; optimize OK (game.inc), line = 89
   883 				
   884 					lda adr.TXT_TURBO
   885 					lsr @
   886 					sta T1B
   887 					lda T2B
   888 					sub T1B
   889 					sta T2B
   890 				
   891 				; optimize OK (game.inc), line = 90
   892 				
   893 					sta SYS_VIC20.SET_XY.X
   894 					lda #$19
   895 					sta SYS_VIC20.SET_XY.Y
   896 					jsr SYS_VIC20.SET_XY
   897 				
   898 				; optimize OK (game.inc), line = 91
   899 				
   900 					lda #$07
   901 					sta SYS_VIC20.PRINT.COL
   902 					lda #$3E
   903 					sta SYS_VIC20.PRINT.S
   904 					lda #$A0
   905 					sta SYS_VIC20.PRINT.S+1
   906 					jsr SYS_VIC20.PRINT
   907 				
   908 				; --- RepeatUntilProlog
   909 				l_01AF
   910 				
   911 				; optimize OK (game.inc), line = 93
   912 				
   913 					lda SYS_VIC20.JOY
   914 					and #$20
   915 					jeq l_01AF
   916 					.ENDM
   917 A30D			@exit
   918 				.endl
   919
   920 A30D			.local	DRAW_FRAME					; PROCEDURE
   921
   922 				; optimize OK (game.inc), line = 102
   923
   924 A30D A9 19			lda #$19
   925 A30F 85 73			sta T0W
   926 A311 A9 1C			lda #$1C
   927 A313 85 74			sta T0W+1
   928 A315 A9 19			lda #$19
   929 A317 85 75			sta T1W
   930 A319 A9 94			lda #$94
   931 A31B 85 76			sta T1W+1
   932
   933 				; optimize OK (game.inc), line = 103
   934
   935 A31D A9 1A			lda #$1A
   936 A31F 85 70			sta I
   937
   938 A321			l_01D5
   939 				; --- ForToDoCondition
   940
   941 				; optimize OK (game.inc), line = 104
   942
   943 A321 A4 74			ldy T0W+1
   944 A323 84 01			sty :bp+1
   945 A325 A4 73			ldy T0W
   946 A327 A9 1F			lda #$1F
   947 A329 91 00			sta (:bp),y
   948
   949 				; optimize OK (game.inc), line = 105
   950
   951 A32B A4 73 84 02 A4 74 + 	mwy T0W :bp2
   952 A333 A0 18			ldy #$18
   953 A335 91 02			sta (:bp2),y
   954
   955 				; optimize OK (game.inc), line = 106
   956
   957 A337 A4 76			ldy T1W+1
   958 A339 84 01			sty :bp+1
   959 A33B A4 75			ldy T1W
   960 A33D A9 07			lda #$07
   961 A33F 91 00			sta (:bp),y
   962
   963 				; optimize OK (game.inc), line = 107
   964
   965 A341 A4 75 84 02 A4 76 + 	mwy T1W :bp2
   966 A349 A0 18			ldy #$18
   967 A34B 91 02			sta (:bp2),y
   968
   969 				; optimize OK (game.inc), line = 108
   970
   971 A34D A5 73			lda T0W
   972 A34F 18 69 19			add #$19
   973 A352 85 73			sta T0W
   974 A354 90 02			scc
   975 A356 E6 74			inc T0W+1
   976
   977 				; optimize OK (game.inc), line = 109
   978
   979 A358 A5 75			lda T1W
   980 A35A 18 69 19			add #$19
   981 A35D 85 75			sta T1W
   982 A35F 90 02			scc
   983 A361 E6 76			inc T1W+1
   984
   985 				; --- ForToDoEpilog
   986 A363 C6 70			dec I
   987 A365 10 BA			jpl l_01D5
   988 A367			l_01E3
   989
   990 				; optimize OK (game.inc), line = 112
   991
   992 A367 A9 18			lda #$18
   993 A369 85 70			sta I
   994
   995 A36B			l_020B
   996 				; --- ForToDoCondition
   997
   998 				; optimize OK (game.inc), line = 113
   999
  1000 A36B A4 70			ldy I
  1001 A36D A9 1E			lda #$1E
  1002 A36F 99 00 1C			sta $1C00,y
  1003
  1004 				; optimize OK (game.inc), line = 114
  1005
  1006 A372 99 BC 1E			sta $1EBC,y
  1007
  1008 				; optimize OK (game.inc), line = 115
  1009
  1010 A375 A9 07			lda #$07
  1011 A377 99 00 94			sta $9400,y
  1012
  1013 				; optimize OK (game.inc), line = 116
  1014
  1015 A37A 99 BC 96			sta $96BC,y
  1016
  1017 				; --- ForToDoEpilog
  1018 A37D C6 70			dec I
  1019 A37F 10 EA			jpl l_020B
  1020 A381			l_0219
  1021
  1022 				; ------------------------------------------------------------
  1023
  1024 = 0070			I	= $70
  1025 A381			@exit
  1026 					.ifdef @new
  1027 					lda <@VarData
  1028 					sta :ztmp
  1029 					lda >@VarData
  1030 					ldy #@VarDataSize-1
  1031 					jmp @FreeMem
  1032 					els
  1033 A381 60				rts						; ret
  1034 					eif
  1035 				.endl
  1036
  1037 A382			.local	PRESS_FIRE					; PROCEDURE
  1038
  1039 				; optimize OK (game.inc), line = 124
  1040
  1041 A382 A9 19			lda #$19
  1042 A384 38 ED 16 A0			sub adr.TXT_POINTS
  1043 A388 38 E9 01			sub #$01
  1044 A38B 85 08			sta SYS_VIC20.SET_XY.X
  1045 A38D A9 00			lda #$00
  1046 A38F 85 0C			sta SYS_VIC20.SET_XY.Y
  1047 A391 20 01 A2			jsr SYS_VIC20.SET_XY
  1048
  1049 				; optimize OK (game.inc), line = 125
  1050
  1051 A394 A9 01			lda #$01
  1052 A396 85 08			sta SYS_VIC20.PRINT.COL
  1053 A398 A9 32			lda #$32
  1054 A39A 85 0C			sta SYS_VIC20.PRINT.S
  1055 A39C A9 A0			lda #$A0
  1056 A39E 85 0D			sta SYS_VIC20.PRINT.S+1
  1057 A3A0 20 3C A2			jsr SYS_VIC20.PRINT
  1058
  1059 				; --- RepeatUntilProlog
  1060 A3A3			l_0254
  1061
  1062 				; optimize OK (game.inc), line = 127
  1063
  1064 A3A3 A5 61			lda SYS_VIC20.JOY
  1065 A3A5 29 20			and #$20
  1066 A3A7 F0 FA			jeq l_0254
  1067 A3A9			@exit
  1068 					.ifdef @new
  1069 					lda <@VarData
  1070 					sta :ztmp
  1071 					lda >@VarData
  1072 					ldy #@VarDataSize-1
  1073 					jmp @FreeMem
  1074 					els
  1075 A3A9 60				rts						; ret
  1076 					eif
  1077 				.endl
  1078
  1079 A3AA			.local	PUT_SNAKE					; PROCEDURE
  1080
  1081 				; optimize OK (game.inc), line = 134
  1082
  1083 A3AA A9 22			lda #$22
  1084 A3AC 85 7A			sta HEAD_DIR
  1085
  1086 				; optimize OK (game.inc), line = 135
  1087
  1088 A3AE 85 79			sta TAIL_DIR
  1089
  1090 				; optimize OK (game.inc), line = 136
  1091
  1092 A3B0 A9 83			lda #$83
  1093 A3B2 85 84			sta HEAD_POS
  1094 A3B4 A9 1D			lda #$1D
  1095 A3B6 85 85			sta HEAD_POS+1
  1096
  1097 				; optimize OK (game.inc), line = 137
  1098
  1099 A3B8 A9 83			lda #$83
  1100 A3BA 85 86			sta HEAD_POS_COL
  1101 A3BC A9 95			lda #$95
  1102 A3BE 85 87			sta HEAD_POS_COL+1
  1103
  1104 				; optimize OK (game.inc), line = 139
  1105
  1106 A3C0 A4 85			ldy HEAD_POS+1
  1107 A3C2 84 01			sty :bp+1
  1108 A3C4 A4 84			ldy HEAD_POS
  1109 A3C6 A9 27			lda #$27
  1110 A3C8 91 00			sta (:bp),y
  1111 A3CA A4 87			ldy HEAD_POS_COL+1
  1112 A3CC 84 01			sty :bp+1
  1113 A3CE A4 86			ldy HEAD_POS_COL
  1114 A3D0 A9 01			lda #$01
  1115 A3D2 91 00			sta (:bp),y
  1116
  1117 				; optimize OK (game.inc), line = 141
  1118
  1119 A3D4 A5 84			lda HEAD_POS
  1120 A3D6 85 73			sta T0W
  1121 A3D8 A5 85			lda HEAD_POS+1
  1122 A3DA 85 74			sta T0W+1
  1123 A3DC A5 86			lda HEAD_POS_COL
  1124 A3DE 85 75			sta T1W
  1125 A3E0 A5 87			lda HEAD_POS_COL+1
  1126 A3E2 85 76			sta T1W+1
  1127
  1128 				; optimize OK (game.inc), line = 142
  1129
  1130 A3E4 A9 00			lda #$00
  1131 A3E6 85 70			sta T0B
  1132
  1133 A3E8			l_0294
  1134 				; --- ForToDoCondition
  1135
  1136 				; optimize OK (game.inc), line = 143
  1137
  1138 A3E8 A5 73			lda T0W
  1139 A3EA 18 69 19			add #$19
  1140 A3ED 85 73			sta T0W
  1141 A3EF 90 02			scc
  1142 A3F1 E6 74			inc T0W+1
  1143 A3F3 A5 75			lda T1W
  1144 A3F5 18 69 19			add #$19
  1145 A3F8 85 75			sta T1W
  1146 A3FA 90 02			scc
  1147 A3FC E6 76			inc T1W+1
  1148
  1149 				; optimize OK (game.inc), line = 144
  1150
  1151 A3FE A4 74			ldy T0W+1
  1152 A400 84 01			sty :bp+1
  1153 A402 A4 73			ldy T0W
  1154 A404 A9 2A			lda #$2A
  1155 A406 91 00			sta (:bp),y
  1156 A408 A4 76			ldy T1W+1
  1157 A40A 84 01			sty :bp+1
  1158 A40C A4 75			ldy T1W
  1159 A40E A9 01			lda #$01
  1160 A410 91 00			sta (:bp),y
  1161
  1162 				; --- ForToDoEpilog
  1163 A412 C6 70			dec T0B
  1164 A414 10 D2			jpl l_0294
  1165 A416			l_02A2
  1166
  1167 				; optimize OK (game.inc), line = 147
  1168
  1169 A416 A5 73			lda T0W
  1170 A418 18 69 19			add #$19
  1171 A41B 85 73			sta T0W
  1172 A41D 90 02			scc
  1173 A41F E6 74			inc T0W+1
  1174 A421 A5 75			lda T1W
  1175 A423 18 69 19			add #$19
  1176 A426 85 75			sta T1W
  1177 A428 90 02			scc
  1178 A42A E6 76			inc T1W+1
  1179 A42C A5 73			lda T0W
  1180 A42E 85 88			sta TAIL_POS
  1181 A430 A5 74			lda T0W+1
  1182 A432 85 89			sta TAIL_POS+1
  1183
  1184 				; optimize OK (game.inc), line = 148
  1185
  1186 A434 85 01			sta :bp+1
  1187 A436 A4 88			ldy TAIL_POS
  1188 A438 A9 22			lda #$22
  1189 A43A 91 00			sta (:bp),y
  1190 A43C A4 76			ldy T1W+1
  1191 A43E 84 01			sty :bp+1
  1192 A440 A4 75			ldy T1W
  1193 A442 A9 01			lda #$01
  1194 A444 91 00			sta (:bp),y
  1195
  1196 				; ------------------------------------------------------------
  1197
  1198 A446			@exit
  1199 					.ifdef @new
  1200 					lda <@VarData
  1201 					sta :ztmp
  1202 					lda >@VarData
  1203 					ldy #@VarDataSize-1
  1204 					jmp @FreeMem
  1205 					els
  1206 A446 60				rts						; ret
  1207 					eif
  1208 				.endl
  1209
  1210 A447			.local	DRAW_BOTTOM_LINE				; PROCEDURE
  1211
  1212 				; optimize OK (game.inc), line = 155
  1213
  1214 A447 A9 00			lda #$00
  1215 A449 85 08			sta SYS_VIC20.SET_XY.X
  1216 A44B A9 1D			lda #$1D
  1217 A44D 85 0C			sta SYS_VIC20.SET_XY.Y
  1218 A44F 20 01 A2			jsr SYS_VIC20.SET_XY
  1219
  1220 				; optimize OK (game.inc), line = 156
  1221
  1222 A452 A9 01			lda #$01
  1223 A454 85 08			sta SYS_VIC20.PRINT.COL
  1224 A456 A9 0C			lda #$0C
  1225 A458 85 0C			sta SYS_VIC20.PRINT.S
  1226 A45A A9 A0			lda #$A0
  1227 A45C 85 0D			sta SYS_VIC20.PRINT.S+1
  1228 A45E 20 3C A2			jsr SYS_VIC20.PRINT
  1229
  1230 				; optimize OK (game.inc), line = 158
  1231
  1232 A461 AD 0C A0			lda adr.TXT_LEVEL
  1233 A464 18 69 01			add #$01
  1234 A467 85 08			sta SYS_VIC20.SET_XY.X
  1235 A469 A9 1D			lda #$1D
  1236 A46B 85 0C			sta SYS_VIC20.SET_XY.Y
  1237 A46D 20 01 A2			jsr SYS_VIC20.SET_XY
  1238
  1239 				; optimize OK (game.inc), line = 159
  1240
  1241 A470 A9 01			lda #$01
  1242 A472 85 08			sta SYS_VIC20.PRINT.COL
  1243 A474 A9 23			lda #$23
  1244 A476 85 0C			sta SYS_VIC20.PRINT.S
  1245 A478 A9 A0			lda #$A0
  1246 A47A 85 0D			sta SYS_VIC20.PRINT.S+1
  1247 A47C 20 3C A2			jsr SYS_VIC20.PRINT
  1248
  1249 				; optimize OK (game.inc), line = 161
  1250
  1251 A47F A9 19			lda #$19
  1252 A481 38 ED 16 A0			sub adr.TXT_POINTS
  1253 A485 85 08			sta SYS_VIC20.SET_XY.X
  1254 A487 A9 1D			lda #$1D
  1255 A489 85 0C			sta SYS_VIC20.SET_XY.Y
  1256 A48B 20 01 A2			jsr SYS_VIC20.SET_XY
  1257
  1258 				; optimize OK (game.inc), line = 162
  1259
  1260 A48E A9 01			lda #$01
  1261 A490 85 08			sta SYS_VIC20.PRINT.COL
  1262 A492 A9 16			lda #$16
  1263 A494 85 0C			sta SYS_VIC20.PRINT.S
  1264 A496 A9 A0			lda #$A0
  1265 A498 85 0D			sta SYS_VIC20.PRINT.S+1
  1266 A49A 20 3C A2			jsr SYS_VIC20.PRINT
  1267 A49D			@exit
  1268 					.ifdef @new
  1269 					lda <@VarData
  1270 					sta :ztmp
  1271 					lda >@VarData
  1272 					ldy #@VarDataSize-1
  1273 					jmp @FreeMem
  1274 					els
  1275 A49D 60				rts						; ret
  1276 					eif
  1277 				.endl
  1278
  1279 A49E			.local	PRINT_HI_SCORE					; PROCEDURE
  1280
  1281 				; optimize OK (game.inc), line = 169
  1282
  1283 A49E A9 02			lda #$02
  1284 A4A0 85 08			sta SYS_VIC20.SET_XY.X
  1285 A4A2 A9 00			lda #$00
  1286 A4A4 85 0C			sta SYS_VIC20.SET_XY.Y
  1287 A4A6 20 01 A2			jsr SYS_VIC20.SET_XY
  1288
  1289 				; optimize OK (game.inc), line = 170
  1290
  1291 A4A9 A9 01			lda #$01
  1292 A4AB 85 08			sta SYS_VIC20.PRINT.COL
  1293 A4AD A9 29			lda #$29
  1294 A4AF 85 0C			sta SYS_VIC20.PRINT.S
  1295 A4B1 A9 A0			lda #$A0
  1296 A4B3 85 0D			sta SYS_VIC20.PRINT.S+1
  1297 A4B5 20 3C A2			jsr SYS_VIC20.PRINT
  1298
  1299 				; optimize OK (game.inc), line = 171
  1300
  1301 A4B8 A9 00			lda #$00
  1302 A4BA 85 08			sta SYS_VIC20.UPDATE_COUNTER_4.V
  1303 A4BC A9 82			lda #$82
  1304 A4BE 85 0C			sta SYS_VIC20.UPDATE_COUNTER_4.COUNTER
  1305 A4C0 A9 00			lda #$00
  1306 A4C2 85 0D			sta SYS_VIC20.UPDATE_COUNTER_4.COUNTER+1
  1307 A4C4 A9 05			lda #$05
  1308 A4C6 85 04			sta SYS_VIC20.UPDATE_COUNTER_4.SCR_COUNTER
  1309 A4C8 A9 1C			lda #$1C
  1310 A4CA 85 05			sta SYS_VIC20.UPDATE_COUNTER_4.SCR_COUNTER+1
  1311 A4CC 20 80 A2			jsr SYS_VIC20.UPDATE_COUNTER_4
  1312 A4CF			@exit
  1313 					.ifdef @new
  1314 					lda <@VarData
  1315 					sta :ztmp
  1316 					lda >@VarData
  1317 					ldy #@VarDataSize-1
  1318 					jmp @FreeMem
  1319 					els
  1320 A4CF 60				rts						; ret
  1321 					eif
  1322 				.endl
  1323
  1324 A4D0			.local	HALL_OF_FAME					; PROCEDURE
  1325
  1326 				; optimize OK (game.inc), line = 178
  1327
  1328 A4D0 A5 83			lda HI_SCORE_BCD+1
  1329 A4D2 C5 81			cmp SCORE_BCD+1
  1330 A4D4 D0 04			bne @+
  1331 A4D6 A5 82			lda HI_SCORE_BCD
  1332 A4D8 C5 80			cmp SCORE_BCD
  1333 				@
  1334 A4DA B0 08			jcs l_0300
  1335 A4DC A5 80			lda SCORE_BCD
  1336 A4DE 85 82			sta HI_SCORE_BCD
  1337 A4E0 A5 81			lda SCORE_BCD+1
  1338 A4E2 85 83			sta HI_SCORE_BCD+1
  1339 A4E4			l_0300
  1340
  1341 				; optimize FAIL ('PRINT_HI_SCORE', game.inc), line = 179
  1342
  1343 A4E4 20 9E A4			jsr PRINT_HI_SCORE
  1344 A4E7			@exit
  1345 					.ifdef @new
  1346 					lda <@VarData
  1347 					sta :ztmp
  1348 					lda >@VarData
  1349 					ldy #@VarDataSize-1
  1350 					jmp @FreeMem
  1351 					els
  1352 A4E7 60				rts						; ret
  1353 					eif
  1354 				.endl
  1355
  1356 A4E8			.local	MOVE_TAIL					; PROCEDURE
  1357
  1358 				; optimize OK (game.inc), line = 186
  1359
  1360 A4E8 A4 89			ldy TAIL_POS+1
  1361 A4EA 84 01			sty :bp+1
  1362 A4EC A4 88			ldy TAIL_POS
  1363 A4EE A9 20			lda #$20
  1364 A4F0 91 00			sta (:bp),y
  1365
  1366 				; optimize OK (game.inc), line = 188
  1367
  1368 A4F2 A5 79			lda TAIL_DIR
  1369 A4F4 8D D3 A9			sta @CASETMP_0003
  1370 A4F7 C9 22			cmp #$22
  1371 A4F9 D0 0E			jne l_031C
  1372 				@
  1373
  1374 				; optimize OK (game.inc), line = 189
  1375
  1376 A4FB A5 88			lda TAIL_POS
  1377 A4FD 38 E9 19			sub #$19
  1378 A500 85 88			sta TAIL_POS
  1379 A502 B0 02			scs
  1380 A504 C6 89			dec TAIL_POS+1
  1381
  1382 A506 4C 34 A5			jmp a_0003
  1383 A509			l_031C
  1384 A509 C9 24			cmp #$24
  1385 A50B D0 0E			jne l_0326
  1386 				@
  1387
  1388 				; optimize OK (game.inc), line = 190
  1389
  1390 A50D A5 88			lda TAIL_POS
  1391 A50F 18 69 19			add #$19
  1392 A512 85 88			sta TAIL_POS
  1393 A514 90 02			scc
  1394 A516 E6 89			inc TAIL_POS+1
  1395
  1396 A518 4C 34 A5			jmp a_0003
  1397 A51B			l_0326
  1398 A51B C9 25			cmp #$25
  1399 A51D D0 09			jne l_0330
  1400 				@
  1401
  1402 				; optimize FAIL (0, game.inc), line = 191
  1403
  1404 A51F E6 88			inc TAIL_POS
  1405 A521 D0 02			sne
  1406 A523 E6 89			inc TAIL_POS+1
  1407
  1408 A525 4C 34 A5			jmp a_0003
  1409 A528			l_0330
  1410 A528 C9 23			cmp #$23
  1411 A52A D0 08			jne l_033D
  1412 				@
  1413
  1414 				; optimize FAIL (0, game.inc), line = 192
  1415
  1416 A52C A5 88			lda TAIL_POS
  1417 A52E D0 02			bne @+
  1418 A530 C6 89			dec TAIL_POS+1
  1419 				@
  1420 A532 C6 88			dec TAIL_POS
  1421
  1422 A534			l_033D
  1423 A534			a_0003
  1424
  1425 				; optimize OK (game.inc), line = 195
  1426
  1427 A534 A4 89			ldy TAIL_POS+1
  1428 A536 84 01			sty :bp+1
  1429 A538 A4 88			ldy TAIL_POS
  1430 A53A B1 00			lda (:bp),y
  1431 A53C 85 70			sta T0B
  1432
  1433 				; optimize OK (game.inc), line = 197
  1434
  1435 A53E A5 79			lda TAIL_DIR
  1436 A540 8D D4 A9			sta @CASETMP_0004
  1437 A543 C9 22			cmp #$22
  1438 A545 D0 26			jne l_035A
  1439 				@
  1440
  1441 				; optimize OK (game.inc), line = 199
  1442
  1443 A547 A5 70			lda T0B
  1444 A549 8D D5 A9			sta @CASETMP_0005
  1445 A54C C9 2A			cmp #$2A
  1446 A54E D0 07			jne l_0365
  1447 				@
  1448
  1449 				; optimize OK (game.inc), line = 200
  1450
  1451 A550 A9 22			lda #$22
  1452 A552 85 79			sta TAIL_DIR
  1453
  1454 A554 4C 6A A5			jmp a_0005
  1455 A557			l_0365
  1456 A557 C9 3D			cmp #$3D
  1457 A559 D0 07			jne l_0372
  1458 				@
  1459
  1460 				; optimize OK (game.inc), line = 201
  1461
  1462 A55B A9 23			lda #$23
  1463 A55D 85 79			sta TAIL_DIR
  1464
  1465 A55F 4C 6A A5			jmp a_0005
  1466 A562			l_0372
  1467 A562 C9 3E			cmp #$3E
  1468 A564 D0 04			jne l_037F
  1469 				@
  1470
  1471 				; optimize OK (game.inc), line = 202
  1472
  1473 A566 A9 25			lda #$25
  1474 A568 85 79			sta TAIL_DIR
  1475
  1476 A56A			l_037F
  1477 A56A			a_0005
  1478
  1479 A56A 4C E8 A5			jmp a_0004
  1480 A56D			l_035A
  1481 A56D C9 24			cmp #$24
  1482 A56F D0 26			jne l_0393
  1483 				@
  1484
  1485 				; optimize OK (game.inc), line = 206
  1486
  1487 A571 A5 70			lda T0B
  1488 A573 8D D6 A9			sta @CASETMP_0006
  1489 A576 C9 2A			cmp #$2A
  1490 A578 D0 07			jne l_039E
  1491 				@
  1492
  1493 				; optimize OK (game.inc), line = 207
  1494
  1495 A57A A9 24			lda #$24
  1496 A57C 85 79			sta TAIL_DIR
  1497
  1498 A57E 4C 94 A5			jmp a_0006
  1499 A581			l_039E
  1500 A581 C9 3B			cmp #$3B
  1501 A583 D0 07			jne l_03AB
  1502 				@
  1503
  1504 				; optimize OK (game.inc), line = 208
  1505
  1506 A585 A9 23			lda #$23
  1507 A587 85 79			sta TAIL_DIR
  1508
  1509 A589 4C 94 A5			jmp a_0006
  1510 A58C			l_03AB
  1511 A58C C9 3C			cmp #$3C
  1512 A58E D0 04			jne l_03B8
  1513 				@
  1514
  1515 				; optimize OK (game.inc), line = 209
  1516
  1517 A590 A9 25			lda #$25
  1518 A592 85 79			sta TAIL_DIR
  1519
  1520 A594			l_03B8
  1521 A594			a_0006
  1522
  1523 A594 4C E8 A5			jmp a_0004
  1524 A597			l_0393
  1525 A597 C9 25			cmp #$25
  1526 A599 D0 26			jne l_03CC
  1527 				@
  1528
  1529 				; optimize OK (game.inc), line = 213
  1530
  1531 A59B A5 70			lda T0B
  1532 A59D 8D D7 A9			sta @CASETMP_0007
  1533 A5A0 C9 2B			cmp #$2B
  1534 A5A2 D0 07			jne l_03D7
  1535 				@
  1536
  1537 				; optimize OK (game.inc), line = 214
  1538
  1539 A5A4 A9 25			lda #$25
  1540 A5A6 85 79			sta TAIL_DIR
  1541
  1542 A5A8 4C BE A5			jmp a_0007
  1543 A5AB			l_03D7
  1544 A5AB C9 3B			cmp #$3B
  1545 A5AD D0 07			jne l_03E4
  1546 				@
  1547
  1548 				; optimize OK (game.inc), line = 215
  1549
  1550 A5AF A9 22			lda #$22
  1551 A5B1 85 79			sta TAIL_DIR
  1552
  1553 A5B3 4C BE A5			jmp a_0007
  1554 A5B6			l_03E4
  1555 A5B6 C9 3D			cmp #$3D
  1556 A5B8 D0 04			jne l_03F1
  1557 				@
  1558
  1559 				; optimize OK (game.inc), line = 216
  1560
  1561 A5BA A9 24			lda #$24
  1562 A5BC 85 79			sta TAIL_DIR
  1563
  1564 A5BE			l_03F1
  1565 A5BE			a_0007
  1566
  1567 A5BE 4C E8 A5			jmp a_0004
  1568 A5C1			l_03CC
  1569 A5C1 C9 23			cmp #$23
  1570 A5C3 D0 23			jne l_0405
  1571 				@
  1572
  1573 				; optimize OK (game.inc), line = 220
  1574
  1575 A5C5 A5 70			lda T0B
  1576 A5C7 8D D8 A9			sta @CASETMP_0008
  1577 A5CA C9 2B			cmp #$2B
  1578 A5CC D0 07			jne l_0410
  1579 				@
  1580
  1581 				; optimize OK (game.inc), line = 221
  1582
  1583 A5CE A9 23			lda #$23
  1584 A5D0 85 79			sta TAIL_DIR
  1585
  1586 A5D2 4C E8 A5			jmp a_0008
  1587 A5D5			l_0410
  1588 A5D5 C9 3C			cmp #$3C
  1589 A5D7 D0 07			jne l_041D
  1590 				@
  1591
  1592 				; optimize OK (game.inc), line = 222
  1593
  1594 A5D9 A9 22			lda #$22
  1595 A5DB 85 79			sta TAIL_DIR
  1596
  1597 A5DD 4C E8 A5			jmp a_0008
  1598 A5E0			l_041D
  1599 A5E0 C9 3E			cmp #$3E
  1600 A5E2 D0 04			jne l_042A
  1601 				@
  1602
  1603 				; optimize OK (game.inc), line = 223
  1604
  1605 A5E4 A9 24			lda #$24
  1606 A5E6 85 79			sta TAIL_DIR
  1607
  1608 A5E8			l_042A
  1609 A5E8			a_0008
  1610
  1611 A5E8			l_0405
  1612 A5E8			a_0004
  1613
  1614 				; optimize OK (game.inc), line = 228
  1615
  1616 A5E8 A4 89			ldy TAIL_POS+1
  1617 A5EA 84 01			sty :bp+1
  1618 A5EC A4 88			ldy TAIL_POS
  1619 A5EE A5 79			lda TAIL_DIR
  1620 A5F0 91 00			sta (:bp),y
  1621
  1622 				; ------------------------------------------------------------
  1623
  1624 = A9D3			@CASETMP_0003	= DATAORIGIN+$0003
  1625 = A9D4			@CASETMP_0004	= DATAORIGIN+$0004
  1626 = A9D5			@CASETMP_0005	= DATAORIGIN+$0005
  1627 = A9D6			@CASETMP_0006	= DATAORIGIN+$0006
  1628 = A9D7			@CASETMP_0007	= DATAORIGIN+$0007
  1629 = A9D8			@CASETMP_0008	= DATAORIGIN+$0008
  1630
  1631 = A9D3			@VarData	= @CASETMP_0003
  1632 = 0006			@VarDataSize	= 6
  1633
  1634 A5F2			@exit
  1635 					.ifdef @new
  1636 					lda <@VarData
  1637 					sta :ztmp
  1638 					lda >@VarData
  1639 					ldy #@VarDataSize-1
  1640 					jmp @FreeMem
  1641 					els
  1642 A5F2 60				rts						; ret
  1643 					eif
  1644 				.endl
  1645
  1646 A5F3			.local	UPDATE_SNAKE					; PROCEDURE
  1647
  1648 				; optimize OK (game.inc), line = 235
  1649
  1650 A5F3 A0 00			ldy #$00
  1651 A5F5 A5 8C			lda SNAKE.M
  1652 A5F7 10 01			spl
  1653 A5F9 88				dey
  1654 A5FA 18 65 84			add HEAD_POS
  1655 A5FD 85 73			sta T0W
  1656 A5FF 98				tya
  1657 A600 65 85			adc HEAD_POS+1
  1658 A602 85 74			sta T0W+1
  1659
  1660 				; optimize OK (game.inc), line = 236
  1661
  1662 A604 85 01			sta :bp+1
  1663 A606 A4 73			ldy T0W
  1664 A608 B1 00			lda (:bp),y
  1665 A60A 85 75			sta T1W
  1666 A60C A9 00			lda #$00
  1667 A60E 85 76			sta T1W+1
  1668
  1669 				; optimize OK (game.inc), line = 238
  1670
  1671 A610 D0 04			bne @+
  1672 A612 A5 75			lda T1W
  1673 A614 C9 20			cmp #$20
  1674 				@
  1675 A616 F0 09			jeq l_0474x
  1676 A618 A5 76			lda T1W+1
  1677 A61A 05 75			ora T1W
  1678 A61C F0 03 4C A3 A6		jne l_0474
  1679 A621			l_0474x
  1680
  1681 				; optimize OK (game.inc), line = 240
  1682
  1683 A621 A5 76			lda T1W+1
  1684 A623 05 75			ora T1W
  1685 A625 D0 3F			jne l_0486
  1686
  1687 				; optimize OK (game.inc), line = 241
  1688
  1689 A627 A9 00			lda #$00
  1690 A629 85 8D			sta FRUIT_ON_BOARD
  1691
  1692 				; optimize OK (game.inc), line = 243
  1693
  1694 A62B A9 10			lda #$10
  1695 A62D 85 08			sta SYS_VIC20.UPDATE_COUNTER_4.V
  1696 A62F A9 80			lda #$80
  1697 A631 85 0C			sta SYS_VIC20.UPDATE_COUNTER_4.COUNTER
  1698 A633 A9 00			lda #$00
  1699 A635 85 0D			sta SYS_VIC20.UPDATE_COUNTER_4.COUNTER+1
  1700 A637 A9 EA			lda #$EA
  1701 A639 85 04			sta SYS_VIC20.UPDATE_COUNTER_4.SCR_COUNTER
  1702 A63B A9 1E			lda #$1E
  1703 A63D 85 05			sta SYS_VIC20.UPDATE_COUNTER_4.SCR_COUNTER+1
  1704 A63F 20 80 A2			jsr SYS_VIC20.UPDATE_COUNTER_4
  1705
  1706 				; optimize FAIL (0, game.inc), line = 245
  1707
  1708 A642 C6 7B			dec LEVEL_UP
  1709
  1710 				; optimize OK (game.inc), line = 246
  1711
  1712 A644 D0 1D			jne l_04A5
  1713
  1714 				; optimize FAIL (0, game.inc), line = 247
  1715
  1716 A646 E6 7F			inc LEVEL
  1717
  1718 				; optimize OK (game.inc), line = 248
  1719
  1720 A648 A9 01			lda #$01
  1721 A64A 85 08			sta SYS_VIC20.UPDATE_COUNTER_2.V
  1722 A64C A9 7E			lda #$7E
  1723 A64E 85 0C			sta SYS_VIC20.UPDATE_COUNTER_2.COUNTER
  1724 A650 A9 00			lda #$00
  1725 A652 85 0D			sta SYS_VIC20.UPDATE_COUNTER_2.COUNTER+1
  1726 A654 A9 D9			lda #$D9
  1727 A656 85 04			sta SYS_VIC20.UPDATE_COUNTER_2.SCR_COUNTER
  1728 A658 A9 1E			lda #$1E
  1729 A65A 85 05			sta SYS_VIC20.UPDATE_COUNTER_2.SCR_COUNTER+1
  1730 A65C 20 5D A2			jsr SYS_VIC20.UPDATE_COUNTER_2
  1731
  1732 				; optimize OK (game.inc), line = 249
  1733
  1734 A65F A9 0A			lda #$0A
  1735 A661 85 7B			sta LEVEL_UP
  1736 A663			l_04A5
  1737 A663 4C 69 A6			jmp l_04BD
  1738 A666			l_0486
  1739
  1740 				; optimize FAIL ('MOVE_TAIL', game.inc), line = 253
  1741
  1742 A666 20 E8 A4			jsr MOVE_TAIL
  1743 A669			l_04BD
  1744
  1745 				; optimize OK (game.inc), line = 255
  1746
  1747 A669 A4 85			ldy HEAD_POS+1
  1748 A66B 84 01			sty :bp+1
  1749 A66D A4 84			ldy HEAD_POS
  1750 A66F A5 8B			lda SNAKE.BODY
  1751 A671 91 00			sta (:bp),y
  1752
  1753 				; optimize OK (game.inc), line = 257
  1754
  1755 A673 A0 00			ldy #$00
  1756 A675 A5 8C			lda SNAKE.M
  1757 A677 10 01			spl
  1758 A679 88				dey
  1759 A67A 18 65 86			add HEAD_POS_COL
  1760 A67D 85 86			sta HEAD_POS_COL
  1761 A67F 98				tya
  1762 A680 65 87			adc HEAD_POS_COL+1
  1763 A682 85 87			sta HEAD_POS_COL+1
  1764
  1765 				; optimize OK (game.inc), line = 258
  1766
  1767 A684 A4 74			ldy T0W+1
  1768 A686 84 01			sty :bp+1
  1769 A688 A4 73			ldy T0W
  1770 A68A A5 8A			lda SNAKE.HEAD
  1771 A68C 91 00			sta (:bp),y
  1772
  1773 				; optimize OK (game.inc), line = 259
  1774
  1775 A68E A4 87			ldy HEAD_POS_COL+1
  1776 A690 84 01			sty :bp+1
  1777 A692 A4 86			ldy HEAD_POS_COL
  1778 A694 A9 01			lda #$01
  1779 A696 91 00			sta (:bp),y
  1780
  1781 				; optimize OK (game.inc), line = 260
  1782
  1783 A698 A5 73			lda T0W
  1784 A69A 85 84			sta HEAD_POS
  1785 A69C A5 74			lda T0W+1
  1786 A69E 85 85			sta HEAD_POS+1
  1787 A6A0 4C A7 A6			jmp l_04E7
  1788 A6A3			l_0474
  1789
  1790 				; optimize OK (game.inc), line = 263
  1791
  1792 A6A3 A9 01			lda #$01
  1793 A6A5 85 FB			sta GAME_OVER
  1794 A6A7			l_04E7
  1795 A6A7			@exit
  1796 					.ifdef @new
  1797 					lda <@VarData
  1798 					sta :ztmp
  1799 					lda >@VarData
  1800 					ldy #@VarDataSize-1
  1801 					jmp @FreeMem
  1802 					els
  1803 A6A7 60				rts						; ret
  1804 					eif
  1805 				.endl
  1806
  1807 A6A8			.local	MOVE_SNAKE					; PROCEDURE
  1808
  1809 				; optimize OK (game.inc), line = 269
  1810
  1811 A6A8 A5 7A			lda HEAD_DIR
  1812 A6AA 8D D9 A9			sta @CASETMP_0009
  1813 A6AD C9 22			cmp #$22
  1814 A6AF D0 0F			jne l_04FA
  1815 				@
  1816
  1817 				; optimize OK (game.inc), line = 270
  1818
  1819 A6B1 A9 27			lda #$27
  1820 A6B3 85 8A			sta SNAKE.HEAD
  1821 A6B5 A9 2A			lda #$2A
  1822 A6B7 85 8B			sta SNAKE.BODY
  1823 A6B9 A9 E7			lda #$E7
  1824 A6BB 85 8C			sta SNAKE.M
  1825
  1826 A6BD 4C F6 A6			jmp a_0009
  1827 A6C0			l_04FA
  1828 A6C0 C9 24			cmp #$24
  1829 A6C2 D0 0F			jne l_050F
  1830 				@
  1831
  1832 				; optimize OK (game.inc), line = 271
  1833
  1834 A6C4 A9 28			lda #$28
  1835 A6C6 85 8A			sta SNAKE.HEAD
  1836 A6C8 A9 2A			lda #$2A
  1837 A6CA 85 8B			sta SNAKE.BODY
  1838 A6CC A9 19			lda #$19
  1839 A6CE 85 8C			sta SNAKE.M
  1840
  1841 A6D0 4C F6 A6			jmp a_0009
  1842 A6D3			l_050F
  1843 A6D3 C9 25			cmp #$25
  1844 A6D5 D0 0F			jne l_0524
  1845 				@
  1846
  1847 				; optimize OK (game.inc), line = 272
  1848
  1849 A6D7 A9 26			lda #$26
  1850 A6D9 85 8A			sta SNAKE.HEAD
  1851 A6DB A9 2B			lda #$2B
  1852 A6DD 85 8B			sta SNAKE.BODY
  1853 A6DF A9 01			lda #$01
  1854 A6E1 85 8C			sta SNAKE.M
  1855
  1856 A6E3 4C F6 A6			jmp a_0009
  1857 A6E6			l_0524
  1858 A6E6 C9 23			cmp #$23
  1859 A6E8 D0 0C			jne l_0539
  1860 				@
  1861
  1862 				; optimize OK (game.inc), line = 273
  1863
  1864 A6EA A9 29			lda #$29
  1865 A6EC 85 8A			sta SNAKE.HEAD
  1866 A6EE A9 2B			lda #$2B
  1867 A6F0 85 8B			sta SNAKE.BODY
  1868 A6F2 A9 FF			lda #$FF
  1869 A6F4 85 8C			sta SNAKE.M
  1870
  1871 A6F6			l_0539
  1872 A6F6			a_0009
  1873
  1874 				; optimize FAIL ('UPDATE_SNAKE', game.inc), line = 276
  1875
  1876 A6F6 20 F3 A5			jsr UPDATE_SNAKE
  1877
  1878 				; ------------------------------------------------------------
  1879
  1880 = A9D9			@CASETMP_0009	= DATAORIGIN+$0009
  1881
  1882 = A9D9			@VarData	= @CASETMP_0009
  1883 = 0001			@VarDataSize	= 1
  1884
  1885 A6F9			@exit
  1886 					.ifdef @new
  1887 					lda <@VarData
  1888 					sta :ztmp
  1889 					lda >@VarData
  1890 					ldy #@VarDataSize-1
  1891 					jmp @FreeMem
  1892 					els
  1893 A6F9 60				rts						; ret
  1894 					eif
  1895 				.endl
  1896
  1897 A6FA			.local	JOY_HANDLER					; PROCEDURE
  1898
  1899 				; optimize OK (game.inc), line = 283
  1900
  1901 A6FA A9 00			lda #$00
  1902 A6FC 85 8B			sta SNAKE.BODY
  1903
  1904 				; optimize OK (game.inc), line = 285
  1905
  1906 A6FE A5 61			lda SYS_VIC20.JOY
  1907 A700 29 04			and #$04
  1908 A702 F0 2D			jeq l_0578
  1909 A704 A5 7A			lda HEAD_DIR
  1910 A706 C9 24			cmp #$24
  1911 A708 F0 27			jeq l_0578
  1912
  1913 				; optimize OK (game.inc), line = 286
  1914
  1915 A70A A9 27			lda #$27
  1916 A70C 85 8A			sta SNAKE.HEAD
  1917 A70E A9 E7			lda #$E7
  1918 A710 85 8C			sta SNAKE.M
  1919
  1920 				; optimize OK (game.inc), line = 287
  1921
  1922 A712 A5 7A			lda HEAD_DIR
  1923 A714 8D DA A9			sta @CASETMP_000A
  1924 A717 C9 23			cmp #$23
  1925 A719 D0 07			jne l_058C
  1926 				@
  1927
  1928 				; optimize OK (game.inc), line = 288
  1929
  1930 A71B A9 3C			lda #$3C
  1931 A71D 85 8B			sta SNAKE.BODY
  1932
  1933 A71F 4C 2A A7			jmp a_000A
  1934 A722			l_058C
  1935 A722 C9 25			cmp #$25
  1936 A724 D0 04			jne l_0599
  1937 				@
  1938
  1939 				; optimize OK (game.inc), line = 289
  1940
  1941 A726 A9 3B			lda #$3B
  1942 A728 85 8B			sta SNAKE.BODY
  1943
  1944 A72A			l_0599
  1945 A72A			a_000A
  1946
  1947 				; optimize OK (game.inc), line = 291
  1948
  1949 A72A A9 22			lda #$22
  1950 A72C 85 7A			sta HEAD_DIR
  1951 A72E 4C C5 A7			jmp l_05B0
  1952 A731			l_0578
  1953
  1954 				; optimize OK (game.inc), line = 293
  1955
  1956 A731 A5 61			lda SYS_VIC20.JOY
  1957 A733 29 08			and #$08
  1958 A735 F0 2D			jeq l_05D2
  1959 A737 A5 7A			lda HEAD_DIR
  1960 A739 C9 22			cmp #$22
  1961 A73B F0 27			jeq l_05D2
  1962
  1963 				; optimize OK (game.inc), line = 294
  1964
  1965 A73D A9 28			lda #$28
  1966 A73F 85 8A			sta SNAKE.HEAD
  1967 A741 A9 19			lda #$19
  1968 A743 85 8C			sta SNAKE.M
  1969
  1970 				; optimize OK (game.inc), line = 295
  1971
  1972 A745 A5 7A			lda HEAD_DIR
  1973 A747 8D DB A9			sta @CASETMP_000B
  1974 A74A C9 23			cmp #$23
  1975 A74C D0 07			jne l_05E6
  1976 				@
  1977
  1978 				; optimize OK (game.inc), line = 296
  1979
  1980 A74E A9 3E			lda #$3E
  1981 A750 85 8B			sta SNAKE.BODY
  1982
  1983 A752 4C 5D A7			jmp a_000B
  1984 A755			l_05E6
  1985 A755 C9 25			cmp #$25
  1986 A757 D0 04			jne l_05F3
  1987 				@
  1988
  1989 				; optimize OK (game.inc), line = 297
  1990
  1991 A759 A9 3D			lda #$3D
  1992 A75B 85 8B			sta SNAKE.BODY
  1993
  1994 A75D			l_05F3
  1995 A75D			a_000B
  1996
  1997 				; optimize OK (game.inc), line = 299
  1998
  1999 A75D A9 24			lda #$24
  2000 A75F 85 7A			sta HEAD_DIR
  2001 A761 4C C5 A7			jmp l_060A
  2002 A764			l_05D2
  2003
  2004 				; optimize OK (game.inc), line = 301
  2005
  2006 A764 A5 61			lda SYS_VIC20.JOY
  2007 A766 10 2D			jpl l_062C
  2008 A768 A5 7A			lda HEAD_DIR
  2009 A76A C9 23			cmp #$23
  2010 A76C F0 27			jeq l_062C
  2011
  2012 				; optimize OK (game.inc), line = 302
  2013
  2014 A76E A9 26			lda #$26
  2015 A770 85 8A			sta SNAKE.HEAD
  2016 A772 A9 01			lda #$01
  2017 A774 85 8C			sta SNAKE.M
  2018
  2019 				; optimize OK (game.inc), line = 303
  2020
  2021 A776 A5 7A			lda HEAD_DIR
  2022 A778 8D DC A9			sta @CASETMP_000C
  2023 A77B C9 22			cmp #$22
  2024 A77D D0 07			jne l_0640
  2025 				@
  2026
  2027 				; optimize OK (game.inc), line = 304
  2028
  2029 A77F A9 3E			lda #$3E
  2030 A781 85 8B			sta SNAKE.BODY
  2031
  2032 A783 4C 8E A7			jmp a_000C
  2033 A786			l_0640
  2034 A786 C9 24			cmp #$24
  2035 A788 D0 04			jne l_064D
  2036 				@
  2037
  2038 				; optimize OK (game.inc), line = 305
  2039
  2040 A78A A9 3C			lda #$3C
  2041 A78C 85 8B			sta SNAKE.BODY
  2042
  2043 A78E			l_064D
  2044 A78E			a_000C
  2045
  2046 				; optimize OK (game.inc), line = 307
  2047
  2048 A78E A9 25			lda #$25
  2049 A790 85 7A			sta HEAD_DIR
  2050 A792 4C C5 A7			jmp l_0664
  2051 A795			l_062C
  2052
  2053 				; optimize OK (game.inc), line = 309
  2054
  2055 A795 A5 61			lda SYS_VIC20.JOY
  2056 A797 29 10			and #$10
  2057 A799 F0 2A			jeq l_0686
  2058 A79B A5 7A			lda HEAD_DIR
  2059 A79D C9 25			cmp #$25
  2060 A79F F0 24			jeq l_0686
  2061
  2062 				; optimize OK (game.inc), line = 310
  2063
  2064 A7A1 A9 29			lda #$29
  2065 A7A3 85 8A			sta SNAKE.HEAD
  2066 A7A5 A9 FF			lda #$FF
  2067 A7A7 85 8C			sta SNAKE.M
  2068
  2069 				; optimize OK (game.inc), line = 311
  2070
  2071 A7A9 A5 7A			lda HEAD_DIR
  2072 A7AB 8D DD A9			sta @CASETMP_000D
  2073 A7AE C9 22			cmp #$22
  2074 A7B0 D0 07			jne l_069A
  2075 				@
  2076
  2077 				; optimize OK (game.inc), line = 312
  2078
  2079 A7B2 A9 3D			lda #$3D
  2080 A7B4 85 8B			sta SNAKE.BODY
  2081
  2082 A7B6 4C C1 A7			jmp a_000D
  2083 A7B9			l_069A
  2084 A7B9 C9 24			cmp #$24
  2085 A7BB D0 04			jne l_06A7
  2086 				@
  2087
  2088 				; optimize OK (game.inc), line = 313
  2089
  2090 A7BD A9 3B			lda #$3B
  2091 A7BF 85 8B			sta SNAKE.BODY
  2092
  2093 A7C1			l_06A7
  2094 A7C1			a_000D
  2095
  2096 				; optimize OK (game.inc), line = 315
  2097
  2098 A7C1 A9 23			lda #$23
  2099 A7C3 85 7A			sta HEAD_DIR
  2100 A7C5			l_0686
  2101 A7C5			l_0664
  2102 A7C5			l_060A
  2103 A7C5			l_05B0
  2104
  2105 				; optimize OK (game.inc), line = 317
  2106
  2107 A7C5 A5 61			lda SYS_VIC20.JOY
  2108 A7C7 29 20			and #$20
  2109 A7C9 F0 06			jeq l_06CD
  2110 A7CB A5 77			lda SNAKE_SPEED
  2111 A7CD 4A				lsr @
  2112 A7CE 4A				lsr @
  2113 A7CF 85 77			sta SNAKE_SPEED
  2114 A7D1			l_06CD
  2115
  2116 				; optimize OK (game.inc), line = 319
  2117
  2118 A7D1 A5 8B			lda SNAKE.BODY
  2119 A7D3 F0 07			jeq l_06EC
  2120
  2121 				; optimize OK (game.inc), line = 320
  2122
  2123 A7D5 A5 77			lda SNAKE_SPEED
  2124 A7D7 85 78			sta SNAKE_SPD_C
  2125
  2126 				; optimize FAIL ('UPDATE_SNAKE', game.inc), line = 321
  2127
  2128 A7D9 20 F3 A5			jsr UPDATE_SNAKE
  2129 A7DC			l_06EC
  2130
  2131 				; ------------------------------------------------------------
  2132
  2133 = A9DA			@CASETMP_000A	= DATAORIGIN+$000A
  2134 = A9DB			@CASETMP_000B	= DATAORIGIN+$000B
  2135 = A9DC			@CASETMP_000C	= DATAORIGIN+$000C
  2136 = A9DD			@CASETMP_000D	= DATAORIGIN+$000D
  2137
  2138 = A9DA			@VarData	= @CASETMP_000A
  2139 = 0004			@VarDataSize	= 4
  2140
  2141 A7DC			@exit
  2142 					.ifdef @new
  2143 					lda <@VarData
  2144 					sta :ztmp
  2145 					lda >@VarData
  2146 					ldy #@VarDataSize-1
  2147 					jmp @FreeMem
  2148 					els
  2149 A7DC 60				rts						; ret
  2150 					eif
  2151 				.endl
  2152
  2153 A7DD			.local	PUT_FRUIT					; PROCEDURE
  2154
  2155 				; optimize OK (game.inc), line = 329
  2156
  2157 A7DD A9 01			lda #$01
  2158 A7DF 85 08			sta SYS_VIC20.PRND_0113.A
  2159 A7E1 A9 18			lda #$18
  2160 A7E3 85 0C			sta SYS_VIC20.PRND_0113.B
  2161 A7E5 A9 1F			lda #$1F
  2162 A7E7 85 04			sta SYS_VIC20.PRND_0113.MASK
  2163 A7E9 20 D5 A2			jsr SYS_VIC20.PRND_0113
  2164 A7EC A5 62			lda SYS_VIC20.RND
  2165 A7EE 85 70			sta T0B
  2166
  2167 				; optimize OK (game.inc), line = 330
  2168
  2169 A7F0 A9 01			lda #$01
  2170 A7F2 85 08			sta SYS_VIC20.PRND_0113.A
  2171 A7F4 A9 1B			lda #$1B
  2172 A7F6 85 0C			sta SYS_VIC20.PRND_0113.B
  2173 A7F8 A9 1F			lda #$1F
  2174 A7FA 85 04			sta SYS_VIC20.PRND_0113.MASK
  2175 A7FC 20 D5 A2			jsr SYS_VIC20.PRND_0113
  2176 A7FF A5 62			lda SYS_VIC20.RND
  2177 A801 85 71			sta T1B
  2178
  2179 				; optimize OK (game.inc), line = 332
  2180
  2181 A803 85 0C			sta :ecx
  2182 A805 A9 19			lda #$19
  2183 A807 85 04			sta :eax
  2184 					.ifdef fmulinit
  2185 					fmulu_8
  2186 					els
  2187 A809 20 FC A0			imulCL
  2188 					eif
  2189 A80C A5 04			lda :eax
  2190 A80E 85 73			sta T0W
  2191 A810 A5 05			lda :eax+1
  2192 A812 85 74			sta T0W+1
  2193 A814 18 69 1C			add #$1C
  2194 A817 85 74			sta T0W+1
  2195 A819 A5 73			lda T0W
  2196 A81B 18 65 70			add T0B
  2197 A81E 85 73			sta T0W
  2198 A820 90 02			scc
  2199 A822 E6 74			inc T0W+1
  2200
  2201 				; optimize OK (game.inc), line = 334
  2202
  2203 A824 A4 74			ldy T0W+1
  2204 A826 84 01			sty :bp+1
  2205 A828 A4 73			ldy T0W
  2206 A82A B1 00			lda (:bp),y
  2207 A82C C9 20			cmp #$20
  2208 A82E D0 1A			jne l_072E
  2209
  2210 				; optimize OK (game.inc), line = 335
  2211
  2212 A830 A5 70			lda T0B
  2213 A832 85 08			sta SYS_VIC20.SET_XY.X
  2214 A834 A5 71			lda T1B
  2215 A836 85 0C			sta SYS_VIC20.SET_XY.Y
  2216 A838 20 01 A2			jsr SYS_VIC20.SET_XY
  2217 A83B A9 05			lda #$05
  2218 A83D 85 08			sta SYS_VIC20.PUT_CHAR.COL
  2219 A83F A9 00			lda #$00
  2220 A841 85 0C			sta SYS_VIC20.PUT_CHAR.C
  2221 A843 20 52 A2			jsr SYS_VIC20.PUT_CHAR
  2222
  2223 				; optimize OK (game.inc), line = 336
  2224
  2225 A846 A9 01			lda #$01
  2226 A848 85 8D			sta FRUIT_ON_BOARD
  2227 A84A			l_072E
  2228 A84A			@exit
  2229 					.ifdef @new
  2230 					lda <@VarData
  2231 					sta :ztmp
  2232 					lda >@VarData
  2233 					ldy #@VarDataSize-1
  2234 					jmp @FreeMem
  2235 					els
  2236 A84A 60				rts						; ret
  2237 					eif
  2238 				.endl
  2239
  2240 A84B			.local	UPDATE_TIME					; PROCEDURE
  2241
  2242 				; optimize FAIL (0, game.inc), line = 344
  2243
  2244 A84B C6 7C			dec TIME_ENTITY
  2245
  2246 				; optimize OK (game.inc), line = 345
  2247
  2248 A84D D0 1B			jne l_0759
  2249
  2250 				; optimize OK (game.inc), line = 346
  2251
  2252 A84F A9 C8			lda #$C8
  2253 A851 85 7C			sta TIME_ENTITY
  2254
  2255 				; optimize OK (game.inc), line = 347
  2256
  2257 A853 A9 01			lda #$01
  2258 A855 85 08			sta SYS_VIC20.UPDATE_COUNTER_2.V
  2259 A857 A9 7D			lda #$7D
  2260 A859 85 0C			sta SYS_VIC20.UPDATE_COUNTER_2.COUNTER
  2261 A85B A9 00			lda #$00
  2262 A85D 85 0D			sta SYS_VIC20.UPDATE_COUNTER_2.COUNTER+1
  2263 A85F A9 DE			lda #$DE
  2264 A861 85 04			sta SYS_VIC20.UPDATE_COUNTER_2.SCR_COUNTER
  2265 A863 A9 1E			lda #$1E
  2266 A865 85 05			sta SYS_VIC20.UPDATE_COUNTER_2.SCR_COUNTER+1
  2267 A867 20 5D A2			jsr SYS_VIC20.UPDATE_COUNTER_2
  2268 A86A			l_0759
  2269 A86A			@exit
  2270 					.ifdef @new
  2271 					lda <@VarData
  2272 					sta :ztmp
  2273 					lda >@VarData
  2274 					ldy #@VarDataSize-1
  2275 					jmp @FreeMem
  2276 					els
  2277 A86A 60				rts						; ret
  2278 					eif
  2279 				.endl
  2280
  2281 A86B			.local	SNAKE_STEP					; PROCEDURE
  2282
  2283 				; optimize OK (game.inc), line = 355
  2284
  2285 A86B A9 0E			lda #$0E
  2286 A86D 38 E5 7F			sub LEVEL
  2287 A870 85 77			sta SNAKE_SPEED
  2288
  2289 				; optimize OK (game.inc), line = 356
  2290
  2291 A872 C9 02			cmp #$02
  2292 A874 B0 04			jcs l_0784
  2293 A876 A9 02			lda #$02
  2294 A878 85 77			sta SNAKE_SPEED
  2295 A87A			l_0784
  2296
  2297 				; optimize FAIL ('JOY_HANDLER', game.inc), line = 358
  2298
  2299 A87A 20 FA A6			jsr JOY_HANDLER
  2300
  2301 				; optimize OK (game.inc), line = 360
  2302
  2303 A87D A5 78			lda SNAKE_SPD_C
  2304 A87F D0 0A			jne l_079E
  2305
  2306 				; optimize FAIL ('MOVE_SNAKE', game.inc), line = 361
  2307
  2308 A881 20 A8 A6			jsr MOVE_SNAKE
  2309
  2310 				; optimize OK (game.inc), line = 362
  2311
  2312 A884 A5 77			lda SNAKE_SPEED
  2313 A886 85 78			sta SNAKE_SPD_C
  2314 A888 4C 8D A8			jmp l_07AF
  2315 A88B			l_079E
  2316
  2317 				; optimize FAIL (0, game.inc), line = 364
  2318
  2319 A88B C6 78			dec SNAKE_SPD_C
  2320 A88D			l_07AF
  2321 A88D			@exit
  2322 					.ifdef @new
  2323 					lda <@VarData
  2324 					sta :ztmp
  2325 					lda >@VarData
  2326 					ldy #@VarDataSize-1
  2327 					jmp @FreeMem
  2328 					els
  2329 A88D 60				rts						; ret
  2330 					eif
  2331 				.endl
  2332
  2333 A88E			.local	SET_GAME					; PROCEDURE
  2334
  2335 				; optimize OK (game.inc), line = 371
  2336
  2337 A88E A9 20			lda #$20
  2338 A890 20 DB A1			jsr SYS_VIC20.CLRSCR
  2339 A893 20 0D A3			jsr DRAW_FRAME
  2340 A896 20 47 A4			jsr DRAW_BOTTOM_LINE
  2341 A899 20 AA A3			jsr PUT_SNAKE
  2342 A89C 20 9E A4			jsr PRINT_HI_SCORE
  2343
  2344 				; optimize OK (game.inc), line = 373
  2345
  2346 A89F A9 C8			lda #$C8
  2347 A8A1 85 7C			sta TIME_ENTITY
  2348
  2349 				; optimize OK (game.inc), line = 374
  2350
  2351 A8A3 A9 0A			lda #$0A
  2352 A8A5 85 7B			sta LEVEL_UP
  2353
  2354 				; optimize OK (game.inc), line = 375
  2355
  2356 A8A7 A9 00			lda #$00
  2357 A8A9 85 80			sta SCORE_BCD
  2358 A8AB 85 81			sta SCORE_BCD+1
  2359
  2360 				; optimize OK (game.inc), line = 376
  2361
  2362 A8AD 85 7D			sta TIME_BCD
  2363
  2364 				; optimize OK (game.inc), line = 377
  2365
  2366 A8AF 85 7E			sta LEVEL_BCD
  2367
  2368 				; optimize OK (game.inc), line = 378
  2369
  2370 A8B1 85 7F			sta LEVEL
  2371
  2372 				; optimize OK (game.inc), line = 379
  2373
  2374 A8B3 85 78			sta SNAKE_SPD_C
  2375
  2376 				; optimize OK (game.inc), line = 380
  2377
  2378 A8B5 85 8D			sta FRUIT_ON_BOARD
  2379
  2380 				; optimize OK (game.inc), line = 381
  2381
  2382 A8B7 85 FB			sta GAME_OVER
  2383
  2384 				; optimize OK (game.inc), line = 383
  2385
  2386 A8B9 A9 01			lda #$01
  2387 A8BB 20 CF A1			jsr SYS_VIC20.WAIT_00DC
  2388 A8BE			@exit
  2389 					.ifdef @new
  2390 					lda <@VarData
  2391 					sta :ztmp
  2392 					lda >@VarData
  2393 					ldy #@VarDataSize-1
  2394 					jmp @FreeMem
  2395 					els
  2396 A8BE 60				rts						; ret
  2397 					eif
  2398 				.endl
  2399
  2400 A8BF			.local	RESTART_GAME					; PROCEDURE
  2401
  2402 				; optimize FAIL ('HALL_OF_FAME', game.inc), line = 390
  2403
  2404 A8BF 20 D0 A4			jsr HALL_OF_FAME
  2405
  2406 				; optimize OK (game.inc), line = 391
  2407
  2408 A8C2 A9 19			lda #$19
  2409 A8C4 20 CF A1			jsr SYS_VIC20.WAIT_00DC
  2410
  2411 				; optimize FAIL ('PRESS_FIRE', game.inc), line = 392
  2412
  2413 A8C7 20 82 A3			jsr PRESS_FIRE
  2414
  2415 				; optimize FAIL ('SET_GAME', game.inc), line = 393
  2416
  2417 A8CA 20 8E A8			jsr SET_GAME
  2418 A8CD			@exit
  2419 					.ifdef @new
  2420 					lda <@VarData
  2421 					sta :ztmp
  2422 					lda >@VarData
  2423 					ldy #@VarDataSize-1
  2424 					jmp @FreeMem
  2425 					els
  2426 A8CD 60				rts						; ret
  2427 					eif
  2428 				.endl
  2429
  2430 A8CE			.local	VBI						; PROCEDURE
  2431
  2432 				; optimize OK (game.inc), line = 400
  2433
  2434 A8CE A5 FB			lda GAME_OVER
  2435 A8D0 D0 17			jne l_07FF
  2436
  2437 				; optimize FAIL ('UPDATE_TIME', game.inc), line = 401
  2438
  2439 A8D2 20 4B A8			jsr UPDATE_TIME
  2440
  2441 				; optimize FAIL ('SNAKE_STEP', game.inc), line = 402
  2442
  2443 A8D5 20 6B A8			jsr SNAKE_STEP
  2444
  2445 				; optimize OK (game.inc), line = 403
  2446
  2447 A8D8 A5 8D			lda FRUIT_ON_BOARD
  2448 A8DA D0 03			jne l_0811
  2449 A8DC 20 DD A7			jsr PUT_FRUIT
  2450 A8DF			l_0811
  2451
  2452 				; optimize OK (game.inc), line = 404
  2453
  2454 A8DF A5 7D			lda TIME_BCD
  2455 A8E1 C9 99			cmp #$99
  2456 A8E3 D0 04			jne l_0827
  2457 A8E5 A9 01			lda #$01
  2458 A8E7 85 FB			sta GAME_OVER
  2459 A8E9			l_0827
  2460 A8E9			l_07FF
  2461 A8E9			@exit
  2462 					.ifdef @new
  2463 					lda <@VarData
  2464 					sta :ztmp
  2465 					lda >@VarData
  2466 					ldy #@VarDataSize-1
  2467 					jmp @FreeMem
  2468 					els
  2469 A8E9 60				rts						; ret
  2470 					eif
  2471 				.endl
  2472
  2473 A8EA			.local	PREPARE						; PROCEDURE
  2474
  2475 				; optimize OK (game.inc), line = 413
  2476
  2477 A8EA A9 EA			lda <PREPARE
  2478 A8EC 38 E9 CE			sub <VBI
  2479 A8EF 85 04			sta SYSTEM.MOVE_00B1.COUNT
  2480 A8F1 A9 A8			lda >PREPARE
  2481 A8F3 E9 A8			sbc >VBI
  2482 A8F5 85 05			sta SYSTEM.MOVE_00B1.COUNT+1
  2483 A8F7 A9 CE			lda <VBI
  2484 A8F9 85 08			sta SYSTEM.MOVE_00B1.SOURCE
  2485 A8FB A9 A8			lda >VBI
  2486 A8FD 85 09			sta SYSTEM.MOVE_00B1.SOURCE+1
  2487 A8FF A9 00			lda #$00
  2488 A901 85 0C			sta SYSTEM.MOVE_00B1.DEST
  2489 A903 A9 12			lda #$12
  2490 A905 85 0D			sta SYSTEM.MOVE_00B1.DEST+1
  2491 A907				.local +MAIN.SYSTEM.MOVE_00B1
  2492 A907				m@INLINE
Macro: MAIN.SYSTEM.MOVE_00B1.M@INLINE [Source: vic20.a65]
     4 A907 20 A7 A0			jsr @move
Source: vic20.a65
  2493 					.endl
  2494
  2495 				; optimize OK (game.inc), line = 414
  2496
  2497 A90A A9 00			lda #$00
  2498 A90C 85 08			sta SYSTEM.MOVE_00B1.SOURCE
  2499 A90E A9 BE			lda #$BE
  2500 A910 85 09			sta SYSTEM.MOVE_00B1.SOURCE+1
  2501 A912 A9 00			lda #$00
  2502 A914 85 0C			sta SYSTEM.MOVE_00B1.DEST
  2503 A916 A9 10			lda #$10
  2504 A918 85 0D			sta SYSTEM.MOVE_00B1.DEST+1
  2505 A91A A9 00			lda #$00
  2506 A91C 85 04			sta SYSTEM.MOVE_00B1.COUNT
  2507 A91E A9 02			lda #$02
  2508 A920 85 05			sta SYSTEM.MOVE_00B1.COUNT+1
  2509 A922				.local +MAIN.SYSTEM.MOVE_00B1
  2510 A922				m@INLINE
Macro: MAIN.SYSTEM.MOVE_00B1.M@INLINE [Source: vic20.a65]
     4 A922 20 A7 A0			jsr @move
Source: vic20.a65
  2511 					.endl
  2512
  2513 				; optimize OK (game.inc), line = 415
  2514
  2515 A925 A9 12			lda #$12
  2516 A927 85 08			sta SYSTEM.MOVE_00B1.SOURCE
  2517 A929 A9 BB			lda #$BB
  2518 A92B 85 09			sta SYSTEM.MOVE_00B1.SOURCE+1
  2519 A92D A9 00			lda #$00
  2520 A92F 85 0C			sta SYSTEM.MOVE_00B1.DEST
  2521 A931 A9 1C			lda #$1C
  2522 A933 85 0D			sta SYSTEM.MOVE_00B1.DEST+1
  2523 A935 A9 EE			lda #$EE
  2524 A937 85 04			sta SYSTEM.MOVE_00B1.COUNT
  2525 A939 A9 02			lda #$02
  2526 A93B 85 05			sta SYSTEM.MOVE_00B1.COUNT+1
  2527 A93D				.local +MAIN.SYSTEM.MOVE_00B1
  2528 A93D				m@INLINE
Macro: MAIN.SYSTEM.MOVE_00B1.M@INLINE [Source: vic20.a65]
     4 A93D 20 A7 A0			jsr @move
Source: vic20.a65
  2529 					.endl
  2530 A940			@exit
  2531 					.ifdef @new
  2532 					lda <@VarData
  2533 					sta :ztmp
  2534 					lda >@VarData
  2535 					ldy #@VarDataSize-1
  2536 					jmp @FreeMem
  2537 					els
  2538 A940 60				rts						; ret
  2539 					eif
  2540 				.endl
  2541 A941			l_0067
  2542
  2543 				; optimize FAIL ('PREPARE', game.inc), line = 421
  2544
  2545 A941 20 EA A8			jsr PREPARE
  2546
  2547 				; optimize OK (game.inc), line = 422
  2548
  2549 A944 A9 00			lda #$00
  2550 A946 85 FB			sta GAME_OVER
  2551 A948 20 93 A1			jsr SYS_VIC20.SYS_INIT
  2552
  2553 				; optimize FAIL ('m@INLINE', game.inc), line = 423
  2554
  2555 A94B				.local +MAIN.WELCOME_SCR
  2556 A94B				m@INLINE
Macro: MAIN.WELCOME_SCR.M@INLINE [Source: vic20.a65]
     4 A94B A9 01			lda #$01
     5 A94D 20 EE A1			jsr SYS_VIC20.CLRCOL
     9 A950 A9 0C			lda #$0C
    10 A952 85 70			sta T0B
    11 A954 85 72			sta T2B
    15 A956 AD 53 A0			lda adr.TXT_INFO
    16 A959 4A				lsr @
    17 A95A 85 71			sta T1B
    18 A95C A5 70			lda T0B
    19 A95E 38 E5 71			sub T1B
    20 A961 85 70			sta T0B
    24 A963 85 08			sta SYS_VIC20.SET_XY.X
    25 A965 A9 02			lda #$02
    26 A967 85 0C			sta SYS_VIC20.SET_XY.Y
    27 A969 20 01 A2			jsr SYS_VIC20.SET_XY
    31 A96C A9 07			lda #$07
    32 A96E 85 08			sta SYS_VIC20.PRINT.COL
    33 A970 A9 53			lda #$53
    34 A972 85 0C			sta SYS_VIC20.PRINT.S
    35 A974 A9 A0			lda #$A0
    36 A976 85 0D			sta SYS_VIC20.PRINT.S+1
    37 A978 20 3C A2			jsr SYS_VIC20.PRINT
    41 A97B AD 3E A0			lda adr.TXT_TURBO
    42 A97E 4A				lsr @
    43 A97F 85 71			sta T1B
    44 A981 A5 72			lda T2B
    45 A983 38 E5 71			sub T1B
    46 A986 85 72			sta T2B
    50 A988 85 08			sta SYS_VIC20.SET_XY.X
    51 A98A A9 19			lda #$19
    52 A98C 85 0C			sta SYS_VIC20.SET_XY.Y
    53 A98E 20 01 A2			jsr SYS_VIC20.SET_XY
    57 A991 A9 07			lda #$07
    58 A993 85 08			sta SYS_VIC20.PRINT.COL
    59 A995 A9 3E			lda #$3E
    60 A997 85 0C			sta SYS_VIC20.PRINT.S
    61 A999 A9 A0			lda #$A0
    62 A99B 85 0D			sta SYS_VIC20.PRINT.S+1
    63 A99D 20 3C A2			jsr SYS_VIC20.PRINT
    66 A9A0			l_01AF
    70 A9A0 A5 61			lda SYS_VIC20.JOY
    71 A9A2 29 20			and #$20
    72 A9A4 F0 FA			jeq l_01AF
Source: vic20.a65
  2557 					.endl
  2558
  2559 				; optimize OK (game.inc), line = 424
  2560
  2561 A9A6 A9 00			lda #$00
  2562 A9A8 85 82			sta HI_SCORE_BCD
  2563 A9AA 85 83			sta HI_SCORE_BCD+1
  2564 A9AC 20 8E A8			jsr SET_GAME
  2565
  2566 				; --- RepeatUntilProlog
  2567 A9AF			l_084F
  2568
  2569 				; optimize OK (game.inc), line = 427
  2570
  2571 A9AF A5 FB			lda GAME_OVER
  2572 A9B1 F0 03			jeq l_085B
  2573 A9B3 20 BF A8			jsr RESTART_GAME
  2574 A9B6			l_085B
  2575
  2576 				; optimize OK (game.inc), line = 428
  2577
  2578 A9B6 4C AF A9			jmp l_084F
  2579
  2580 				; ------------------------------------------------------------
  2581
  2582 = BE00			CRT_CHARS_ADR	= $BE00
  2583 = BB12			CRT_TITLE_ADR	= $BB12
  2584 = 0000			GAME_BLACK	= $00
  2585 = 0001			GAME_WHITE	= $01
  2586 = 0002			GAME_RED	= $02
  2587 = 0003			GAME_CYAN	= $03
  2588 = 0004			GAME_PURPLE	= $04
  2589 = 0005			GAME_GREEN	= $05
  2590 = 0006			GAME_BLUE	= $06
  2591 = 0007			GAME_YELLOW	= $07
  2592 = 0008			GAME_ORANGE	= $08
  2593 = 0000			C_FRUIT	= $00
  2594 = 0020			C_SPACE	= $20
  2595 = 001E			C_WALL_H	= $1E
  2596 = 001F			C_WALL_V	= $1F
  2597 = 0027			C_HEAD_UP	= $27
  2598 = 0026			C_HEAD_RIGHT	= $26
  2599 = 0028			C_HEAD_DOWN	= $28
  2600 = 0029			C_HEAD_LEFT	= $29
  2601 = 0022			C_TAIL_UP	= $22
  2602 = 0023			C_TAIL_LEFT	= $23
  2603 = 0024			C_TAIL_DOWN	= $24
  2604 = 0025			C_TAIL_RIGHT	= $25
  2605 = 002A			C_BODY_V	= $2A
  2606 = 002B			C_BODY_H	= $2B
  2607 = 003B			C_BODY_SW	= $3B
  2608 = 003C			C_BODY_SE	= $3C
  2609 = 003D			C_BODY_NW	= $3D
  2610 = 003E			C_BODY_NE	= $3E
  2611 = A00C			adr.TXT_LEVEL	= CODEORIGIN+$0000
  2612 A9B9			.var TXT_LEVEL	= adr.TXT_LEVEL .word
  2613 = A016			adr.TXT_POINTS	= CODEORIGIN+$000A
  2614 A9B9			.var TXT_POINTS	= adr.TXT_POINTS .word
  2615 = A023			adr.TXT_TIME	= CODEORIGIN+$0017
  2616 A9B9			.var TXT_TIME	= adr.TXT_TIME .word
  2617 = A029			adr.TXT_HSCORE	= CODEORIGIN+$001D
  2618 A9B9			.var TXT_HSCORE	= adr.TXT_HSCORE .word
  2619 = A032			adr.TXT_FIRE	= CODEORIGIN+$0026
  2620 A9B9			.var TXT_FIRE	= adr.TXT_FIRE .word
  2621 = A03E			adr.TXT_TURBO	= CODEORIGIN+$0032
  2622 A9B9			.var TXT_TURBO	= adr.TXT_TURBO .word
  2623 = A053			adr.TXT_INFO	= CODEORIGIN+$0047
  2624 A9B9			.var TXT_INFO	= adr.TXT_INFO .word
  2625 = 0002			SNAKE_SIZE	= $02
  2626 = 000E			GAME_SPEED	= $0E
  2627 = 000A			LEVEL_THOLD	= $0A
  2628 = 0002			SPEED_THOLD	= $02
  2629 = 00C8			TIME_E_SET	= $C8
  2630 = 0099			TIME_THOLD	= $99
  2631 = 0022			UP	= $22
  2632 = 0024			DOWN	= $24
  2633 = 0023			LEFT	= $23
  2634 = 0025			RIGHT	= $25
  2635 = 00E7			MOVE_UP	= $E7
  2636 = 0019			MOVE_DOWN	= $19
  2637 = 00FF			MOVE_LEFT	= $FF
  2638 = 0001			MOVE_RIGHT	= $01
  2639 = 0070			T0B	= $70
  2640 = 0071			T1B	= $71
  2641 = 0072			T2B	= $72
  2642 = 0073			T0W	= $73
  2643 = 0075			T1W	= $75
  2644 = 0077			SNAKE_SPEED	= $77
  2645 = 0078			SNAKE_SPD_C	= $78
  2646 = 0079			TAIL_DIR	= $79
  2647 = 007A			HEAD_DIR	= $7A
  2648 = 007B			LEVEL_UP	= $7B
  2649 = 007C			TIME_ENTITY	= $7C
  2650 = 007D			TIME_BCD	= $7D
  2651 = 007E			LEVEL_BCD	= $7E
  2652 = 007F			LEVEL	= $7F
  2653 = 0080			SCORE_BCD	= $80
  2654 = 0082			HI_SCORE_BCD	= $82
  2655 = 0084			HEAD_POS	= $84
  2656 = 0086			HEAD_POS_COL	= $86
  2657 = 0088			TAIL_POS	= $88
  2658 = 008A			adr.SNAKE	= $8A
  2659 A9B9			.var SNAKE	= adr.SNAKE .word
  2660 = 008A			SNAKE.HEAD	= $8A
  2661 = 008B			SNAKE.BODY	= $8B
  2662 = 008C			SNAKE.M	= $8C
  2663 = 008D			FRUIT_ON_BOARD	= $8D
  2664 = 00FB			GAME_OVER	= $FB
  2665 = 00FB			SF0B	= $FB
  2666 = 00FC			SF1B	= $FC
  2667 = 1C05			HI_SCR_SCORE	= $1C05
  2668 = 1EEA			SCR_SCORE	= $1EEA
  2669 = 1ED9			SCR_LEVEL	= $1ED9
  2670 = 1EDE			SCR_TIME	= $1EDE
  2671 A9B9			@exit
  2672
  2673 A9B9 A2 00		@halt	ldx #$00
  2674 A9BB 9A				txs
  2675
  2676 A9BC 60				rts
  2677
  2678 				; ------------------------------------------------------------
  2679
  2680 				; ------------------------------------------------------------
  2681
  2682 A9BD			.local	@DEFINES
  2683 A9BD			RAW
  2684 				.endl
  2685
  2686 A9BD			.local	@RESOURCE
  2687 				.endl
  2688
  2689 = A9BD 0C A0		TXT_LEVEL
  2689 = A9BF 16 A0		TXT_POINTS
  2689 = A9C1 23 A0		TXT_TIME
  2689 = A9C3 29 A0		TXT_HSCORE
  2689 = A9C5 32 A0		TXT_FIRE
  2689 = A9C7 3E A0		TXT_TURBO
  2689 = A9C9 53 A0		TXT_INFO
  2689 = A9CB 8A 00		SNAKE
  2689 				.endl							; MAIN
  2690
  2691 				; ------------------------------------------------------------
  2692 				; ------------------------------------------------------------
  2693
  2694 				.macro	UNITINITIALIZATION
  2695 				
  2696 					.ifdef MAIN.SYSTEM.@UnitInit
  2697 					jsr MAIN.SYSTEM.@UnitInit
  2698 					.fi
  2699 				
  2700 					.ifdef MAIN.SYS_VIC20.@UnitInit
  2701 					jsr MAIN.SYS_VIC20.@UnitInit
  2702 					.fi
  2703 				.endm
  2704
  2705 				; ------------------------------------------------------------
  2706
  2707 					ift .SIZEOF(MAIN.SYSTEM) > 0
  2708 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  2708 				SYSTEM: $A12D..$A15A
  2709 					eif
  2710
  2711 					ift .SIZEOF(MAIN.SYS_VIC20) > 0
  2712 					.print 'SYS_VIC20: ',MAIN.SYS_VIC20,'..',MAIN.SYS_VIC20+.SIZEOF(MAIN.SYS_VIC20)-1
  2712 				SYS_VIC20: $A15B..$A30C
  2713 					eif
  2714
  2715 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  2715 				CODE: $A00C..$A9BC
  2716
  2717 				; ------------------------------------------------------------
  2718
  2719 A9CD				.align $0004
  2720
  2721 A9D0			DATAORIGIN
  2722
  2723 = 0000			VARINITSIZE	= *-DATAORIGIN
  2724 = 000E			VARDATASIZE	= 14
  2725
  2726 = A9DE			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  2727
  2728 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  2728 				DATA: $A9D0..$A9DE
  2729
  2730 				; ------------------------------------------------------------
  2731
  2732 				.macro	STATICDATA
  2733 				.by  $08 $0C $05 $16 $05 $0C $20 $30  $30 $00 $0B $10 $0F $09 $0E $14  $13 $20 $30 $30 $30 $30 $00 $04
  2734 				.by  $14 $3A $30 $30 $00 $07 $08 $09  $3A $30 $30 $30 $30 $00 $0A $10  $12 $05 $13 $13 $20 $06 $09 $12
  2735 				.by  $05 $00 $13 $08 $0F $0C $04 $20  $06 $09 $12 $05 $20 $06 $0F $12  $20 $14 $15 $12 $02 $0F $00 $17
  2736 				.by  $13 $03 $0F $12 $05 $20 $10 $0F  $09 $0E $14 $13 $20 $15 $0E $14  $09 $0C $20 $14 $3A $39 $39 $00
  2737 				.by  $09 $1A $19 $3C $00 $FC $00 $00  $FF $FF $00 $00 $00 $00 $00 $6E
  2738 				.endm
  2739
  2740 A9D0			.local	RESOURCE
  2741 A9D0				icl 'raw\resource.asm'
Source: resource.asm
     1
    48 					opt l+
  2742
  2743 A9D0				RCDATA 'res/title.scr' CRT_TITLE_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     6 A9D0				org main.CRT_TITLE_ADR
     8 BB12 20 20 20 20 20 20 + 	ins 'res/title.scr',0
    10 					.print '$R RCDATA  ',main.CRT_TITLE_ADR,'..',*-1," 'res/title.scr'"
    10 				$R RCDATA  $BB12..$BDFF 'res/title.scr'
Source: vic20.a65
  2744 BE00				RCDATA 'res/snake.fnt' CRT_CHARS_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     6 BE00				org main.CRT_CHARS_ADR
     8 BE00 18 08 3C 76 6A 56 + 	ins 'res/snake.fnt',0
    10 					.print '$R RCDATA  ',main.CRT_CHARS_ADR,'..',*-1," 'res/snake.fnt'"
    10 				$R RCDATA  $BE00..$BFFF 'res/snake.fnt'
Source: vic20.a65
  2745 				.endl
  2746
  2747 					end
