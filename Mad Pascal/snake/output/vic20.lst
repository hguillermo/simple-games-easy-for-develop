mads 2.1.5
    57 				  opt l+
   102
   103 				.print 'ZPAGE: ',zpage,'..',zpend-1
   103 				ZPAGE: $0000..$0053
   104
   105 				.print 'RTLIB: ',RTLIB,'..',*-1
   105 				RTLIB: $A07C..$A113
   106
   107 				; ------------------------------------------------------------
   108
   109 A114			START
   110 A114 BA				tsx
   111 A115 8E A7 A9			stx MAIN.@halt+1
   112
   113 					.ifdef fmulinit
   114 					fmulinit
   115 					.fi
   116
   117 = 000E			VLEN	= VARDATASIZE-VARINITSIZE
   118 = A9BC			VADR	= DATAORIGIN+VARINITSIZE
   119
   120 					ift VADR > $BFFF
   121 					ert 'Invalid memory address range ',VADR
   122 					eli (VLEN>0) && (VLEN<=256)
   123 A118 A2 F2			ldx #256-VLEN
   124 A11A A9 00			lda #$00
   125 A11C 9D CA A8 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   126 					eli VLEN>256
   127 					@fill #VADR #VLEN #$00
   128 					eif
   129
   130 				.ifdef :psptr
   131 					mwa #PROGRAMSTACK :psptr
   132 				.fi
   133
   134 A122 A2 00			ldx #$00
   135 A124 86 00			stx bp						; BP = 0
   136
   137 A126 CA				dex						; X = 255
   138
   139 A127				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: vic20.a65]
     7 A127 20 FA A2			jsr MAIN.SYS_VIC20.@UnitInit
Source: vic20.a65
   140
   141 A12A			.local	MAIN						; PROCEDURE
   142
   143 A12A 4C 2E A9			jmp l_0067
   144
   145 				; ------------------------------------------------------------
   146
   147 A12D			.local	SYSTEM						; UNIT
   148
   149 A12D			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   150
   151 				; ------------------------------------------------------------
   152
   153 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   154 				; as Pointer
   155 A12D B5 14			lda :STACKORIGIN,x
   156 A12F 85 08			sta A
   157 A131 B5 24			lda :STACKORIGIN+STACKWIDTH,x
   158 A133 85 09			sta A+1
   159 A135 CA				dex
   160 A136			@main
   161
   162 				; -------------------  ASM Block 00000002  -------------------
   163
   164 A136 A0 00			ldy #0
   165 A138 B1 08 8D BE A9		mva (:edx),y Result
   166
   167 A13D			@exit
   168
   169 				; ------------------------------------------------------------
   170
   171 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   172 				; as Pointer
   173
   174 A13D E8				inx
   175 A13E AD BE A9 95 14		mva RESULT :STACKORIGIN,x
   176
   177 					.ifdef @new
   178 					lda <@VarData
   179 					sta :ztmp
   180 					lda >@VarData
   181 					ldy #@VarDataSize-1
   182 					jmp @FreeMem
   183 					eif
   184
   185 				; ------------------------------------------------------------
   186
   187 = 0008			A	= :EDX
   188 = A9BE			RESULT	= DATAORIGIN+$0002
   189 A143 60				rts						; ret
   190 				.endl
   191
   192 A144			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   193
   194 				; ------------------------------------------------------------
   195
   196 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   197 				; as Pointer
   198 A144 B5 14			lda :STACKORIGIN,x
   199 A146 85 08			sta A
   200 A148 B5 24			lda :STACKORIGIN+STACKWIDTH,x
   201 A14A 85 09			sta A+1
   202 A14C CA				dex
   203 A14D 30 05			jmi @main
   204
   205 				; ------------------------------------------------------------
   206
   207 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   208 				; as Pointer
   209 A14F B5 14			lda :STACKORIGIN,x
   210 A151 85 0C			sta VALUE
   211 A153 CA				dex
   212 A154			@main
   213
   214 				; -------------------  ASM Block 00000018  -------------------
   215
   216 A154 A0 00			ldy #0
   217 A156 A5 0C 91 08			mva value (:edx),y
   218
   219 				; ------------------------------------------------------------
   220
   221 = 0008			A	= :EDX
   222 = 000C			VALUE	= :ECX
   223 A15A			@exit
   224 					.ifdef @new
   225 					lda <@VarData
   226 					sta :ztmp
   227 					lda >@VarData
   228 					ldy #@VarDataSize-1
   229 					jmp @FreeMem
   230 					els
   231 A15A 60				rts						; ret
   232 					eif
   233 				.endl
   234
   235 A15B			.local	MOVE_00B1					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   236
   237 					.MACRO m@INLINE
   238 				
   239 				; -------------------  ASM Block 00000028  -------------------
   240 				
   241 					jsr @move
   242 				
   243 					.ENDM
   244
   245 				; ------------------------------------------------------------
   246
   247 = 0008			SOURCE	= :EDX
   248 = 000C			DEST	= :ECX
   249 = 0004			COUNT	= :EAX
   250 A15B			@exit
   251 				.endl
   252
   253 				; ------------------------------------------------------------
   254
   255 = 0648			M_PI_2	= $0648
   256 = 0192			D_PI_2	= $0192
   257 = 0004			D_PI_180	= $04
   258 = A9BC			RNDSEED	= DATAORIGIN+$0000
   259
   260 				.endl							; UNIT SYSTEM
   261
   262 				; ------------------------------------------------------------
   263
   264 A15B			.local	SYS_VIC20					; UNIT
   265
   266 A15B			.local	SYS_VBI						; PROCEDURE | ASSEMBLER | INTERRUPT
   267
   268 				; -------------------  ASM Block 00000048  -------------------
   269
   270 A15B E6 60		      inc RTCLOCK
   271
   272 A15D AE 13 91		      ldx VIA1DDRA
   273 A160 AC 22 91		      ldy VIA2DDRB
   274 A163 A9 C3 8D 13 91	      mva #%11000011 VIA1DDRA
   275 A168 AD 11 91		      lda VIA1PA
   276 A16B 8E 13 91		      stx VIA1DDRA
   277 A16E 29 3C		      and #%00111100                  // up, down, left, fire
   278 A170 85 61		      sta JOY
   279 A172 A9 7F 8D 22 91	      mva #%01111111 VIA2DDRB
   280 A177 AD 20 91		      lda VIA2PB
   281 A17A 8C 22 91		      sty VIA2DDRB
   282 A17D 29 80		      and #%10000000                  // right
   283 A17F 05 61		      ora JOY
   284 A181 49 BC		      eor #%10111100                  // inverse values
   285 A183 85 61		      sta JOY
   286
   287 A185 20 D8 A8		      jsr VBI
   288
   289 A188 A9 40 8D 2D 91	      mva #%01000000 VIA2IFR
   290 A18D 68 A8 68 AA 68	      plr
   291
   292 A192 40				rti						; ret
   293 				.endl
   294
   295 A193			.local	SYS_INIT					; PROCEDURE | ASSEMBLER
   296
   297 				; -------------------  ASM Block 00000049  -------------------
   298
   299 A193 78			      sei
   300
   301 A194 A9 7F 8D 1E 91	      mva #%01111111 VIA1IER          // disable all NMI
   302 A199 A9 C0 8D 2E 91	      mva #%11000000 VIA2IER          // enable IRQ via2/timer1
   303 A19E A9 40 8D 2B 91	      mva #%01000000 VIA2ACR          // put via2/timer1 in continuous free-running mode
   304
   305 A1A3 A9 5B 8D 14 03 A9 +       mwa #SYS_VBI CINV               // register IRQ procedure
   306
   307 A1AD A9 00 85 60		      mva #0 RTCLOCK                  // reset raster
   308
   309 A1B1 A9 92		      lda #VBI_START                  // wait for 130 raster line
   310 A1B3 CD 04 90		@     cmp VICCR4
   311 A1B6 D0 FB		      bne @-
   312
   313 A1B8 A9 86 8D 24 91 A9 +       mwa #PAL_TIMER1 VIA2T1CL        // set via2/timer1; 1/50 sec.
   314
   315 A1C2 A0 0F		      ldy #15
   316 A1C4 B9 6C A0 99 00 90 +       mva:rpl adr.VIC_DEF,y VICCR0,y- // init VIC registers
   317
   318 A1CD 58			      cli
   319
   320 A1CE			@exit
   321 					.ifdef @new
   322 					lda <@VarData
   323 					sta :ztmp
   324 					lda >@VarData
   325 					ldy #@VarDataSize-1
   326 					jmp @FreeMem
   327 					els
   328 A1CE 60				rts						; ret
   329 					eif
   330 				.endl
   331
   332 A1CF			.local	WAIT_00DC					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   333 A1CF 85 08			sta N
   334
   335 				; -------------------  ASM Block 00000052  -------------------
   336
   337 A1D1 A5 08		      lda n
   338 A1D3 18 65 60		      add RTCLOCK
   339 A1D6 C5 60		@     cmp RTCLOCK
   340 A1D8 D0 FC		      bne @-
   341
   342 				; ------------------------------------------------------------
   343
   344 = 0008			N	= :EDX
   345 A1DA			@exit
   346 					.ifdef @new
   347 					lda <@VarData
   348 					sta :ztmp
   349 					lda >@VarData
   350 					ldy #@VarDataSize-1
   351 					jmp @FreeMem
   352 					els
   353 A1DA 60				rts						; ret
   354 					eif
   355 				.endl
   356
   357 A1DB			.local	CLRSCR						; PROCEDURE | ASSEMBLER | REGISTER
   358 A1DB 85 08			sta V
   359
   360 				; -------------------  ASM Block 00000053  -------------------
   361
   362 A1DD A0 00		      ldy #0
   363 A1DF A5 08		      lda v
   364 A1E1 99 00 1C		@     sta SCREEN_ADR,y
   365 A1E4 99 00 1D		      sta SCREEN_ADR + $100,y
   366 A1E7 99 00 1E		      sta SCREEN_ADR + $200,y
   367 A1EA C8			      iny
   368 A1EB D0 F4		      bne @-
   369
   370 				; ------------------------------------------------------------
   371
   372 = 0008			V	= :EDX
   373 A1ED			@exit
   374 					.ifdef @new
   375 					lda <@VarData
   376 					sta :ztmp
   377 					lda >@VarData
   378 					ldy #@VarDataSize-1
   379 					jmp @FreeMem
   380 					els
   381 A1ED 60				rts						; ret
   382 					eif
   383 				.endl
   384
   385 A1EE			.local	CLRCOL						; PROCEDURE | ASSEMBLER | REGISTER
   386 A1EE 85 08			sta C
   387
   388 				; -------------------  ASM Block 00000054  -------------------
   389
   390 A1F0 A0 00		      ldy #0
   391 A1F2 A5 08		      lda c
   392 A1F4 99 00 94		@     sta COLORMAP_ADR,y
   393 A1F7 99 00 95		      sta COLORMAP_ADR + $100,y
   394 A1FA 99 00 96		      sta COLORMAP_ADR + $200,y
   395 A1FD C8			      iny
   396 A1FE D0 F4		      bne @-
   397
   398 				; ------------------------------------------------------------
   399
   400 = 0008			C	= :EDX
   401 A200			@exit
   402 					.ifdef @new
   403 					lda <@VarData
   404 					sta :ztmp
   405 					lda >@VarData
   406 					ldy #@VarDataSize-1
   407 					jmp @FreeMem
   408 					els
   409 A200 60				rts						; ret
   410 					eif
   411 				.endl
   412
   413 A201			.local	SET_XY						; PROCEDURE | REGISTER
   414
   415 				; optimize OK (SYS_VIC20), line = 434
   416
   417 A201 A5 08			lda X
   418 A203 85 54			sta T0B
   419 A205 A5 0C			lda Y
   420 A207 85 55			sta T1B
   421
   422 				; optimize OK (SYS_VIC20), line = 435
   423
   424 A209 A9 19			lda #$19
   425 A20B 85 0C			sta :ecx
   426 A20D A5 55			lda T1B
   427 A20F 85 04			sta :eax
   428 					.ifdef fmulinit
   429 					fmulu_8
   430 					els
   431 A211 20 FC A0			imulCL
   432 					eif
   433 A214 A5 04			lda :eax
   434 A216 85 5A			sta TMP
   435 A218 A5 05			lda :eax+1
   436 A21A 85 5B			sta TMP+1
   437 A21C A5 5A			lda TMP
   438 A21E 18 65 54			add T0B
   439 A221 85 5A			sta TMP
   440 A223 90 02			scc
   441 A225 E6 5B			inc TMP+1
   442
   443 				; optimize OK (SYS_VIC20), line = 437
   444
   445 A227 85 56			sta SCR
   446 A229 A5 5B			lda TMP+1
   447 A22B 18 69 1C			add #$1C
   448 A22E 85 57			sta SCR+1
   449
   450 				; optimize OK (SYS_VIC20), line = 438
   451
   452 A230 A5 5A			lda TMP
   453 A232 85 58			sta COLMAP
   454 A234 A5 5B			lda TMP+1
   455 A236 18 69 94			add #$94
   456 A239 85 59			sta COLMAP+1
   457
   458 				; ------------------------------------------------------------
   459
   460 = 0008			X	= :EDX
   461 = 000C			Y	= :ECX
   462 A23B			@exit
   463 					.ifdef @new
   464 					lda <@VarData
   465 					sta :ztmp
   466 					lda >@VarData
   467 					ldy #@VarDataSize-1
   468 					jmp @FreeMem
   469 					els
   470 A23B 60				rts						; ret
   471 					eif
   472 				.endl
   473
   474 A23C			.local	PRINT						; PROCEDURE | ASSEMBLER | REGISTER
   475
   476 				; -------------------  ASM Block 00000055  -------------------
   477
   478 A23C A0 00		      ldy #0
   479 A23E B1 0C 85 54		      mva (s),y ZP_0_B
   480 A242 A8 88 E6 0C		      tay:dey:inc s
   481 A246 B1 0C 91 56		@     mva (s),y (scr),y
   482 A24A A5 08 91 58		      mva col (colmap),y
   483 A24E 88			      dey
   484 A24F 10 F5		      bpl @-
   485
   486 				; ------------------------------------------------------------
   487
   488 = 0008			COL	= :EDX
   489 = 000C			S	= :ECX
   490 A251			@exit
   491 					.ifdef @new
   492 					lda <@VarData
   493 					sta :ztmp
   494 					lda >@VarData
   495 					ldy #@VarDataSize-1
   496 					jmp @FreeMem
   497 					els
   498 A251 60				rts						; ret
   499 					eif
   500 				.endl
   501
   502 A252			.local	PUT_CHAR					; PROCEDURE | ASSEMBLER | REGISTER
   503
   504 				; -------------------  ASM Block 00000056  -------------------
   505
   506 A252 A0 00		      ldy #0
   507 A254 A5 0C 91 56		      mva c (scr),y
   508 A258 A5 08 91 58		      mva col (colmap),y
   509
   510 				; ------------------------------------------------------------
   511
   512 = 0008			COL	= :EDX
   513 = 000C			C	= :ECX
   514 A25C			@exit
   515 					.ifdef @new
   516 					lda <@VarData
   517 					sta :ztmp
   518 					lda >@VarData
   519 					ldy #@VarDataSize-1
   520 					jmp @FreeMem
   521 					els
   522 A25C 60				rts						; ret
   523 					eif
   524 				.endl
   525
   526 A25D			.local	UPDATE_COUNTER_2				; PROCEDURE | ASSEMBLER | REGISTER
   527
   528 				; -------------------  ASM Block 00000057  -------------------
   529
   530 A25D F8			      sed
   531
   532 A25E A0 00		      ldy #0
   533 A260 B1 0C		      lda (counter),y
   534 A262 18 65 08		      add v
   535 A265 91 0C		      sta (counter),y
   536
   537 A267 D8			      cld
   538
   539 A268 A0 00		      ldy #0
   540 A26A B1 0C		      lda (counter),y
   541 A26C 48			      pha
   542 A26D 29 0F		      and #%00001111
   543 A26F 09 30		      ora #%00110000
   544 A271 A0 03		      ldy #3
   545 A273 91 04		      sta (scr_counter),y
   546 A275 68			      pla
   547 A276 4A 4A 4A 4A		:4    lsr
   548 A27A 09 30		      ora #%00110000
   549 A27C 88			      dey
   550 A27D 91 04		      sta (scr_counter),y
   551
   552 				; ------------------------------------------------------------
   553
   554 = 0008			V	= :EDX
   555 = 000C			COUNTER	= :ECX
   556 = 0004			SCR_COUNTER	= :EAX
   557 A27F			@exit
   558 					.ifdef @new
   559 					lda <@VarData
   560 					sta :ztmp
   561 					lda >@VarData
   562 					ldy #@VarDataSize-1
   563 					jmp @FreeMem
   564 					els
   565 A27F 60				rts						; ret
   566 					eif
   567 				.endl
   568
   569 A280			.local	UPDATE_COUNTER_4				; PROCEDURE | ASSEMBLER | REGISTER
   570
   571 				; -------------------  ASM Block 00000058  -------------------
   572
   573 A280 F8			      sed
   574
   575 A281 A0 00		      ldy #0
   576 A283 B1 0C		      lda (counter),y
   577 A285 18 65 08		      add v
   578 A288 91 0C		      sta (counter),y
   579 A28A 90 08		      bcc @+
   580 A28C C8			      iny
   581 A28D B1 0C		      lda (counter),y
   582 A28F 18 69 01		      add #1
   583 A292 91 0C		      sta (counter),y
   584
   585 A294 D8			@     cld
   586
   587 A295 A0 00		      ldy #0
   588 A297 B1 0C		      lda (counter),y
   589 A299 48			      pha
   590 A29A 29 0F		      and #%00001111
   591 A29C 09 30		      ora #%00110000
   592 A29E A0 03		      ldy #3
   593 A2A0 91 04		      sta (scr_counter),y
   594 A2A2 68			      pla
   595 A2A3 4A 4A 4A 4A		:4    lsr
   596 A2A7 09 30		      ora #%00110000
   597 A2A9 88			      dey
   598 A2AA 91 04		      sta (scr_counter),y
   599
   600 A2AC 88			      dey
   601 A2AD B1 0C		      lda (counter),y
   602 A2AF 29 0F		      and #%00001111
   603 A2B1 09 30		      ora #%00110000
   604 A2B3 91 04		      sta (scr_counter),y
   605 A2B5 B1 0C		      lda (counter),y
   606 A2B7 4A 4A 4A 4A		:4    lsr
   607 A2BB 09 30		      ora #%00110000
   608 A2BD 88			      dey
   609 A2BE 91 04		      sta (scr_counter),y
   610
   611 				; ------------------------------------------------------------
   612
   613 = 0008			V	= :EDX
   614 = 000C			COUNTER	= :ECX
   615 = 0004			SCR_COUNTER	= :EAX
   616 A2C0			@exit
   617 					.ifdef @new
   618 					lda <@VarData
   619 					sta :ztmp
   620 					lda >@VarData
   621 					ldy #@VarDataSize-1
   622 					jmp @FreeMem
   623 					els
   624 A2C0 60				rts						; ret
   625 					eif
   626 				.endl
   627
   628 A2C1			.local	PRND_0112					; PROCEDURE | ASSEMBLER | OVERLOAD
   629
   630 				; -------------------  ASM Block 00000059  -------------------
   631
   632 A2C1 AD 04 90		      lda VICCR4
   633 A2C4 65 60		      adc RTCLOCK
   634 A2C6 4D 27 91		      eor VIA2T1LH
   635 A2C9 4D 26 91		      eor VIA2T1LL
   636 A2CC 4D 14 91		      eor VIA1T1CL
   637 A2CF 4D 15 91		      eor VIA1T1CH
   638 A2D2 85 62		      sta RND
   639
   640 A2D4			@exit
   641 					.ifdef @new
   642 					lda <@VarData
   643 					sta :ztmp
   644 					lda >@VarData
   645 					ldy #@VarDataSize-1
   646 					jmp @FreeMem
   647 					els
   648 A2D4 60				rts						; ret
   649 					eif
   650 				.endl
   651
   652 A2D5			.local	PRND_0113					; PROCEDURE | OVERLOAD | REGISTER
   653
   654 				; optimize FAIL ('PRND_0112', SYS_VIC20), line = 555
   655
   656 A2D5 20 C1 A2			jsr PRND_0112
   657
   658 				; optimize OK (SYS_VIC20), line = 557
   659
   660 A2D8 A5 62			lda RND
   661 A2DA 25 04			and MASK
   662 A2DC 85 54			sta T0B
   663
   664 				; optimize OK (SYS_VIC20), line = 559
   665
   666 A2DE C5 08			cmp A
   667 A2E0 B0 05			jcs l_0137
   668 A2E2 18 65 08			add A
   669 A2E5 85 54			sta T0B
   670 A2E7			l_0137
   671
   672 				; optimize OK (SYS_VIC20), line = 560
   673
   674 A2E7 A5 0C			lda B
   675 A2E9 C5 54			cmp T0B
   676 A2EB B0 08			jcs l_0151
   677
   678 				; --- RepeatUntilProlog
   679 A2ED			l_0153
   680
   681 				; optimize OK (SYS_VIC20), line = 561
   682
   683 A2ED 46 54			lsr T0B
   684
   685 				; optimize OK (SYS_VIC20), line = 562
   686
   687 A2EF A5 0C			lda B
   688 A2F1 C5 54			cmp T0B
   689 A2F3 90 F8			jcc l_0153
   690 A2F5			l_0151
   691
   692 				; optimize OK (SYS_VIC20), line = 564
   693
   694 A2F5 A5 54			lda T0B
   695 A2F7 85 62			sta RND
   696
   697 				; ------------------------------------------------------------
   698
   699 = 0008			A	= :EDX
   700 = 000C			B	= :ECX
   701 = 0004			MASK	= :EAX
   702 A2F9			@exit
   703 					.ifdef @new
   704 					lda <@VarData
   705 					sta :ztmp
   706 					lda >@VarData
   707 					ldy #@VarDataSize-1
   708 					jmp @FreeMem
   709 					els
   710 A2F9 60				rts						; ret
   711 					eif
   712 				.endl
   713
   714 				; ------------------------------------------------------------
   715 				; ------------------------------------------------------------
   716 A2FA			@UnitInit
   717
   718 				; optimize OK (SYS_VIC20), line = 571
   719
   720 A2FA A9 00			lda #$00
   721 A2FC 85 56			sta SCR
   722 A2FE A9 1C			lda #$1C
   723 A300 85 57			sta SCR+1
   724
   725 				; optimize OK (SYS_VIC20), line = 572
   726
   727 A302 A9 00			lda #$00
   728 A304 85 58			sta COLMAP
   729 A306 A9 94			lda #$94
   730 A308 85 59			sta COLMAP+1
   731
   732 A30A 60				rts
   733
   734 				; ------------------------------------------------------------
   735
   736 = 0000			BLACK	= $00
   737 = 0001			WHITE	= $01
   738 = 0002			RED	= $02
   739 = 0003			CYAN	= $03
   740 = 0004			PURPLE	= $04
   741 = 0005			GREEN	= $05
   742 = 0006			BLUE	= $06
   743 = 0007			YELLOW	= $07
   744 = 0008			ORANGE	= $08
   745 = 0009			LIGHT_ORANGE	= $09
   746 = 000A			LIGHT_RED	= $0A
   747 = 000B			LIGHT_CYAN	= $0B
   748 = 000C			LIGHT_PURPLE	= $0C
   749 = 000D			LIGHT_GREEN	= $0D
   750 = 000E			LIGHT_BLUE	= $0E
   751 = 000F			LIGHT_YELLOW	= $0F
   752 = 1000			CHARSET_ADR	= $1000
   753 = 1C00			SCREEN_ADR	= $1C00
   754 = 9400			COLORMAP_ADR	= $9400
   755 = 0019			ROW_SIZE	= $19
   756 = 001E			COL_SIZE	= $1E
   757 = 001F			ROW_MASK	= $1F
   758 = 001F			COL_MASK	= $1F
   759 = 02EE			SCREEN_SIZE	= $02EE
   760 = 0400			CHARSET_SIZE	= $0400
   761 = A000			CART_ADR	= $A000
   762 = 2000			CART_SIZE	= $2000
   763 = 0004			JOY_UP	= $04
   764 = 0008			JOY_DOWN	= $08
   765 = 0010			JOY_LEFT	= $10
   766 = 0080			JOY_RIGHT	= $80
   767 = 0020			JOY_FIRE	= $20
   768 = 10011100		JOY_DIR_MASK	= $10011100
   769 = 0060			RTCLOCK	= $60
   770 = 0061			JOY	= $61
   771 = 0062			RND	= $62
   772 = 0054			ZP_0_B	= $54
   773 = 0055			ZP_1_B	= $55
   774 = 0056			ZP_0_W	= $56
   775 = 0058			ZP_1_W	= $58
   776 = 005A			ZP_2_W	= $5A
   777 = 005C			ZP_3_W	= $5C
   778 = 005E			ZP_0_P	= $5E
   779 = A06C			adr.VIC_DEF	= CODEORIGIN+$0060
   780 A30B			.var VIC_DEF	= adr.VIC_DEF .word
   781 = 5686			PAL_TIMER1	= $5686
   782 = 0092			VBI_START	= $92
   783 = 0314			CINV	= $0314
   784 = 0316			CBINV	= $0316
   785 = 0318			NMINV	= $0318
   786 = 9000			VICCR0	= $9000
   787 = 9001			VICCR1	= $9001
   788 = 9002			VICCR2	= $9002
   789 = 9003			VICCR3	= $9003
   790 = 9004			VICCR4	= $9004
   791 = 9005			VICCR5	= $9005
   792 = 9006			VICCR6	= $9006
   793 = 9007			VICCR7	= $9007
   794 = 9008			VICCR8	= $9008
   795 = 9009			VICCR9	= $9009
   796 = 900A			VICCRA	= $900A
   797 = 900B			VICCRB	= $900B
   798 = 900C			VICCRC	= $900C
   799 = 900D			VICCRD	= $900D
   800 = 900E			VICCRE	= $900E
   801 = 900F			VICCRF	= $900F
   802 = 9110			VIA1PB	= $9110
   803 = 9111			VIA1PA	= $9111
   804 = 9112			VIA1DDRB	= $9112
   805 = 9113			VIA1DDRA	= $9113
   806 = 9114			VIA1T1CL	= $9114
   807 = 9115			VIA1T1CH	= $9115
   808 = 9116			VIA1T1LL	= $9116
   809 = 9117			VIA1T1LH	= $9117
   810 = 9118			VIA1T2CL	= $9118
   811 = 9119			VIA1T2CH	= $9119
   812 = 911A			VIA1SR	= $911A
   813 = 911B			VIA1ACR	= $911B
   814 = 911C			VIA1PCR	= $911C
   815 = 911D			VIA1IFR	= $911D
   816 = 911E			VIA1IER	= $911E
   817 = 911F			VIA1PA2	= $911F
   818 = 9120			VIA2PB	= $9120
   819 = 9121			VIA2PA	= $9121
   820 = 9122			VIA2DDRB	= $9122
   821 = 9123			VIA2DDRA	= $9123
   822 = 9124			VIA2T1CL	= $9124
   823 = 9125			VIA2T1CH	= $9125
   824 = 9126			VIA2T1LL	= $9126
   825 = 9127			VIA2T1LH	= $9127
   826 = 9128			VIA2T2CL	= $9128
   827 = 9129			VIA2T2CH	= $9129
   828 = 912A			VIA2SR	= $912A
   829 = 912B			VIA2ACR	= $912B
   830 = 912C			VIA2PCR	= $912C
   831 = 912D			VIA2IFR	= $912D
   832 = 912E			VIA2IER	= $912E
   833 = 912F			VIA2PA2	= $912F
   834 = 0056			SCR	= $56
   835 = 0058			COLMAP	= $58
   836 = 005A			TMP	= $5A
   837 = 005E			GAME_VBI	= $5E
   838 = 0054			T0B	= $54
   839 = 0055			T1B	= $55
   840
   841 = A30B 6C A0		VIC_DEF
   841 				.endl							; UNIT SYS_VIC20
   842
   843 A30D			.local	WELCOME_SCR					; PROCEDURE | INLINE
   844
   845 					.MACRO m@INLINE
   846 				
   847 				; optimize OK (game.inc), line = 81
   848 				
   849 					lda #$01
   850 					jsr SYS_VIC20.CLRCOL
   851 				
   852 				; optimize OK (game.inc), line = 83
   853 				
   854 					lda #$0C
   855 					sta T0B
   856 					sta T2B
   857 				
   858 				; optimize OK (game.inc), line = 85
   859 				
   860 					lda adr.TXT_INFO
   861 					lsr @
   862 					sta T1B
   863 					lda T0B
   864 					sub T1B
   865 					sta T0B
   866 				
   867 				; optimize OK (game.inc), line = 86
   868 				
   869 					sta SYS_VIC20.SET_XY.X
   870 					lda #$02
   871 					sta SYS_VIC20.SET_XY.Y
   872 					jsr SYS_VIC20.SET_XY
   873 				
   874 				; optimize OK (game.inc), line = 87
   875 				
   876 					lda #$07
   877 					sta SYS_VIC20.PRINT.COL
   878 					lda #$53
   879 					sta SYS_VIC20.PRINT.S
   880 					lda #$A0
   881 					sta SYS_VIC20.PRINT.S+1
   882 					jsr SYS_VIC20.PRINT
   883 				
   884 				; optimize OK (game.inc), line = 89
   885 				
   886 					lda adr.TXT_TURBO
   887 					lsr @
   888 					sta T1B
   889 					lda T2B
   890 					sub T1B
   891 					sta T2B
   892 				
   893 				; optimize OK (game.inc), line = 90
   894 				
   895 					sta SYS_VIC20.SET_XY.X
   896 					lda #$19
   897 					sta SYS_VIC20.SET_XY.Y
   898 					jsr SYS_VIC20.SET_XY
   899 				
   900 				; optimize OK (game.inc), line = 91
   901 				
   902 					lda #$07
   903 					sta SYS_VIC20.PRINT.COL
   904 					lda #$3E
   905 					sta SYS_VIC20.PRINT.S
   906 					lda #$A0
   907 					sta SYS_VIC20.PRINT.S+1
   908 					jsr SYS_VIC20.PRINT
   909 				
   910 				; --- RepeatUntilProlog
   911 				l_01AF
   912 				
   913 				; optimize OK (game.inc), line = 93
   914 				
   915 					lda SYS_VIC20.JOY
   916 					and #$20
   917 					jeq l_01AF
   918 					.ENDM
   919 A30D			@exit
   920 				.endl
   921
   922 A30D			.local	DRAW_FRAME					; PROCEDURE
   923
   924 				; optimize OK (game.inc), line = 102
   925
   926 A30D A9 19			lda #$19
   927 A30F 85 73			sta T0W
   928 A311 A9 1C			lda #$1C
   929 A313 85 74			sta T0W+1
   930 A315 A9 19			lda #$19
   931 A317 85 75			sta T1W
   932 A319 A9 94			lda #$94
   933 A31B 85 76			sta T1W+1
   934
   935 				; optimize OK (game.inc), line = 103
   936
   937 A31D A9 1A			lda #$1A
   938 A31F 85 70			sta I
   939
   940 A321			l_01D5
   941 				; --- ForToDoCondition
   942
   943 				; optimize OK (game.inc), line = 104
   944
   945 A321 A4 74			ldy T0W+1
   946 A323 84 01			sty :bp+1
   947 A325 A4 73			ldy T0W
   948 A327 A9 43			lda #$43
   949 A329 91 00			sta (:bp),y
   950
   951 				; optimize OK (game.inc), line = 105
   952
   953 A32B A4 73 84 02 A4 74 + 	mwy T0W :bp2
   954 A333 A0 18			ldy #$18
   955 A335 A9 42			lda #$42
   956 A337 91 02			sta (:bp2),y
   957
   958 				; optimize OK (game.inc), line = 106
   959
   960 A339 A4 76			ldy T1W+1
   961 A33B 84 01			sty :bp+1
   962 A33D A4 75			ldy T1W
   963 A33F A9 07			lda #$07
   964 A341 91 00			sta (:bp),y
   965
   966 				; optimize OK (game.inc), line = 107
   967
   968 A343 A4 75 84 02 A4 76 + 	mwy T1W :bp2
   969 A34B A0 18			ldy #$18
   970 A34D 91 02			sta (:bp2),y
   971
   972 				; optimize OK (game.inc), line = 108
   973
   974 A34F A5 73			lda T0W
   975 A351 18 69 19			add #$19
   976 A354 85 73			sta T0W
   977 A356 90 02			scc
   978 A358 E6 74			inc T0W+1
   979
   980 				; optimize OK (game.inc), line = 109
   981
   982 A35A A5 75			lda T1W
   983 A35C 18 69 19			add #$19
   984 A35F 85 75			sta T1W
   985 A361 90 02			scc
   986 A363 E6 76			inc T1W+1
   987
   988 				; --- ForToDoEpilog
   989 A365 C6 70			dec I
   990 A367 10 B8			jpl l_01D5
   991 A369			l_01E3
   992
   993 				; optimize OK (game.inc), line = 112
   994
   995 A369 A9 18			lda #$18
   996 A36B 85 70			sta I
   997
   998 A36D			l_020B
   999 				; --- ForToDoCondition
  1000
  1001 				; optimize OK (game.inc), line = 113
  1002
  1003 A36D A4 70			ldy I
  1004 A36F A9 41			lda #$41
  1005 A371 99 00 1C			sta $1C00,y
  1006
  1007 				; optimize OK (game.inc), line = 114
  1008
  1009 A374 99 BC 1E			sta $1EBC,y
  1010
  1011 				; optimize OK (game.inc), line = 115
  1012
  1013 A377 A9 07			lda #$07
  1014 A379 99 00 94			sta $9400,y
  1015
  1016 				; optimize OK (game.inc), line = 116
  1017
  1018 A37C 99 BC 96			sta $96BC,y
  1019
  1020 				; --- ForToDoEpilog
  1021 A37F C6 70			dec I
  1022 A381 10 EA			jpl l_020B
  1023 A383			l_0219
  1024
  1025 				; ------------------------------------------------------------
  1026
  1027 = 0070			I	= $70
  1028 A383			@exit
  1029 					.ifdef @new
  1030 					lda <@VarData
  1031 					sta :ztmp
  1032 					lda >@VarData
  1033 					ldy #@VarDataSize-1
  1034 					jmp @FreeMem
  1035 					els
  1036 A383 60				rts						; ret
  1037 					eif
  1038 				.endl
  1039
  1040 A384			.local	PRESS_FIRE					; PROCEDURE
  1041
  1042 				; optimize OK (game.inc), line = 124
  1043
  1044 A384 A9 19			lda #$19
  1045 A386 38 ED 16 A0			sub adr.TXT_POINTS
  1046 A38A 38 E9 01			sub #$01
  1047 A38D 85 08			sta SYS_VIC20.SET_XY.X
  1048 A38F A9 00			lda #$00
  1049 A391 85 0C			sta SYS_VIC20.SET_XY.Y
  1050 A393 20 01 A2			jsr SYS_VIC20.SET_XY
  1051
  1052 				; optimize OK (game.inc), line = 125
  1053
  1054 A396 A9 01			lda #$01
  1055 A398 85 08			sta SYS_VIC20.PRINT.COL
  1056 A39A A9 32			lda #$32
  1057 A39C 85 0C			sta SYS_VIC20.PRINT.S
  1058 A39E A9 A0			lda #$A0
  1059 A3A0 85 0D			sta SYS_VIC20.PRINT.S+1
  1060 A3A2 20 3C A2			jsr SYS_VIC20.PRINT
  1061
  1062 				; --- RepeatUntilProlog
  1063 A3A5			l_0254
  1064
  1065 				; optimize OK (game.inc), line = 127
  1066
  1067 A3A5 A5 61			lda SYS_VIC20.JOY
  1068 A3A7 29 20			and #$20
  1069 A3A9 F0 FA			jeq l_0254
  1070 A3AB			@exit
  1071 					.ifdef @new
  1072 					lda <@VarData
  1073 					sta :ztmp
  1074 					lda >@VarData
  1075 					ldy #@VarDataSize-1
  1076 					jmp @FreeMem
  1077 					els
  1078 A3AB 60				rts						; ret
  1079 					eif
  1080 				.endl
  1081
  1082 A3AC			.local	PUT_SNAKE					; PROCEDURE
  1083
  1084 				; optimize OK (game.inc), line = 134
  1085
  1086 A3AC A9 44			lda #$44
  1087 A3AE 85 7A			sta HEAD_DIR
  1088
  1089 				; optimize OK (game.inc), line = 135
  1090
  1091 A3B0 85 79			sta TAIL_DIR
  1092
  1093 				; optimize OK (game.inc), line = 136
  1094
  1095 A3B2 A9 83			lda #$83
  1096 A3B4 85 84			sta HEAD_POS
  1097 A3B6 A9 1D			lda #$1D
  1098 A3B8 85 85			sta HEAD_POS+1
  1099
  1100 				; optimize OK (game.inc), line = 137
  1101
  1102 A3BA A9 83			lda #$83
  1103 A3BC 85 86			sta HEAD_POS_COL
  1104 A3BE A9 95			lda #$95
  1105 A3C0 85 87			sta HEAD_POS_COL+1
  1106
  1107 				; optimize OK (game.inc), line = 139
  1108
  1109 A3C2 A4 85			ldy HEAD_POS+1
  1110 A3C4 84 01			sty :bp+1
  1111 A3C6 A4 84			ldy HEAD_POS
  1112 A3C8 A9 48			lda #$48
  1113 A3CA 91 00			sta (:bp),y
  1114 A3CC A4 87			ldy HEAD_POS_COL+1
  1115 A3CE 84 01			sty :bp+1
  1116 A3D0 A4 86			ldy HEAD_POS_COL
  1117 A3D2 A9 01			lda #$01
  1118 A3D4 91 00			sta (:bp),y
  1119
  1120 				; optimize OK (game.inc), line = 141
  1121
  1122 A3D6 A5 84			lda HEAD_POS
  1123 A3D8 85 73			sta T0W
  1124 A3DA A5 85			lda HEAD_POS+1
  1125 A3DC 85 74			sta T0W+1
  1126 A3DE A5 86			lda HEAD_POS_COL
  1127 A3E0 85 75			sta T1W
  1128 A3E2 A5 87			lda HEAD_POS_COL+1
  1129 A3E4 85 76			sta T1W+1
  1130
  1131 				; optimize OK (game.inc), line = 142
  1132
  1133 A3E6 A9 00			lda #$00
  1134 A3E8 85 70			sta T0B
  1135
  1136 A3EA			l_0294
  1137 				; --- ForToDoCondition
  1138
  1139 				; optimize OK (game.inc), line = 143
  1140
  1141 A3EA A5 73			lda T0W
  1142 A3EC 18 69 19			add #$19
  1143 A3EF 85 73			sta T0W
  1144 A3F1 90 02			scc
  1145 A3F3 E6 74			inc T0W+1
  1146 A3F5 A5 75			lda T1W
  1147 A3F7 18 69 19			add #$19
  1148 A3FA 85 75			sta T1W
  1149 A3FC 90 02			scc
  1150 A3FE E6 76			inc T1W+1
  1151
  1152 				; optimize OK (game.inc), line = 144
  1153
  1154 A400 A4 74			ldy T0W+1
  1155 A402 84 01			sty :bp+1
  1156 A404 A4 73			ldy T0W
  1157 A406 A9 4C			lda #$4C
  1158 A408 91 00			sta (:bp),y
  1159 A40A A4 76			ldy T1W+1
  1160 A40C 84 01			sty :bp+1
  1161 A40E A4 75			ldy T1W
  1162 A410 A9 01			lda #$01
  1163 A412 91 00			sta (:bp),y
  1164
  1165 				; --- ForToDoEpilog
  1166 A414 C6 70			dec T0B
  1167 A416 10 D2			jpl l_0294
  1168 A418			l_02A2
  1169
  1170 				; optimize OK (game.inc), line = 147
  1171
  1172 A418 A5 73			lda T0W
  1173 A41A 18 69 19			add #$19
  1174 A41D 85 73			sta T0W
  1175 A41F 90 02			scc
  1176 A421 E6 74			inc T0W+1
  1177 A423 A5 75			lda T1W
  1178 A425 18 69 19			add #$19
  1179 A428 85 75			sta T1W
  1180 A42A 90 02			scc
  1181 A42C E6 76			inc T1W+1
  1182 A42E A5 73			lda T0W
  1183 A430 85 88			sta TAIL_POS
  1184 A432 A5 74			lda T0W+1
  1185 A434 85 89			sta TAIL_POS+1
  1186
  1187 				; optimize OK (game.inc), line = 148
  1188
  1189 A436 85 01			sta :bp+1
  1190 A438 A4 88			ldy TAIL_POS
  1191 A43A A9 44			lda #$44
  1192 A43C 91 00			sta (:bp),y
  1193 A43E A4 76			ldy T1W+1
  1194 A440 84 01			sty :bp+1
  1195 A442 A4 75			ldy T1W
  1196 A444 A9 01			lda #$01
  1197 A446 91 00			sta (:bp),y
  1198
  1199 				; ------------------------------------------------------------
  1200
  1201 A448			@exit
  1202 					.ifdef @new
  1203 					lda <@VarData
  1204 					sta :ztmp
  1205 					lda >@VarData
  1206 					ldy #@VarDataSize-1
  1207 					jmp @FreeMem
  1208 					els
  1209 A448 60				rts						; ret
  1210 					eif
  1211 				.endl
  1212
  1213 A449			.local	DRAW_BOTTOM_LINE				; PROCEDURE
  1214
  1215 				; optimize OK (game.inc), line = 155
  1216
  1217 A449 A9 00			lda #$00
  1218 A44B 85 08			sta SYS_VIC20.SET_XY.X
  1219 A44D A9 1D			lda #$1D
  1220 A44F 85 0C			sta SYS_VIC20.SET_XY.Y
  1221 A451 20 01 A2			jsr SYS_VIC20.SET_XY
  1222
  1223 				; optimize OK (game.inc), line = 156
  1224
  1225 A454 A9 01			lda #$01
  1226 A456 85 08			sta SYS_VIC20.PRINT.COL
  1227 A458 A9 0C			lda #$0C
  1228 A45A 85 0C			sta SYS_VIC20.PRINT.S
  1229 A45C A9 A0			lda #$A0
  1230 A45E 85 0D			sta SYS_VIC20.PRINT.S+1
  1231 A460 20 3C A2			jsr SYS_VIC20.PRINT
  1232
  1233 				; optimize OK (game.inc), line = 158
  1234
  1235 A463 AD 0C A0			lda adr.TXT_LEVEL
  1236 A466 18 69 01			add #$01
  1237 A469 85 08			sta SYS_VIC20.SET_XY.X
  1238 A46B A9 1D			lda #$1D
  1239 A46D 85 0C			sta SYS_VIC20.SET_XY.Y
  1240 A46F 20 01 A2			jsr SYS_VIC20.SET_XY
  1241
  1242 				; optimize OK (game.inc), line = 159
  1243
  1244 A472 A9 01			lda #$01
  1245 A474 85 08			sta SYS_VIC20.PRINT.COL
  1246 A476 A9 23			lda #$23
  1247 A478 85 0C			sta SYS_VIC20.PRINT.S
  1248 A47A A9 A0			lda #$A0
  1249 A47C 85 0D			sta SYS_VIC20.PRINT.S+1
  1250 A47E 20 3C A2			jsr SYS_VIC20.PRINT
  1251
  1252 				; optimize OK (game.inc), line = 161
  1253
  1254 A481 A9 19			lda #$19
  1255 A483 38 ED 16 A0			sub adr.TXT_POINTS
  1256 A487 85 08			sta SYS_VIC20.SET_XY.X
  1257 A489 A9 1D			lda #$1D
  1258 A48B 85 0C			sta SYS_VIC20.SET_XY.Y
  1259 A48D 20 01 A2			jsr SYS_VIC20.SET_XY
  1260
  1261 				; optimize OK (game.inc), line = 162
  1262
  1263 A490 A9 01			lda #$01
  1264 A492 85 08			sta SYS_VIC20.PRINT.COL
  1265 A494 A9 16			lda #$16
  1266 A496 85 0C			sta SYS_VIC20.PRINT.S
  1267 A498 A9 A0			lda #$A0
  1268 A49A 85 0D			sta SYS_VIC20.PRINT.S+1
  1269 A49C 20 3C A2			jsr SYS_VIC20.PRINT
  1270 A49F			@exit
  1271 					.ifdef @new
  1272 					lda <@VarData
  1273 					sta :ztmp
  1274 					lda >@VarData
  1275 					ldy #@VarDataSize-1
  1276 					jmp @FreeMem
  1277 					els
  1278 A49F 60				rts						; ret
  1279 					eif
  1280 				.endl
  1281
  1282 A4A0			.local	PRINT_HI_SCORE					; PROCEDURE
  1283
  1284 				; optimize OK (game.inc), line = 169
  1285
  1286 A4A0 A9 02			lda #$02
  1287 A4A2 85 08			sta SYS_VIC20.SET_XY.X
  1288 A4A4 A9 00			lda #$00
  1289 A4A6 85 0C			sta SYS_VIC20.SET_XY.Y
  1290 A4A8 20 01 A2			jsr SYS_VIC20.SET_XY
  1291
  1292 				; optimize OK (game.inc), line = 170
  1293
  1294 A4AB A9 01			lda #$01
  1295 A4AD 85 08			sta SYS_VIC20.PRINT.COL
  1296 A4AF A9 29			lda #$29
  1297 A4B1 85 0C			sta SYS_VIC20.PRINT.S
  1298 A4B3 A9 A0			lda #$A0
  1299 A4B5 85 0D			sta SYS_VIC20.PRINT.S+1
  1300 A4B7 20 3C A2			jsr SYS_VIC20.PRINT
  1301
  1302 				; optimize OK (game.inc), line = 171
  1303
  1304 A4BA A9 00			lda #$00
  1305 A4BC 85 08			sta SYS_VIC20.UPDATE_COUNTER_4.V
  1306 A4BE A9 82			lda #$82
  1307 A4C0 85 0C			sta SYS_VIC20.UPDATE_COUNTER_4.COUNTER
  1308 A4C2 A9 00			lda #$00
  1309 A4C4 85 0D			sta SYS_VIC20.UPDATE_COUNTER_4.COUNTER+1
  1310 A4C6 A9 05			lda #$05
  1311 A4C8 85 04			sta SYS_VIC20.UPDATE_COUNTER_4.SCR_COUNTER
  1312 A4CA A9 1C			lda #$1C
  1313 A4CC 85 05			sta SYS_VIC20.UPDATE_COUNTER_4.SCR_COUNTER+1
  1314 A4CE 20 80 A2			jsr SYS_VIC20.UPDATE_COUNTER_4
  1315 A4D1			@exit
  1316 					.ifdef @new
  1317 					lda <@VarData
  1318 					sta :ztmp
  1319 					lda >@VarData
  1320 					ldy #@VarDataSize-1
  1321 					jmp @FreeMem
  1322 					els
  1323 A4D1 60				rts						; ret
  1324 					eif
  1325 				.endl
  1326
  1327 A4D2			.local	HALL_OF_FAME					; PROCEDURE
  1328
  1329 				; optimize OK (game.inc), line = 178
  1330
  1331 A4D2 A5 83			lda HI_SCORE_BCD+1
  1332 A4D4 C5 81			cmp SCORE_BCD+1
  1333 A4D6 D0 04			bne @+
  1334 A4D8 A5 82			lda HI_SCORE_BCD
  1335 A4DA C5 80			cmp SCORE_BCD
  1336 				@
  1337 A4DC B0 08			jcs l_0300
  1338 A4DE A5 80			lda SCORE_BCD
  1339 A4E0 85 82			sta HI_SCORE_BCD
  1340 A4E2 A5 81			lda SCORE_BCD+1
  1341 A4E4 85 83			sta HI_SCORE_BCD+1
  1342 A4E6			l_0300
  1343
  1344 				; optimize FAIL ('PRINT_HI_SCORE', game.inc), line = 179
  1345
  1346 A4E6 20 A0 A4			jsr PRINT_HI_SCORE
  1347 A4E9			@exit
  1348 					.ifdef @new
  1349 					lda <@VarData
  1350 					sta :ztmp
  1351 					lda >@VarData
  1352 					ldy #@VarDataSize-1
  1353 					jmp @FreeMem
  1354 					els
  1355 A4E9 60				rts						; ret
  1356 					eif
  1357 				.endl
  1358
  1359 A4EA			.local	MOVE_TAIL					; PROCEDURE
  1360
  1361 				; optimize OK (game.inc), line = 186
  1362
  1363 A4EA A4 89			ldy TAIL_POS+1
  1364 A4EC 84 01			sty :bp+1
  1365 A4EE A4 88			ldy TAIL_POS
  1366 A4F0 A9 20			lda #$20
  1367 A4F2 91 00			sta (:bp),y
  1368
  1369 				; optimize OK (game.inc), line = 188
  1370
  1371 A4F4 A5 79			lda TAIL_DIR
  1372 A4F6 8D BF A9			sta @CASETMP_0003
  1373 A4F9 C9 44			cmp #$44
  1374 A4FB D0 0E			jne l_031C
  1375 				@
  1376
  1377 				; optimize OK (game.inc), line = 189
  1378
  1379 A4FD A5 88			lda TAIL_POS
  1380 A4FF 38 E9 19			sub #$19
  1381 A502 85 88			sta TAIL_POS
  1382 A504 B0 02			scs
  1383 A506 C6 89			dec TAIL_POS+1
  1384
  1385 A508 4C 36 A5			jmp a_0003
  1386 A50B			l_031C
  1387 A50B C9 45			cmp #$45
  1388 A50D D0 0E			jne l_0326
  1389 				@
  1390
  1391 				; optimize OK (game.inc), line = 190
  1392
  1393 A50F A5 88			lda TAIL_POS
  1394 A511 18 69 19			add #$19
  1395 A514 85 88			sta TAIL_POS
  1396 A516 90 02			scc
  1397 A518 E6 89			inc TAIL_POS+1
  1398
  1399 A51A 4C 36 A5			jmp a_0003
  1400 A51D			l_0326
  1401 A51D C9 46			cmp #$46
  1402 A51F D0 09			jne l_0330
  1403 				@
  1404
  1405 				; optimize FAIL (0, game.inc), line = 191
  1406
  1407 A521 E6 88			inc TAIL_POS
  1408 A523 D0 02			sne
  1409 A525 E6 89			inc TAIL_POS+1
  1410
  1411 A527 4C 36 A5			jmp a_0003
  1412 A52A			l_0330
  1413 A52A C9 47			cmp #$47
  1414 A52C D0 08			jne l_033D
  1415 				@
  1416
  1417 				; optimize FAIL (0, game.inc), line = 192
  1418
  1419 A52E A5 88			lda TAIL_POS
  1420 A530 D0 02			bne @+
  1421 A532 C6 89			dec TAIL_POS+1
  1422 				@
  1423 A534 C6 88			dec TAIL_POS
  1424
  1425 A536			l_033D
  1426 A536			a_0003
  1427
  1428 				; optimize OK (game.inc), line = 195
  1429
  1430 A536 A4 89			ldy TAIL_POS+1
  1431 A538 84 01			sty :bp+1
  1432 A53A A4 88			ldy TAIL_POS
  1433 A53C B1 00			lda (:bp),y
  1434 A53E 85 70			sta T0B
  1435
  1436 				; optimize OK (game.inc), line = 197
  1437
  1438 A540 A5 79			lda TAIL_DIR
  1439 A542 8D C0 A9			sta @CASETMP_0004
  1440 A545 C9 44			cmp #$44
  1441 A547 D0 26			jne l_035A
  1442 				@
  1443
  1444 				; optimize OK (game.inc), line = 199
  1445
  1446 A549 A5 70			lda T0B
  1447 A54B 8D C1 A9			sta @CASETMP_0005
  1448 A54E C9 4C			cmp #$4C
  1449 A550 D0 07			jne l_0365
  1450 				@
  1451
  1452 				; optimize OK (game.inc), line = 200
  1453
  1454 A552 A9 44			lda #$44
  1455 A554 85 79			sta TAIL_DIR
  1456
  1457 A556 4C 6C A5			jmp a_0005
  1458 A559			l_0365
  1459 A559 C9 50			cmp #$50
  1460 A55B D0 07			jne l_0372
  1461 				@
  1462
  1463 				; optimize OK (game.inc), line = 201
  1464
  1465 A55D A9 47			lda #$47
  1466 A55F 85 79			sta TAIL_DIR
  1467
  1468 A561 4C 6C A5			jmp a_0005
  1469 A564			l_0372
  1470 A564 C9 51			cmp #$51
  1471 A566 D0 04			jne l_037F
  1472 				@
  1473
  1474 				; optimize OK (game.inc), line = 202
  1475
  1476 A568 A9 46			lda #$46
  1477 A56A 85 79			sta TAIL_DIR
  1478
  1479 A56C			l_037F
  1480 A56C			a_0005
  1481
  1482 A56C 4C EA A5			jmp a_0004
  1483 A56F			l_035A
  1484 A56F C9 45			cmp #$45
  1485 A571 D0 26			jne l_0393
  1486 				@
  1487
  1488 				; optimize OK (game.inc), line = 206
  1489
  1490 A573 A5 70			lda T0B
  1491 A575 8D C2 A9			sta @CASETMP_0006
  1492 A578 C9 4C			cmp #$4C
  1493 A57A D0 07			jne l_039E
  1494 				@
  1495
  1496 				; optimize OK (game.inc), line = 207
  1497
  1498 A57C A9 45			lda #$45
  1499 A57E 85 79			sta TAIL_DIR
  1500
  1501 A580 4C 96 A5			jmp a_0006
  1502 A583			l_039E
  1503 A583 C9 4E			cmp #$4E
  1504 A585 D0 07			jne l_03AB
  1505 				@
  1506
  1507 				; optimize OK (game.inc), line = 208
  1508
  1509 A587 A9 47			lda #$47
  1510 A589 85 79			sta TAIL_DIR
  1511
  1512 A58B 4C 96 A5			jmp a_0006
  1513 A58E			l_03AB
  1514 A58E C9 4F			cmp #$4F
  1515 A590 D0 04			jne l_03B8
  1516 				@
  1517
  1518 				; optimize OK (game.inc), line = 209
  1519
  1520 A592 A9 46			lda #$46
  1521 A594 85 79			sta TAIL_DIR
  1522
  1523 A596			l_03B8
  1524 A596			a_0006
  1525
  1526 A596 4C EA A5			jmp a_0004
  1527 A599			l_0393
  1528 A599 C9 46			cmp #$46
  1529 A59B D0 26			jne l_03CC
  1530 				@
  1531
  1532 				; optimize OK (game.inc), line = 213
  1533
  1534 A59D A5 70			lda T0B
  1535 A59F 8D C3 A9			sta @CASETMP_0007
  1536 A5A2 C9 4D			cmp #$4D
  1537 A5A4 D0 07			jne l_03D7
  1538 				@
  1539
  1540 				; optimize OK (game.inc), line = 214
  1541
  1542 A5A6 A9 46			lda #$46
  1543 A5A8 85 79			sta TAIL_DIR
  1544
  1545 A5AA 4C C0 A5			jmp a_0007
  1546 A5AD			l_03D7
  1547 A5AD C9 4E			cmp #$4E
  1548 A5AF D0 07			jne l_03E4
  1549 				@
  1550
  1551 				; optimize OK (game.inc), line = 215
  1552
  1553 A5B1 A9 44			lda #$44
  1554 A5B3 85 79			sta TAIL_DIR
  1555
  1556 A5B5 4C C0 A5			jmp a_0007
  1557 A5B8			l_03E4
  1558 A5B8 C9 50			cmp #$50
  1559 A5BA D0 04			jne l_03F1
  1560 				@
  1561
  1562 				; optimize OK (game.inc), line = 216
  1563
  1564 A5BC A9 45			lda #$45
  1565 A5BE 85 79			sta TAIL_DIR
  1566
  1567 A5C0			l_03F1
  1568 A5C0			a_0007
  1569
  1570 A5C0 4C EA A5			jmp a_0004
  1571 A5C3			l_03CC
  1572 A5C3 C9 47			cmp #$47
  1573 A5C5 D0 23			jne l_0405
  1574 				@
  1575
  1576 				; optimize OK (game.inc), line = 220
  1577
  1578 A5C7 A5 70			lda T0B
  1579 A5C9 8D C4 A9			sta @CASETMP_0008
  1580 A5CC C9 4D			cmp #$4D
  1581 A5CE D0 07			jne l_0410
  1582 				@
  1583
  1584 				; optimize OK (game.inc), line = 221
  1585
  1586 A5D0 A9 47			lda #$47
  1587 A5D2 85 79			sta TAIL_DIR
  1588
  1589 A5D4 4C EA A5			jmp a_0008
  1590 A5D7			l_0410
  1591 A5D7 C9 4F			cmp #$4F
  1592 A5D9 D0 07			jne l_041D
  1593 				@
  1594
  1595 				; optimize OK (game.inc), line = 222
  1596
  1597 A5DB A9 44			lda #$44
  1598 A5DD 85 79			sta TAIL_DIR
  1599
  1600 A5DF 4C EA A5			jmp a_0008
  1601 A5E2			l_041D
  1602 A5E2 C9 51			cmp #$51
  1603 A5E4 D0 04			jne l_042A
  1604 				@
  1605
  1606 				; optimize OK (game.inc), line = 223
  1607
  1608 A5E6 A9 45			lda #$45
  1609 A5E8 85 79			sta TAIL_DIR
  1610
  1611 A5EA			l_042A
  1612 A5EA			a_0008
  1613
  1614 A5EA			l_0405
  1615 A5EA			a_0004
  1616
  1617 				; optimize OK (game.inc), line = 228
  1618
  1619 A5EA A4 89			ldy TAIL_POS+1
  1620 A5EC 84 01			sty :bp+1
  1621 A5EE A4 88			ldy TAIL_POS
  1622 A5F0 A5 79			lda TAIL_DIR
  1623 A5F2 91 00			sta (:bp),y
  1624
  1625 				; ------------------------------------------------------------
  1626
  1627 = A9BF			@CASETMP_0003	= DATAORIGIN+$0003
  1628 = A9C0			@CASETMP_0004	= DATAORIGIN+$0004
  1629 = A9C1			@CASETMP_0005	= DATAORIGIN+$0005
  1630 = A9C2			@CASETMP_0006	= DATAORIGIN+$0006
  1631 = A9C3			@CASETMP_0007	= DATAORIGIN+$0007
  1632 = A9C4			@CASETMP_0008	= DATAORIGIN+$0008
  1633
  1634 = A9BF			@VarData	= @CASETMP_0003
  1635 = 0006			@VarDataSize	= 6
  1636
  1637 A5F4			@exit
  1638 					.ifdef @new
  1639 					lda <@VarData
  1640 					sta :ztmp
  1641 					lda >@VarData
  1642 					ldy #@VarDataSize-1
  1643 					jmp @FreeMem
  1644 					els
  1645 A5F4 60				rts						; ret
  1646 					eif
  1647 				.endl
  1648
  1649 A5F5			.local	UPDATE_SNAKE					; PROCEDURE
  1650
  1651 				; optimize OK (game.inc), line = 235
  1652
  1653 A5F5 A0 00			ldy #$00
  1654 A5F7 A5 8C			lda SNAKE.M
  1655 A5F9 10 01			spl
  1656 A5FB 88				dey
  1657 A5FC 18 65 84			add HEAD_POS
  1658 A5FF 85 73			sta T0W
  1659 A601 98				tya
  1660 A602 65 85			adc HEAD_POS+1
  1661 A604 85 74			sta T0W+1
  1662
  1663 				; optimize OK (game.inc), line = 236
  1664
  1665 A606 85 01			sta :bp+1
  1666 A608 A4 73			ldy T0W
  1667 A60A B1 00			lda (:bp),y
  1668 A60C 85 75			sta T1W
  1669 A60E A9 00			lda #$00
  1670 A610 85 76			sta T1W+1
  1671
  1672 				; optimize OK (game.inc), line = 238
  1673
  1674 A612 D0 04			bne @+
  1675 A614 A5 75			lda T1W
  1676 A616 C9 20			cmp #$20
  1677 				@
  1678 A618 F0 0D			jeq l_0474x
  1679 A61A A5 76			lda T1W+1
  1680 A61C D0 04			bne @+
  1681 A61E A5 75			lda T1W
  1682 A620 C9 40			cmp #$40
  1683 				@
  1684 A622 F0 03 4C AD A6		jne l_0474
  1685 A627			l_0474x
  1686
  1687 				; optimize OK (game.inc), line = 240
  1688
  1689 A627 A5 76			lda T1W+1
  1690 A629 D0 04			bne @+
  1691 A62B A5 75			lda T1W
  1692 A62D C9 40			cmp #$40
  1693 				@
  1694 A62F D0 3F			jne l_0486
  1695
  1696 				; optimize OK (game.inc), line = 241
  1697
  1698 A631 A9 00			lda #$00
  1699 A633 85 8D			sta FRUIT_ON_BOARD
  1700
  1701 				; optimize OK (game.inc), line = 243
  1702
  1703 A635 A9 10			lda #$10
  1704 A637 85 08			sta SYS_VIC20.UPDATE_COUNTER_4.V
  1705 A639 A9 80			lda #$80
  1706 A63B 85 0C			sta SYS_VIC20.UPDATE_COUNTER_4.COUNTER
  1707 A63D A9 00			lda #$00
  1708 A63F 85 0D			sta SYS_VIC20.UPDATE_COUNTER_4.COUNTER+1
  1709 A641 A9 EA			lda #$EA
  1710 A643 85 04			sta SYS_VIC20.UPDATE_COUNTER_4.SCR_COUNTER
  1711 A645 A9 1E			lda #$1E
  1712 A647 85 05			sta SYS_VIC20.UPDATE_COUNTER_4.SCR_COUNTER+1
  1713 A649 20 80 A2			jsr SYS_VIC20.UPDATE_COUNTER_4
  1714
  1715 				; optimize FAIL (0, game.inc), line = 245
  1716
  1717 A64C C6 7B			dec LEVEL_UP
  1718
  1719 				; optimize OK (game.inc), line = 246
  1720
  1721 A64E D0 1D			jne l_04A5
  1722
  1723 				; optimize FAIL (0, game.inc), line = 247
  1724
  1725 A650 E6 7F			inc LEVEL
  1726
  1727 				; optimize OK (game.inc), line = 248
  1728
  1729 A652 A9 01			lda #$01
  1730 A654 85 08			sta SYS_VIC20.UPDATE_COUNTER_2.V
  1731 A656 A9 7E			lda #$7E
  1732 A658 85 0C			sta SYS_VIC20.UPDATE_COUNTER_2.COUNTER
  1733 A65A A9 00			lda #$00
  1734 A65C 85 0D			sta SYS_VIC20.UPDATE_COUNTER_2.COUNTER+1
  1735 A65E A9 D9			lda #$D9
  1736 A660 85 04			sta SYS_VIC20.UPDATE_COUNTER_2.SCR_COUNTER
  1737 A662 A9 1E			lda #$1E
  1738 A664 85 05			sta SYS_VIC20.UPDATE_COUNTER_2.SCR_COUNTER+1
  1739 A666 20 5D A2			jsr SYS_VIC20.UPDATE_COUNTER_2
  1740
  1741 				; optimize OK (game.inc), line = 249
  1742
  1743 A669 A9 0A			lda #$0A
  1744 A66B 85 7B			sta LEVEL_UP
  1745 A66D			l_04A5
  1746 A66D 4C 73 A6			jmp l_04BD
  1747 A670			l_0486
  1748
  1749 				; optimize FAIL ('MOVE_TAIL', game.inc), line = 253
  1750
  1751 A670 20 EA A4			jsr MOVE_TAIL
  1752 A673			l_04BD
  1753
  1754 				; optimize OK (game.inc), line = 255
  1755
  1756 A673 A4 85			ldy HEAD_POS+1
  1757 A675 84 01			sty :bp+1
  1758 A677 A4 84			ldy HEAD_POS
  1759 A679 A5 8B			lda SNAKE.BODY
  1760 A67B 91 00			sta (:bp),y
  1761
  1762 				; optimize OK (game.inc), line = 257
  1763
  1764 A67D A0 00			ldy #$00
  1765 A67F A5 8C			lda SNAKE.M
  1766 A681 10 01			spl
  1767 A683 88				dey
  1768 A684 18 65 86			add HEAD_POS_COL
  1769 A687 85 86			sta HEAD_POS_COL
  1770 A689 98				tya
  1771 A68A 65 87			adc HEAD_POS_COL+1
  1772 A68C 85 87			sta HEAD_POS_COL+1
  1773
  1774 				; optimize OK (game.inc), line = 258
  1775
  1776 A68E A4 74			ldy T0W+1
  1777 A690 84 01			sty :bp+1
  1778 A692 A4 73			ldy T0W
  1779 A694 A5 8A			lda SNAKE.HEAD
  1780 A696 91 00			sta (:bp),y
  1781
  1782 				; optimize OK (game.inc), line = 259
  1783
  1784 A698 A4 87			ldy HEAD_POS_COL+1
  1785 A69A 84 01			sty :bp+1
  1786 A69C A4 86			ldy HEAD_POS_COL
  1787 A69E A9 01			lda #$01
  1788 A6A0 91 00			sta (:bp),y
  1789
  1790 				; optimize OK (game.inc), line = 260
  1791
  1792 A6A2 A5 73			lda T0W
  1793 A6A4 85 84			sta HEAD_POS
  1794 A6A6 A5 74			lda T0W+1
  1795 A6A8 85 85			sta HEAD_POS+1
  1796 A6AA 4C B1 A6			jmp l_04E7
  1797 A6AD			l_0474
  1798
  1799 				; optimize OK (game.inc), line = 263
  1800
  1801 A6AD A9 01			lda #$01
  1802 A6AF 85 FB			sta GAME_OVER
  1803 A6B1			l_04E7
  1804 A6B1			@exit
  1805 					.ifdef @new
  1806 					lda <@VarData
  1807 					sta :ztmp
  1808 					lda >@VarData
  1809 					ldy #@VarDataSize-1
  1810 					jmp @FreeMem
  1811 					els
  1812 A6B1 60				rts						; ret
  1813 					eif
  1814 				.endl
  1815
  1816 A6B2			.local	MOVE_SNAKE					; PROCEDURE
  1817
  1818 				; optimize OK (game.inc), line = 269
  1819
  1820 A6B2 A5 7A			lda HEAD_DIR
  1821 A6B4 8D C5 A9			sta @CASETMP_0009
  1822 A6B7 C9 44			cmp #$44
  1823 A6B9 D0 0F			jne l_04FA
  1824 				@
  1825
  1826 				; optimize OK (game.inc), line = 270
  1827
  1828 A6BB A9 48			lda #$48
  1829 A6BD 85 8A			sta SNAKE.HEAD
  1830 A6BF A9 4C			lda #$4C
  1831 A6C1 85 8B			sta SNAKE.BODY
  1832 A6C3 A9 E7			lda #$E7
  1833 A6C5 85 8C			sta SNAKE.M
  1834
  1835 A6C7 4C 00 A7			jmp a_0009
  1836 A6CA			l_04FA
  1837 A6CA C9 45			cmp #$45
  1838 A6CC D0 0F			jne l_050F
  1839 				@
  1840
  1841 				; optimize OK (game.inc), line = 271
  1842
  1843 A6CE A9 49			lda #$49
  1844 A6D0 85 8A			sta SNAKE.HEAD
  1845 A6D2 A9 4C			lda #$4C
  1846 A6D4 85 8B			sta SNAKE.BODY
  1847 A6D6 A9 19			lda #$19
  1848 A6D8 85 8C			sta SNAKE.M
  1849
  1850 A6DA 4C 00 A7			jmp a_0009
  1851 A6DD			l_050F
  1852 A6DD C9 46			cmp #$46
  1853 A6DF D0 0F			jne l_0524
  1854 				@
  1855
  1856 				; optimize OK (game.inc), line = 272
  1857
  1858 A6E1 A9 4B			lda #$4B
  1859 A6E3 85 8A			sta SNAKE.HEAD
  1860 A6E5 A9 4D			lda #$4D
  1861 A6E7 85 8B			sta SNAKE.BODY
  1862 A6E9 A9 01			lda #$01
  1863 A6EB 85 8C			sta SNAKE.M
  1864
  1865 A6ED 4C 00 A7			jmp a_0009
  1866 A6F0			l_0524
  1867 A6F0 C9 47			cmp #$47
  1868 A6F2 D0 0C			jne l_0539
  1869 				@
  1870
  1871 				; optimize OK (game.inc), line = 273
  1872
  1873 A6F4 A9 4A			lda #$4A
  1874 A6F6 85 8A			sta SNAKE.HEAD
  1875 A6F8 A9 4D			lda #$4D
  1876 A6FA 85 8B			sta SNAKE.BODY
  1877 A6FC A9 FF			lda #$FF
  1878 A6FE 85 8C			sta SNAKE.M
  1879
  1880 A700			l_0539
  1881 A700			a_0009
  1882
  1883 				; optimize FAIL ('UPDATE_SNAKE', game.inc), line = 276
  1884
  1885 A700 20 F5 A5			jsr UPDATE_SNAKE
  1886
  1887 				; ------------------------------------------------------------
  1888
  1889 = A9C5			@CASETMP_0009	= DATAORIGIN+$0009
  1890
  1891 = A9C5			@VarData	= @CASETMP_0009
  1892 = 0001			@VarDataSize	= 1
  1893
  1894 A703			@exit
  1895 					.ifdef @new
  1896 					lda <@VarData
  1897 					sta :ztmp
  1898 					lda >@VarData
  1899 					ldy #@VarDataSize-1
  1900 					jmp @FreeMem
  1901 					els
  1902 A703 60				rts						; ret
  1903 					eif
  1904 				.endl
  1905
  1906 A704			.local	JOY_HANDLER					; PROCEDURE
  1907
  1908 				; optimize OK (game.inc), line = 283
  1909
  1910 A704 A9 00			lda #$00
  1911 A706 85 8B			sta SNAKE.BODY
  1912
  1913 				; optimize OK (game.inc), line = 285
  1914
  1915 A708 A5 61			lda SYS_VIC20.JOY
  1916 A70A 29 04			and #$04
  1917 A70C F0 2D			jeq l_0578
  1918 A70E A5 7A			lda HEAD_DIR
  1919 A710 C9 45			cmp #$45
  1920 A712 F0 27			jeq l_0578
  1921
  1922 				; optimize OK (game.inc), line = 286
  1923
  1924 A714 A9 48			lda #$48
  1925 A716 85 8A			sta SNAKE.HEAD
  1926 A718 A9 E7			lda #$E7
  1927 A71A 85 8C			sta SNAKE.M
  1928
  1929 				; optimize OK (game.inc), line = 287
  1930
  1931 A71C A5 7A			lda HEAD_DIR
  1932 A71E 8D C6 A9			sta @CASETMP_000A
  1933 A721 C9 47			cmp #$47
  1934 A723 D0 07			jne l_058C
  1935 				@
  1936
  1937 				; optimize OK (game.inc), line = 288
  1938
  1939 A725 A9 4F			lda #$4F
  1940 A727 85 8B			sta SNAKE.BODY
  1941
  1942 A729 4C 34 A7			jmp a_000A
  1943 A72C			l_058C
  1944 A72C C9 46			cmp #$46
  1945 A72E D0 04			jne l_0599
  1946 				@
  1947
  1948 				; optimize OK (game.inc), line = 289
  1949
  1950 A730 A9 4E			lda #$4E
  1951 A732 85 8B			sta SNAKE.BODY
  1952
  1953 A734			l_0599
  1954 A734			a_000A
  1955
  1956 				; optimize OK (game.inc), line = 291
  1957
  1958 A734 A9 44			lda #$44
  1959 A736 85 7A			sta HEAD_DIR
  1960 A738 4C CF A7			jmp l_05B0
  1961 A73B			l_0578
  1962
  1963 				; optimize OK (game.inc), line = 293
  1964
  1965 A73B A5 61			lda SYS_VIC20.JOY
  1966 A73D 29 08			and #$08
  1967 A73F F0 2D			jeq l_05D2
  1968 A741 A5 7A			lda HEAD_DIR
  1969 A743 C9 44			cmp #$44
  1970 A745 F0 27			jeq l_05D2
  1971
  1972 				; optimize OK (game.inc), line = 294
  1973
  1974 A747 A9 49			lda #$49
  1975 A749 85 8A			sta SNAKE.HEAD
  1976 A74B A9 19			lda #$19
  1977 A74D 85 8C			sta SNAKE.M
  1978
  1979 				; optimize OK (game.inc), line = 295
  1980
  1981 A74F A5 7A			lda HEAD_DIR
  1982 A751 8D C7 A9			sta @CASETMP_000B
  1983 A754 C9 47			cmp #$47
  1984 A756 D0 07			jne l_05E6
  1985 				@
  1986
  1987 				; optimize OK (game.inc), line = 296
  1988
  1989 A758 A9 51			lda #$51
  1990 A75A 85 8B			sta SNAKE.BODY
  1991
  1992 A75C 4C 67 A7			jmp a_000B
  1993 A75F			l_05E6
  1994 A75F C9 46			cmp #$46
  1995 A761 D0 04			jne l_05F3
  1996 				@
  1997
  1998 				; optimize OK (game.inc), line = 297
  1999
  2000 A763 A9 50			lda #$50
  2001 A765 85 8B			sta SNAKE.BODY
  2002
  2003 A767			l_05F3
  2004 A767			a_000B
  2005
  2006 				; optimize OK (game.inc), line = 299
  2007
  2008 A767 A9 45			lda #$45
  2009 A769 85 7A			sta HEAD_DIR
  2010 A76B 4C CF A7			jmp l_060A
  2011 A76E			l_05D2
  2012
  2013 				; optimize OK (game.inc), line = 301
  2014
  2015 A76E A5 61			lda SYS_VIC20.JOY
  2016 A770 10 2D			jpl l_062C
  2017 A772 A5 7A			lda HEAD_DIR
  2018 A774 C9 47			cmp #$47
  2019 A776 F0 27			jeq l_062C
  2020
  2021 				; optimize OK (game.inc), line = 302
  2022
  2023 A778 A9 4B			lda #$4B
  2024 A77A 85 8A			sta SNAKE.HEAD
  2025 A77C A9 01			lda #$01
  2026 A77E 85 8C			sta SNAKE.M
  2027
  2028 				; optimize OK (game.inc), line = 303
  2029
  2030 A780 A5 7A			lda HEAD_DIR
  2031 A782 8D C8 A9			sta @CASETMP_000C
  2032 A785 C9 44			cmp #$44
  2033 A787 D0 07			jne l_0640
  2034 				@
  2035
  2036 				; optimize OK (game.inc), line = 304
  2037
  2038 A789 A9 51			lda #$51
  2039 A78B 85 8B			sta SNAKE.BODY
  2040
  2041 A78D 4C 98 A7			jmp a_000C
  2042 A790			l_0640
  2043 A790 C9 45			cmp #$45
  2044 A792 D0 04			jne l_064D
  2045 				@
  2046
  2047 				; optimize OK (game.inc), line = 305
  2048
  2049 A794 A9 4F			lda #$4F
  2050 A796 85 8B			sta SNAKE.BODY
  2051
  2052 A798			l_064D
  2053 A798			a_000C
  2054
  2055 				; optimize OK (game.inc), line = 307
  2056
  2057 A798 A9 46			lda #$46
  2058 A79A 85 7A			sta HEAD_DIR
  2059 A79C 4C CF A7			jmp l_0664
  2060 A79F			l_062C
  2061
  2062 				; optimize OK (game.inc), line = 309
  2063
  2064 A79F A5 61			lda SYS_VIC20.JOY
  2065 A7A1 29 10			and #$10
  2066 A7A3 F0 2A			jeq l_0686
  2067 A7A5 A5 7A			lda HEAD_DIR
  2068 A7A7 C9 46			cmp #$46
  2069 A7A9 F0 24			jeq l_0686
  2070
  2071 				; optimize OK (game.inc), line = 310
  2072
  2073 A7AB A9 4A			lda #$4A
  2074 A7AD 85 8A			sta SNAKE.HEAD
  2075 A7AF A9 FF			lda #$FF
  2076 A7B1 85 8C			sta SNAKE.M
  2077
  2078 				; optimize OK (game.inc), line = 311
  2079
  2080 A7B3 A5 7A			lda HEAD_DIR
  2081 A7B5 8D C9 A9			sta @CASETMP_000D
  2082 A7B8 C9 44			cmp #$44
  2083 A7BA D0 07			jne l_069A
  2084 				@
  2085
  2086 				; optimize OK (game.inc), line = 312
  2087
  2088 A7BC A9 50			lda #$50
  2089 A7BE 85 8B			sta SNAKE.BODY
  2090
  2091 A7C0 4C CB A7			jmp a_000D
  2092 A7C3			l_069A
  2093 A7C3 C9 45			cmp #$45
  2094 A7C5 D0 04			jne l_06A7
  2095 				@
  2096
  2097 				; optimize OK (game.inc), line = 313
  2098
  2099 A7C7 A9 4E			lda #$4E
  2100 A7C9 85 8B			sta SNAKE.BODY
  2101
  2102 A7CB			l_06A7
  2103 A7CB			a_000D
  2104
  2105 				; optimize OK (game.inc), line = 315
  2106
  2107 A7CB A9 47			lda #$47
  2108 A7CD 85 7A			sta HEAD_DIR
  2109 A7CF			l_0686
  2110 A7CF			l_0664
  2111 A7CF			l_060A
  2112 A7CF			l_05B0
  2113
  2114 				; optimize OK (game.inc), line = 317
  2115
  2116 A7CF A5 61			lda SYS_VIC20.JOY
  2117 A7D1 29 20			and #$20
  2118 A7D3 F0 06			jeq l_06CD
  2119 A7D5 A5 77			lda SNAKE_SPEED
  2120 A7D7 4A				lsr @
  2121 A7D8 4A				lsr @
  2122 A7D9 85 77			sta SNAKE_SPEED
  2123 A7DB			l_06CD
  2124
  2125 				; optimize OK (game.inc), line = 319
  2126
  2127 A7DB A5 8B			lda SNAKE.BODY
  2128 A7DD F0 07			jeq l_06EC
  2129
  2130 				; optimize OK (game.inc), line = 320
  2131
  2132 A7DF A5 77			lda SNAKE_SPEED
  2133 A7E1 85 78			sta SNAKE_SPD_C
  2134
  2135 				; optimize FAIL ('UPDATE_SNAKE', game.inc), line = 321
  2136
  2137 A7E3 20 F5 A5			jsr UPDATE_SNAKE
  2138 A7E6			l_06EC
  2139
  2140 				; ------------------------------------------------------------
  2141
  2142 = A9C6			@CASETMP_000A	= DATAORIGIN+$000A
  2143 = A9C7			@CASETMP_000B	= DATAORIGIN+$000B
  2144 = A9C8			@CASETMP_000C	= DATAORIGIN+$000C
  2145 = A9C9			@CASETMP_000D	= DATAORIGIN+$000D
  2146
  2147 = A9C6			@VarData	= @CASETMP_000A
  2148 = 0004			@VarDataSize	= 4
  2149
  2150 A7E6			@exit
  2151 					.ifdef @new
  2152 					lda <@VarData
  2153 					sta :ztmp
  2154 					lda >@VarData
  2155 					ldy #@VarDataSize-1
  2156 					jmp @FreeMem
  2157 					els
  2158 A7E6 60				rts						; ret
  2159 					eif
  2160 				.endl
  2161
  2162 A7E7			.local	PUT_FRUIT					; PROCEDURE
  2163
  2164 				; optimize OK (game.inc), line = 329
  2165
  2166 A7E7 A9 01			lda #$01
  2167 A7E9 85 08			sta SYS_VIC20.PRND_0113.A
  2168 A7EB A9 18			lda #$18
  2169 A7ED 85 0C			sta SYS_VIC20.PRND_0113.B
  2170 A7EF A9 1F			lda #$1F
  2171 A7F1 85 04			sta SYS_VIC20.PRND_0113.MASK
  2172 A7F3 20 D5 A2			jsr SYS_VIC20.PRND_0113
  2173 A7F6 A5 62			lda SYS_VIC20.RND
  2174 A7F8 85 70			sta T0B
  2175
  2176 				; optimize OK (game.inc), line = 330
  2177
  2178 A7FA A9 01			lda #$01
  2179 A7FC 85 08			sta SYS_VIC20.PRND_0113.A
  2180 A7FE A9 1B			lda #$1B
  2181 A800 85 0C			sta SYS_VIC20.PRND_0113.B
  2182 A802 A9 1F			lda #$1F
  2183 A804 85 04			sta SYS_VIC20.PRND_0113.MASK
  2184 A806 20 D5 A2			jsr SYS_VIC20.PRND_0113
  2185 A809 A5 62			lda SYS_VIC20.RND
  2186 A80B 85 71			sta T1B
  2187
  2188 				; optimize OK (game.inc), line = 332
  2189
  2190 A80D 85 0C			sta :ecx
  2191 A80F A9 19			lda #$19
  2192 A811 85 04			sta :eax
  2193 					.ifdef fmulinit
  2194 					fmulu_8
  2195 					els
  2196 A813 20 FC A0			imulCL
  2197 					eif
  2198 A816 A5 04			lda :eax
  2199 A818 85 73			sta T0W
  2200 A81A A5 05			lda :eax+1
  2201 A81C 85 74			sta T0W+1
  2202 A81E 18 69 1C			add #$1C
  2203 A821 85 74			sta T0W+1
  2204 A823 A5 73			lda T0W
  2205 A825 18 65 70			add T0B
  2206 A828 85 73			sta T0W
  2207 A82A 90 02			scc
  2208 A82C E6 74			inc T0W+1
  2209
  2210 				; optimize OK (game.inc), line = 334
  2211
  2212 A82E A4 74			ldy T0W+1
  2213 A830 84 01			sty :bp+1
  2214 A832 A4 73			ldy T0W
  2215 A834 B1 00			lda (:bp),y
  2216 A836 C9 20			cmp #$20
  2217 A838 D0 1A			jne l_072E
  2218
  2219 				; optimize OK (game.inc), line = 335
  2220
  2221 A83A A5 70			lda T0B
  2222 A83C 85 08			sta SYS_VIC20.SET_XY.X
  2223 A83E A5 71			lda T1B
  2224 A840 85 0C			sta SYS_VIC20.SET_XY.Y
  2225 A842 20 01 A2			jsr SYS_VIC20.SET_XY
  2226 A845 A9 05			lda #$05
  2227 A847 85 08			sta SYS_VIC20.PUT_CHAR.COL
  2228 A849 A9 40			lda #$40
  2229 A84B 85 0C			sta SYS_VIC20.PUT_CHAR.C
  2230 A84D 20 52 A2			jsr SYS_VIC20.PUT_CHAR
  2231
  2232 				; optimize OK (game.inc), line = 336
  2233
  2234 A850 A9 01			lda #$01
  2235 A852 85 8D			sta FRUIT_ON_BOARD
  2236 A854			l_072E
  2237 A854			@exit
  2238 					.ifdef @new
  2239 					lda <@VarData
  2240 					sta :ztmp
  2241 					lda >@VarData
  2242 					ldy #@VarDataSize-1
  2243 					jmp @FreeMem
  2244 					els
  2245 A854 60				rts						; ret
  2246 					eif
  2247 				.endl
  2248
  2249 A855			.local	UPDATE_TIME					; PROCEDURE
  2250
  2251 				; optimize FAIL (0, game.inc), line = 344
  2252
  2253 A855 C6 7C			dec TIME_ENTITY
  2254
  2255 				; optimize OK (game.inc), line = 345
  2256
  2257 A857 D0 1B			jne l_0759
  2258
  2259 				; optimize OK (game.inc), line = 346
  2260
  2261 A859 A9 C8			lda #$C8
  2262 A85B 85 7C			sta TIME_ENTITY
  2263
  2264 				; optimize OK (game.inc), line = 347
  2265
  2266 A85D A9 01			lda #$01
  2267 A85F 85 08			sta SYS_VIC20.UPDATE_COUNTER_2.V
  2268 A861 A9 7D			lda #$7D
  2269 A863 85 0C			sta SYS_VIC20.UPDATE_COUNTER_2.COUNTER
  2270 A865 A9 00			lda #$00
  2271 A867 85 0D			sta SYS_VIC20.UPDATE_COUNTER_2.COUNTER+1
  2272 A869 A9 DE			lda #$DE
  2273 A86B 85 04			sta SYS_VIC20.UPDATE_COUNTER_2.SCR_COUNTER
  2274 A86D A9 1E			lda #$1E
  2275 A86F 85 05			sta SYS_VIC20.UPDATE_COUNTER_2.SCR_COUNTER+1
  2276 A871 20 5D A2			jsr SYS_VIC20.UPDATE_COUNTER_2
  2277 A874			l_0759
  2278 A874			@exit
  2279 					.ifdef @new
  2280 					lda <@VarData
  2281 					sta :ztmp
  2282 					lda >@VarData
  2283 					ldy #@VarDataSize-1
  2284 					jmp @FreeMem
  2285 					els
  2286 A874 60				rts						; ret
  2287 					eif
  2288 				.endl
  2289
  2290 A875			.local	SNAKE_STEP					; PROCEDURE
  2291
  2292 				; optimize OK (game.inc), line = 355
  2293
  2294 A875 A9 0E			lda #$0E
  2295 A877 38 E5 7F			sub LEVEL
  2296 A87A 85 77			sta SNAKE_SPEED
  2297
  2298 				; optimize OK (game.inc), line = 356
  2299
  2300 A87C C9 02			cmp #$02
  2301 A87E B0 04			jcs l_0784
  2302 A880 A9 02			lda #$02
  2303 A882 85 77			sta SNAKE_SPEED
  2304 A884			l_0784
  2305
  2306 				; optimize FAIL ('JOY_HANDLER', game.inc), line = 358
  2307
  2308 A884 20 04 A7			jsr JOY_HANDLER
  2309
  2310 				; optimize OK (game.inc), line = 360
  2311
  2312 A887 A5 78			lda SNAKE_SPD_C
  2313 A889 D0 0A			jne l_079E
  2314
  2315 				; optimize FAIL ('MOVE_SNAKE', game.inc), line = 361
  2316
  2317 A88B 20 B2 A6			jsr MOVE_SNAKE
  2318
  2319 				; optimize OK (game.inc), line = 362
  2320
  2321 A88E A5 77			lda SNAKE_SPEED
  2322 A890 85 78			sta SNAKE_SPD_C
  2323 A892 4C 97 A8			jmp l_07AF
  2324 A895			l_079E
  2325
  2326 				; optimize FAIL (0, game.inc), line = 364
  2327
  2328 A895 C6 78			dec SNAKE_SPD_C
  2329 A897			l_07AF
  2330 A897			@exit
  2331 					.ifdef @new
  2332 					lda <@VarData
  2333 					sta :ztmp
  2334 					lda >@VarData
  2335 					ldy #@VarDataSize-1
  2336 					jmp @FreeMem
  2337 					els
  2338 A897 60				rts						; ret
  2339 					eif
  2340 				.endl
  2341
  2342 A898			.local	SET_GAME					; PROCEDURE
  2343
  2344 				; optimize OK (game.inc), line = 371
  2345
  2346 A898 A9 20			lda #$20
  2347 A89A 20 DB A1			jsr SYS_VIC20.CLRSCR
  2348 A89D 20 0D A3			jsr DRAW_FRAME
  2349 A8A0 20 49 A4			jsr DRAW_BOTTOM_LINE
  2350 A8A3 20 AC A3			jsr PUT_SNAKE
  2351 A8A6 20 A0 A4			jsr PRINT_HI_SCORE
  2352
  2353 				; optimize OK (game.inc), line = 373
  2354
  2355 A8A9 A9 C8			lda #$C8
  2356 A8AB 85 7C			sta TIME_ENTITY
  2357
  2358 				; optimize OK (game.inc), line = 374
  2359
  2360 A8AD A9 0A			lda #$0A
  2361 A8AF 85 7B			sta LEVEL_UP
  2362
  2363 				; optimize OK (game.inc), line = 375
  2364
  2365 A8B1 A9 00			lda #$00
  2366 A8B3 85 80			sta SCORE_BCD
  2367 A8B5 85 81			sta SCORE_BCD+1
  2368
  2369 				; optimize OK (game.inc), line = 376
  2370
  2371 A8B7 85 7D			sta TIME_BCD
  2372
  2373 				; optimize OK (game.inc), line = 377
  2374
  2375 A8B9 85 7E			sta LEVEL_BCD
  2376
  2377 				; optimize OK (game.inc), line = 378
  2378
  2379 A8BB 85 7F			sta LEVEL
  2380
  2381 				; optimize OK (game.inc), line = 379
  2382
  2383 A8BD 85 78			sta SNAKE_SPD_C
  2384
  2385 				; optimize OK (game.inc), line = 380
  2386
  2387 A8BF 85 8D			sta FRUIT_ON_BOARD
  2388
  2389 				; optimize OK (game.inc), line = 381
  2390
  2391 A8C1 85 FB			sta GAME_OVER
  2392
  2393 				; optimize OK (game.inc), line = 383
  2394
  2395 A8C3 A9 01			lda #$01
  2396 A8C5 20 CF A1			jsr SYS_VIC20.WAIT_00DC
  2397 A8C8			@exit
  2398 					.ifdef @new
  2399 					lda <@VarData
  2400 					sta :ztmp
  2401 					lda >@VarData
  2402 					ldy #@VarDataSize-1
  2403 					jmp @FreeMem
  2404 					els
  2405 A8C8 60				rts						; ret
  2406 					eif
  2407 				.endl
  2408
  2409 A8C9			.local	RESTART_GAME					; PROCEDURE
  2410
  2411 				; optimize FAIL ('HALL_OF_FAME', game.inc), line = 390
  2412
  2413 A8C9 20 D2 A4			jsr HALL_OF_FAME
  2414
  2415 				; optimize OK (game.inc), line = 391
  2416
  2417 A8CC A9 19			lda #$19
  2418 A8CE 20 CF A1			jsr SYS_VIC20.WAIT_00DC
  2419
  2420 				; optimize FAIL ('PRESS_FIRE', game.inc), line = 392
  2421
  2422 A8D1 20 84 A3			jsr PRESS_FIRE
  2423
  2424 				; optimize FAIL ('SET_GAME', game.inc), line = 393
  2425
  2426 A8D4 20 98 A8			jsr SET_GAME
  2427 A8D7			@exit
  2428 					.ifdef @new
  2429 					lda <@VarData
  2430 					sta :ztmp
  2431 					lda >@VarData
  2432 					ldy #@VarDataSize-1
  2433 					jmp @FreeMem
  2434 					els
  2435 A8D7 60				rts						; ret
  2436 					eif
  2437 				.endl
  2438
  2439 A8D8			.local	VBI						; PROCEDURE
  2440
  2441 				; optimize OK (game.inc), line = 400
  2442
  2443 A8D8 A5 FB			lda GAME_OVER
  2444 A8DA D0 17			jne l_07FF
  2445
  2446 				; optimize FAIL ('UPDATE_TIME', game.inc), line = 401
  2447
  2448 A8DC 20 55 A8			jsr UPDATE_TIME
  2449
  2450 				; optimize FAIL ('SNAKE_STEP', game.inc), line = 402
  2451
  2452 A8DF 20 75 A8			jsr SNAKE_STEP
  2453
  2454 				; optimize OK (game.inc), line = 403
  2455
  2456 A8E2 A5 8D			lda FRUIT_ON_BOARD
  2457 A8E4 D0 03			jne l_0811
  2458 A8E6 20 E7 A7			jsr PUT_FRUIT
  2459 A8E9			l_0811
  2460
  2461 				; optimize OK (game.inc), line = 404
  2462
  2463 A8E9 A5 7D			lda TIME_BCD
  2464 A8EB C9 99			cmp #$99
  2465 A8ED D0 04			jne l_0827
  2466 A8EF A9 01			lda #$01
  2467 A8F1 85 FB			sta GAME_OVER
  2468 A8F3			l_0827
  2469 A8F3			l_07FF
  2470 A8F3			@exit
  2471 					.ifdef @new
  2472 					lda <@VarData
  2473 					sta :ztmp
  2474 					lda >@VarData
  2475 					ldy #@VarDataSize-1
  2476 					jmp @FreeMem
  2477 					els
  2478 A8F3 60				rts						; ret
  2479 					eif
  2480 				.endl
  2481
  2482 A8F4			.local	PREPARE						; PROCEDURE
  2483
  2484 				; optimize OK (game.inc), line = 413
  2485
  2486 A8F4 A9 00			lda #$00
  2487 A8F6 85 08			sta SYSTEM.MOVE_00B1.SOURCE
  2488 A8F8 A9 BC			lda #$BC
  2489 A8FA 85 09			sta SYSTEM.MOVE_00B1.SOURCE+1
  2490 A8FC A9 00			lda #$00
  2491 A8FE 85 0C			sta SYSTEM.MOVE_00B1.DEST
  2492 A900 A9 10			lda #$10
  2493 A902 85 0D			sta SYSTEM.MOVE_00B1.DEST+1
  2494 A904 A9 00			lda #$00
  2495 A906 85 04			sta SYSTEM.MOVE_00B1.COUNT
  2496 A908 A9 04			lda #$04
  2497 A90A 85 05			sta SYSTEM.MOVE_00B1.COUNT+1
  2498 A90C				.local +MAIN.SYSTEM.MOVE_00B1
  2499 A90C				m@INLINE
Macro: MAIN.SYSTEM.MOVE_00B1.M@INLINE [Source: vic20.a65]
     4 A90C 20 A7 A0			jsr @move
Source: vic20.a65
  2500 					.endl
  2501
  2502 				; optimize OK (game.inc), line = 414
  2503
  2504 A90F A9 12			lda #$12
  2505 A911 85 08			sta SYSTEM.MOVE_00B1.SOURCE
  2506 A913 A9 B9			lda #$B9
  2507 A915 85 09			sta SYSTEM.MOVE_00B1.SOURCE+1
  2508 A917 A9 00			lda #$00
  2509 A919 85 0C			sta SYSTEM.MOVE_00B1.DEST
  2510 A91B A9 1C			lda #$1C
  2511 A91D 85 0D			sta SYSTEM.MOVE_00B1.DEST+1
  2512 A91F A9 EE			lda #$EE
  2513 A921 85 04			sta SYSTEM.MOVE_00B1.COUNT
  2514 A923 A9 02			lda #$02
  2515 A925 85 05			sta SYSTEM.MOVE_00B1.COUNT+1
  2516 A927				.local +MAIN.SYSTEM.MOVE_00B1
  2517 A927				m@INLINE
Macro: MAIN.SYSTEM.MOVE_00B1.M@INLINE [Source: vic20.a65]
     4 A927 20 A7 A0			jsr @move
Source: vic20.a65
  2518 					.endl
  2519
  2520 				; optimize FAIL ('VBI', game.inc), line = 420
  2521
  2522 A92A 20 D8 A8			jsr VBI
  2523 A92D			@exit
  2524 					.ifdef @new
  2525 					lda <@VarData
  2526 					sta :ztmp
  2527 					lda >@VarData
  2528 					ldy #@VarDataSize-1
  2529 					jmp @FreeMem
  2530 					els
  2531 A92D 60				rts						; ret
  2532 					eif
  2533 				.endl
  2534 A92E			l_0067
  2535
  2536 				; optimize OK (game.inc), line = 426
  2537
  2538 A92E A9 00			lda #$00
  2539 A930 85 FB			sta GAME_OVER
  2540
  2541 				; optimize FAIL ('PREPARE', game.inc), line = 428
  2542
  2543 A932 20 F4 A8			jsr PREPARE
  2544 A935 20 93 A1			jsr SYS_VIC20.SYS_INIT
  2545 A938				.local +MAIN.WELCOME_SCR
  2546 A938				m@INLINE
Macro: MAIN.WELCOME_SCR.M@INLINE [Source: vic20.a65]
     4 A938 A9 01			lda #$01
     5 A93A 20 EE A1			jsr SYS_VIC20.CLRCOL
     9 A93D A9 0C			lda #$0C
    10 A93F 85 70			sta T0B
    11 A941 85 72			sta T2B
    15 A943 AD 53 A0			lda adr.TXT_INFO
    16 A946 4A				lsr @
    17 A947 85 71			sta T1B
    18 A949 A5 70			lda T0B
    19 A94B 38 E5 71			sub T1B
    20 A94E 85 70			sta T0B
    24 A950 85 08			sta SYS_VIC20.SET_XY.X
    25 A952 A9 02			lda #$02
    26 A954 85 0C			sta SYS_VIC20.SET_XY.Y
    27 A956 20 01 A2			jsr SYS_VIC20.SET_XY
    31 A959 A9 07			lda #$07
    32 A95B 85 08			sta SYS_VIC20.PRINT.COL
    33 A95D A9 53			lda #$53
    34 A95F 85 0C			sta SYS_VIC20.PRINT.S
    35 A961 A9 A0			lda #$A0
    36 A963 85 0D			sta SYS_VIC20.PRINT.S+1
    37 A965 20 3C A2			jsr SYS_VIC20.PRINT
    41 A968 AD 3E A0			lda adr.TXT_TURBO
    42 A96B 4A				lsr @
    43 A96C 85 71			sta T1B
    44 A96E A5 72			lda T2B
    45 A970 38 E5 71			sub T1B
    46 A973 85 72			sta T2B
    50 A975 85 08			sta SYS_VIC20.SET_XY.X
    51 A977 A9 19			lda #$19
    52 A979 85 0C			sta SYS_VIC20.SET_XY.Y
    53 A97B 20 01 A2			jsr SYS_VIC20.SET_XY
    57 A97E A9 07			lda #$07
    58 A980 85 08			sta SYS_VIC20.PRINT.COL
    59 A982 A9 3E			lda #$3E
    60 A984 85 0C			sta SYS_VIC20.PRINT.S
    61 A986 A9 A0			lda #$A0
    62 A988 85 0D			sta SYS_VIC20.PRINT.S+1
    63 A98A 20 3C A2			jsr SYS_VIC20.PRINT
    66 A98D			l_01AF
    70 A98D A5 61			lda SYS_VIC20.JOY
    71 A98F 29 20			and #$20
    72 A991 F0 FA			jeq l_01AF
Source: vic20.a65
  2547 					.endl
  2548
  2549 				; optimize OK (game.inc), line = 430
  2550
  2551 A993 A9 00			lda #$00
  2552 A995 85 82			sta HI_SCORE_BCD
  2553 A997 85 83			sta HI_SCORE_BCD+1
  2554 A999 20 98 A8			jsr SET_GAME
  2555
  2556 				; --- RepeatUntilProlog
  2557 A99C			l_084B
  2558
  2559 				; optimize OK (game.inc), line = 433
  2560
  2561 A99C A5 FB			lda GAME_OVER
  2562 A99E F0 03			jeq l_0857
  2563 A9A0 20 C9 A8			jsr RESTART_GAME
  2564 A9A3			l_0857
  2565
  2566 				; optimize OK (game.inc), line = 434
  2567
  2568 A9A3 4C 9C A9			jmp l_084B
  2569
  2570 				; ------------------------------------------------------------
  2571
  2572 = BC00			CRT_CHARS_ADR	= $BC00
  2573 = B912			CRT_TITLE_ADR	= $B912
  2574 = 0000			GAME_BLACK	= $00
  2575 = 0001			GAME_WHITE	= $01
  2576 = 0002			GAME_RED	= $02
  2577 = 0003			GAME_CYAN	= $03
  2578 = 0004			GAME_PURPLE	= $04
  2579 = 0005			GAME_GREEN	= $05
  2580 = 0006			GAME_BLUE	= $06
  2581 = 0007			GAME_YELLOW	= $07
  2582 = 0008			GAME_ORANGE	= $08
  2583 = 0020			C_SPACE	= $20
  2584 = 0040			C_FRUIT	= $40
  2585 = 0041			C_WALL_H	= $41
  2586 = 0042			C_WALL_VE	= $42
  2587 = 0043			C_WALL_VW	= $43
  2588 = 0044			C_TAIL_UP	= $44
  2589 = 0045			C_TAIL_DOWN	= $45
  2590 = 0046			C_TAIL_RIGHT	= $46
  2591 = 0047			C_TAIL_LEFT	= $47
  2592 = 0048			C_HEAD_UP	= $48
  2593 = 0049			C_HEAD_DOWN	= $49
  2594 = 004A			C_HEAD_LEFT	= $4A
  2595 = 004B			C_HEAD_RIGHT	= $4B
  2596 = 004C			C_BODY_V	= $4C
  2597 = 004D			C_BODY_H	= $4D
  2598 = 004E			C_BODY_SW	= $4E
  2599 = 004F			C_BODY_SE	= $4F
  2600 = 0050			C_BODY_NW	= $50
  2601 = 0051			C_BODY_NE	= $51
  2602 = A00C			adr.TXT_LEVEL	= CODEORIGIN+$0000
  2603 A9A6			.var TXT_LEVEL	= adr.TXT_LEVEL .word
  2604 = A016			adr.TXT_POINTS	= CODEORIGIN+$000A
  2605 A9A6			.var TXT_POINTS	= adr.TXT_POINTS .word
  2606 = A023			adr.TXT_TIME	= CODEORIGIN+$0017
  2607 A9A6			.var TXT_TIME	= adr.TXT_TIME .word
  2608 = A029			adr.TXT_HSCORE	= CODEORIGIN+$001D
  2609 A9A6			.var TXT_HSCORE	= adr.TXT_HSCORE .word
  2610 = A032			adr.TXT_FIRE	= CODEORIGIN+$0026
  2611 A9A6			.var TXT_FIRE	= adr.TXT_FIRE .word
  2612 = A03E			adr.TXT_TURBO	= CODEORIGIN+$0032
  2613 A9A6			.var TXT_TURBO	= adr.TXT_TURBO .word
  2614 = A053			adr.TXT_INFO	= CODEORIGIN+$0047
  2615 A9A6			.var TXT_INFO	= adr.TXT_INFO .word
  2616 = 0002			SNAKE_SIZE	= $02
  2617 = 000E			GAME_SPEED	= $0E
  2618 = 000A			LEVEL_THOLD	= $0A
  2619 = 0002			SPEED_THOLD	= $02
  2620 = 00C8			TIME_E_SET	= $C8
  2621 = 0099			TIME_THOLD	= $99
  2622 = 0044			UP	= $44
  2623 = 0045			DOWN	= $45
  2624 = 0047			LEFT	= $47
  2625 = 0046			RIGHT	= $46
  2626 = 00E7			MOVE_UP	= $E7
  2627 = 0019			MOVE_DOWN	= $19
  2628 = 00FF			MOVE_LEFT	= $FF
  2629 = 0001			MOVE_RIGHT	= $01
  2630 = 0070			T0B	= $70
  2631 = 0071			T1B	= $71
  2632 = 0072			T2B	= $72
  2633 = 0073			T0W	= $73
  2634 = 0075			T1W	= $75
  2635 = 0077			SNAKE_SPEED	= $77
  2636 = 0078			SNAKE_SPD_C	= $78
  2637 = 0079			TAIL_DIR	= $79
  2638 = 007A			HEAD_DIR	= $7A
  2639 = 007B			LEVEL_UP	= $7B
  2640 = 007C			TIME_ENTITY	= $7C
  2641 = 007D			TIME_BCD	= $7D
  2642 = 007E			LEVEL_BCD	= $7E
  2643 = 007F			LEVEL	= $7F
  2644 = 0080			SCORE_BCD	= $80
  2645 = 0082			HI_SCORE_BCD	= $82
  2646 = 0084			HEAD_POS	= $84
  2647 = 0086			HEAD_POS_COL	= $86
  2648 = 0088			TAIL_POS	= $88
  2649 = 008A			adr.SNAKE	= $8A
  2650 A9A6			.var SNAKE	= adr.SNAKE .word
  2651 = 008A			SNAKE.HEAD	= $8A
  2652 = 008B			SNAKE.BODY	= $8B
  2653 = 008C			SNAKE.M	= $8C
  2654 = 008D			FRUIT_ON_BOARD	= $8D
  2655 = 00FB			GAME_OVER	= $FB
  2656 = 00FB			SF0B	= $FB
  2657 = 00FC			SF1B	= $FC
  2658 = 1C05			HI_SCR_SCORE	= $1C05
  2659 = 1EEA			SCR_SCORE	= $1EEA
  2660 = 1ED9			SCR_LEVEL	= $1ED9
  2661 = 1EDE			SCR_TIME	= $1EDE
  2662 A9A6			@exit
  2663
  2664 A9A6 A2 00		@halt	ldx #$00
  2665 A9A8 9A				txs
  2666
  2667 A9A9 60				rts
  2668
  2669 				; ------------------------------------------------------------
  2670
  2671 				; ------------------------------------------------------------
  2672
  2673 A9AA			.local	@DEFINES
  2674 A9AA			RAW
  2675 				.endl
  2676
  2677 A9AA			.local	@RESOURCE
  2678 				.endl
  2679
  2680 = A9AA 0C A0		TXT_LEVEL
  2680 = A9AC 16 A0		TXT_POINTS
  2680 = A9AE 23 A0		TXT_TIME
  2680 = A9B0 29 A0		TXT_HSCORE
  2680 = A9B2 32 A0		TXT_FIRE
  2680 = A9B4 3E A0		TXT_TURBO
  2680 = A9B6 53 A0		TXT_INFO
  2680 = A9B8 8A 00		SNAKE
  2680 				.endl							; MAIN
  2681
  2682 				; ------------------------------------------------------------
  2683 				; ------------------------------------------------------------
  2684
  2685 				.macro	UNITINITIALIZATION
  2686 				
  2687 					.ifdef MAIN.SYSTEM.@UnitInit
  2688 					jsr MAIN.SYSTEM.@UnitInit
  2689 					.fi
  2690 				
  2691 					.ifdef MAIN.SYS_VIC20.@UnitInit
  2692 					jsr MAIN.SYS_VIC20.@UnitInit
  2693 					.fi
  2694 				.endm
  2695
  2696 				; ------------------------------------------------------------
  2697
  2698 					ift .SIZEOF(MAIN.SYSTEM) > 0
  2699 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  2699 				SYSTEM: $A12D..$A15A
  2700 					eif
  2701
  2702 					ift .SIZEOF(MAIN.SYS_VIC20) > 0
  2703 					.print 'SYS_VIC20: ',MAIN.SYS_VIC20,'..',MAIN.SYS_VIC20+.SIZEOF(MAIN.SYS_VIC20)-1
  2703 				SYS_VIC20: $A15B..$A30C
  2704 					eif
  2705
  2706 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  2706 				CODE: $A00C..$A9A9
  2707
  2708 				; ------------------------------------------------------------
  2709
  2710 A9BA				.align $0004
  2711
  2712 A9BC			DATAORIGIN
  2713
  2714 = 0000			VARINITSIZE	= *-DATAORIGIN
  2715 = 000E			VARDATASIZE	= 14
  2716
  2717 = A9CA			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  2718
  2719 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  2719 				DATA: $A9BC..$A9CA
  2720
  2721 				; ------------------------------------------------------------
  2722
  2723 				.macro	STATICDATA
  2724 				.by  $08 $0C $05 $16 $05 $0C $20 $30  $30 $00 $0B $10 $0F $09 $0E $14  $13 $20 $30 $30 $30 $30 $00 $04
  2725 				.by  $14 $3A $30 $30 $00 $07 $08 $09  $3A $30 $30 $30 $30 $00 $0A $10  $12 $05 $13 $13 $20 $06 $09 $12
  2726 				.by  $05 $00 $13 $08 $0F $0C $04 $20  $06 $09 $12 $05 $20 $06 $0F $12  $20 $14 $15 $12 $02 $0F $00 $17
  2727 				.by  $13 $03 $0F $12 $05 $20 $10 $0F  $09 $0E $14 $13 $20 $15 $0E $14  $09 $0C $20 $14 $3A $39 $39 $00
  2728 				.by  $09 $1A $19 $3C $00 $FC $00 $00  $FF $FF $00 $00 $00 $00 $00 $6E
  2729 				.endm
  2730
  2731 A9BC			.local	RESOURCE
  2732 A9BC				icl 'raw\resource.asm'
Source: resource.asm
     1
    48 					opt l+
  2733
  2734 A9BC				RCDATA 'res/title_cbm.scr' CRT_TITLE_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     6 A9BC				org main.CRT_TITLE_ADR
     8 B912 20 20 20 20 20 20 + 	ins 'res/title_cbm.scr',0
    10 					.print '$R RCDATA  ',main.CRT_TITLE_ADR,'..',*-1," 'res/title_cbm.scr'"
    10 				$R RCDATA  $B912..$BBFF 'res/title_cbm.scr'
Source: vic20.a65
  2735 BC00				RCDATA 'res/snake_cbm.fnt' CRT_CHARS_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     6 BC00				org main.CRT_CHARS_ADR
     8 BC00 00 3C 66 6E 6E 60 + 	ins 'res/snake_cbm.fnt',0
    10 					.print '$R RCDATA  ',main.CRT_CHARS_ADR,'..',*-1," 'res/snake_cbm.fnt'"
    10 				$R RCDATA  $BC00..$BFFF 'res/snake_cbm.fnt'
Source: vic20.a65
  2736 				.endl
  2737
  2738 					end
