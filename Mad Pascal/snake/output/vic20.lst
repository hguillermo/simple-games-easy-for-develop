mads 2.1.5
    57 				  opt l+
   102
   103 				.print 'ZPAGE: ',zpage,'..',zpend-1
   103 				ZPAGE: $0000..$0053
   104
   105 				.print 'RTLIB: ',RTLIB,'..',*-1
   105 				RTLIB: $A07C..$A113
   106
   107 				; ------------------------------------------------------------
   108
   109 A114			START
   110 A114 BA				tsx
   111 A115 8E 63 A9			stx MAIN.@halt+1
   112
   113 					.ifdef fmulinit
   114 					fmulinit
   115 					.fi
   116
   117 = 000E			VLEN	= VARDATASIZE-VARINITSIZE
   118 = A978			VADR	= DATAORIGIN+VARINITSIZE
   119
   120 					ift VADR > $BFFF
   121 					ert 'Invalid memory address range ',VADR
   122 					eli (VLEN>0) && (VLEN<=256)
   123 A118 A2 F2			ldx #256-VLEN
   124 A11A A9 00			lda #$00
   125 A11C 9D 86 A8 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   126 					eli VLEN>256
   127 					@fill #VADR #VLEN #$00
   128 					eif
   129
   130 				.ifdef :psptr
   131 					mwa #PROGRAMSTACK :psptr
   132 				.fi
   133
   134 A122 A2 00			ldx #$00
   135 A124 86 00			stx bp						; BP = 0
   136
   137 A126 CA				dex						; X = 255
   138
   139 A127				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: vic20.a65]
     7 A127 20 FA A2			jsr MAIN.SYS_VIC20.@UnitInit
Source: vic20.a65
   140
   141 A12A			.local	MAIN						; PROCEDURE
   142
   143 A12A 4C EA A8			jmp l_0067
   144
   145 				; ------------------------------------------------------------
   146
   147 A12D			.local	SYSTEM						; UNIT
   148
   149 A12D			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   150
   151 				; ------------------------------------------------------------
   152
   153 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   154 				; as Pointer
   155 A12D B5 14			lda :STACKORIGIN,x
   156 A12F 85 08			sta A
   157 A131 B5 24			lda :STACKORIGIN+STACKWIDTH,x
   158 A133 85 09			sta A+1
   159 A135 CA				dex
   160 A136			@main
   161
   162 				; -------------------  ASM Block 00000002  -------------------
   163
   164 A136 A0 00			ldy #0
   165 A138 B1 08 8D 7A A9		mva (:edx),y Result
   166
   167 A13D			@exit
   168
   169 				; ------------------------------------------------------------
   170
   171 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   172 				; as Pointer
   173
   174 A13D E8				inx
   175 A13E AD 7A A9 95 14		mva RESULT :STACKORIGIN,x
   176
   177 					.ifdef @new
   178 					lda <@VarData
   179 					sta :ztmp
   180 					lda >@VarData
   181 					ldy #@VarDataSize-1
   182 					jmp @FreeMem
   183 					eif
   184
   185 				; ------------------------------------------------------------
   186
   187 = 0008			A	= :EDX
   188 = A97A			RESULT	= DATAORIGIN+$0002
   189 A143 60				rts						; ret
   190 				.endl
   191
   192 A144			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   193
   194 				; ------------------------------------------------------------
   195
   196 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   197 				; as Pointer
   198 A144 B5 14			lda :STACKORIGIN,x
   199 A146 85 08			sta A
   200 A148 B5 24			lda :STACKORIGIN+STACKWIDTH,x
   201 A14A 85 09			sta A+1
   202 A14C CA				dex
   203 A14D 30 05			jmi @main
   204
   205 				; ------------------------------------------------------------
   206
   207 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   208 				; as Pointer
   209 A14F B5 14			lda :STACKORIGIN,x
   210 A151 85 0C			sta VALUE
   211 A153 CA				dex
   212 A154			@main
   213
   214 				; -------------------  ASM Block 00000018  -------------------
   215
   216 A154 A0 00			ldy #0
   217 A156 A5 0C 91 08			mva value (:edx),y
   218
   219 				; ------------------------------------------------------------
   220
   221 = 0008			A	= :EDX
   222 = 000C			VALUE	= :ECX
   223 A15A			@exit
   224 					.ifdef @new
   225 					lda <@VarData
   226 					sta :ztmp
   227 					lda >@VarData
   228 					ldy #@VarDataSize-1
   229 					jmp @FreeMem
   230 					els
   231 A15A 60				rts						; ret
   232 					eif
   233 				.endl
   234
   235 A15B			.local	MOVE_00B1					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   236
   237 					.MACRO m@INLINE
   238 				
   239 				; -------------------  ASM Block 00000028  -------------------
   240 				
   241 					jsr @move
   242 				
   243 					.ENDM
   244
   245 				; ------------------------------------------------------------
   246
   247 = 0008			SOURCE	= :EDX
   248 = 000C			DEST	= :ECX
   249 = 0004			COUNT	= :EAX
   250 A15B			@exit
   251 				.endl
   252
   253 				; ------------------------------------------------------------
   254
   255 = 0648			M_PI_2	= $0648
   256 = 0192			D_PI_2	= $0192
   257 = 0004			D_PI_180	= $04
   258 = A978			RNDSEED	= DATAORIGIN+$0000
   259
   260 				.endl							; UNIT SYSTEM
   261
   262 				; ------------------------------------------------------------
   263
   264 A15B			.local	SYS_VIC20					; UNIT
   265
   266 A15B			.local	SYS_VBI						; PROCEDURE | ASSEMBLER | INTERRUPT
   267
   268 				; -------------------  ASM Block 00000048  -------------------
   269
   270 A15B E6 60		      inc RTCLOCK
   271
   272 A15D AE 13 91		      ldx VIA1DDRA
   273 A160 AC 22 91		      ldy VIA2DDRB
   274 A163 A9 C3 8D 13 91	      mva #%11000011 VIA1DDRA
   275 A168 AD 11 91		      lda VIA1PA
   276 A16B 8E 13 91		      stx VIA1DDRA
   277 A16E 29 3C		      and #%00111100                  // up, down, left, fire
   278 A170 85 61		      sta JOY
   279 A172 A9 7F 8D 22 91	      mva #%01111111 VIA2DDRB
   280 A177 AD 20 91		      lda VIA2PB
   281 A17A 8C 22 91		      sty VIA2DDRB
   282 A17D 29 80		      and #%10000000                  // right
   283 A17F 05 61		      ora JOY
   284 A181 49 BC		      eor #%10111100                  // inverse values
   285 A183 85 61		      sta JOY
   286
   287 A185 20 59 A8		      jsr VBI
   288
   289 A188 A9 40 8D 2D 91	      mva #%01000000 VIA2IFR
   290 A18D 68 A8 68 AA 68	      plr
   291
   292 A192 40				rti						; ret
   293 				.endl
   294
   295 A193			.local	SYS_INIT					; PROCEDURE | ASSEMBLER
   296
   297 				; -------------------  ASM Block 00000049  -------------------
   298
   299 A193 78			      sei
   300
   301 A194 A9 7F 8D 1E 91	      mva #%01111111 VIA1IER          // disable all NMI
   302 A199 A9 C0 8D 2E 91	      mva #%11000000 VIA2IER          // enable IRQ via2/timer1
   303 A19E A9 40 8D 2B 91	      mva #%01000000 VIA2ACR          // put via2/timer1 in continuous free-running mode
   304
   305 A1A3 A9 5B 8D 14 03 A9 +       mwa #SYS_VBI CINV               // register IRQ procedure
   306
   307 A1AD A9 00 85 60		      mva #0 RTCLOCK                  // reset raster
   308
   309 A1B1 A9 92		      lda #VBI_START                  // wait for 130 raster line
   310 A1B3 CD 04 90		@     cmp VICCR4
   311 A1B6 D0 FB		      bne @-
   312
   313 A1B8 A9 86 8D 24 91 A9 +       mwa #PAL_TIMER1 VIA2T1CL        // set via2/timer1; 1/50 sec.
   314
   315 A1C2 A0 0F		      ldy #15
   316 A1C4 B9 6C A0 99 00 90 +       mva:rpl adr.VIC_DEF,y VICCR0,y- // init VIC registers
   317
   318 A1CD 58			      cli
   319
   320 A1CE			@exit
   321 					.ifdef @new
   322 					lda <@VarData
   323 					sta :ztmp
   324 					lda >@VarData
   325 					ldy #@VarDataSize-1
   326 					jmp @FreeMem
   327 					els
   328 A1CE 60				rts						; ret
   329 					eif
   330 				.endl
   331
   332 A1CF			.local	WAIT_00DC					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   333 A1CF 85 08			sta N
   334
   335 				; -------------------  ASM Block 00000052  -------------------
   336
   337 A1D1 A5 08		      lda n
   338 A1D3 18 65 60		      add RTCLOCK
   339 A1D6 C5 60		@     cmp RTCLOCK
   340 A1D8 D0 FC		      bne @-
   341
   342 				; ------------------------------------------------------------
   343
   344 = 0008			N	= :EDX
   345 A1DA			@exit
   346 					.ifdef @new
   347 					lda <@VarData
   348 					sta :ztmp
   349 					lda >@VarData
   350 					ldy #@VarDataSize-1
   351 					jmp @FreeMem
   352 					els
   353 A1DA 60				rts						; ret
   354 					eif
   355 				.endl
   356
   357 A1DB			.local	CLRSCR						; PROCEDURE | ASSEMBLER | REGISTER
   358 A1DB 85 08			sta V
   359
   360 				; -------------------  ASM Block 00000053  -------------------
   361
   362 A1DD A0 00		      ldy #0
   363 A1DF A5 08		      lda v
   364 A1E1 99 00 1C		@     sta SCREEN_ADR,y
   365 A1E4 99 00 1D		      sta SCREEN_ADR + $100,y
   366 A1E7 99 00 1E		      sta SCREEN_ADR + $200,y
   367 A1EA C8			      iny
   368 A1EB D0 F4		      bne @-
   369
   370 				; ------------------------------------------------------------
   371
   372 = 0008			V	= :EDX
   373 A1ED			@exit
   374 					.ifdef @new
   375 					lda <@VarData
   376 					sta :ztmp
   377 					lda >@VarData
   378 					ldy #@VarDataSize-1
   379 					jmp @FreeMem
   380 					els
   381 A1ED 60				rts						; ret
   382 					eif
   383 				.endl
   384
   385 A1EE			.local	CLRCOL						; PROCEDURE | ASSEMBLER | REGISTER
   386 A1EE 85 08			sta C
   387
   388 				; -------------------  ASM Block 00000054  -------------------
   389
   390 A1F0 A0 00		      ldy #0
   391 A1F2 A5 08		      lda c
   392 A1F4 99 00 94		@     sta COLORMAP_ADR,y
   393 A1F7 99 00 95		      sta COLORMAP_ADR + $100,y
   394 A1FA 99 00 96		      sta COLORMAP_ADR + $200,y
   395 A1FD C8			      iny
   396 A1FE D0 F4		      bne @-
   397
   398 				; ------------------------------------------------------------
   399
   400 = 0008			C	= :EDX
   401 A200			@exit
   402 					.ifdef @new
   403 					lda <@VarData
   404 					sta :ztmp
   405 					lda >@VarData
   406 					ldy #@VarDataSize-1
   407 					jmp @FreeMem
   408 					els
   409 A200 60				rts						; ret
   410 					eif
   411 				.endl
   412
   413 A201			.local	SET_XY						; PROCEDURE | REGISTER
   414
   415 				; optimize OK (SYS_VIC20), line = 434
   416
   417 A201 A5 08			lda X
   418 A203 85 54			sta T0B
   419 A205 A5 0C			lda Y
   420 A207 85 55			sta T1B
   421
   422 				; optimize OK (SYS_VIC20), line = 435
   423
   424 A209 A9 19			lda #$19
   425 A20B 85 0C			sta :ecx
   426 A20D A5 55			lda T1B
   427 A20F 85 04			sta :eax
   428 					.ifdef fmulinit
   429 					fmulu_8
   430 					els
   431 A211 20 FC A0			imulCL
   432 					eif
   433 A214 A5 04			lda :eax
   434 A216 85 5A			sta TMP
   435 A218 A5 05			lda :eax+1
   436 A21A 85 5B			sta TMP+1
   437 A21C A5 5A			lda TMP
   438 A21E 18 65 54			add T0B
   439 A221 85 5A			sta TMP
   440 A223 90 02			scc
   441 A225 E6 5B			inc TMP+1
   442
   443 				; optimize OK (SYS_VIC20), line = 437
   444
   445 A227 85 56			sta SCR
   446 A229 A5 5B			lda TMP+1
   447 A22B 18 69 1C			add #$1C
   448 A22E 85 57			sta SCR+1
   449
   450 				; optimize OK (SYS_VIC20), line = 438
   451
   452 A230 A5 5A			lda TMP
   453 A232 85 58			sta COLMAP
   454 A234 A5 5B			lda TMP+1
   455 A236 18 69 94			add #$94
   456 A239 85 59			sta COLMAP+1
   457
   458 				; ------------------------------------------------------------
   459
   460 = 0008			X	= :EDX
   461 = 000C			Y	= :ECX
   462 A23B			@exit
   463 					.ifdef @new
   464 					lda <@VarData
   465 					sta :ztmp
   466 					lda >@VarData
   467 					ldy #@VarDataSize-1
   468 					jmp @FreeMem
   469 					els
   470 A23B 60				rts						; ret
   471 					eif
   472 				.endl
   473
   474 A23C			.local	PRINT						; PROCEDURE | ASSEMBLER | REGISTER
   475
   476 				; -------------------  ASM Block 00000055  -------------------
   477
   478 A23C A0 00		      ldy #0
   479 A23E B1 0C 85 54		      mva (s),y ZP_0_B
   480 A242 A8 88 E6 0C		      tay:dey:inc s
   481 A246 B1 0C 91 56		@     mva (s),y (scr),y
   482 A24A A5 08 91 58		      mva col (colmap),y
   483 A24E 88			      dey
   484 A24F 10 F5		      bpl @-
   485
   486 				; ------------------------------------------------------------
   487
   488 = 0008			COL	= :EDX
   489 = 000C			S	= :ECX
   490 A251			@exit
   491 					.ifdef @new
   492 					lda <@VarData
   493 					sta :ztmp
   494 					lda >@VarData
   495 					ldy #@VarDataSize-1
   496 					jmp @FreeMem
   497 					els
   498 A251 60				rts						; ret
   499 					eif
   500 				.endl
   501
   502 A252			.local	PUT_CHAR					; PROCEDURE | ASSEMBLER | REGISTER
   503
   504 				; -------------------  ASM Block 00000056  -------------------
   505
   506 A252 A0 00		      ldy #0
   507 A254 A5 0C 91 56		      mva c (scr),y
   508 A258 A5 08 91 58		      mva col (colmap),y
   509
   510 				; ------------------------------------------------------------
   511
   512 = 0008			COL	= :EDX
   513 = 000C			C	= :ECX
   514 A25C			@exit
   515 					.ifdef @new
   516 					lda <@VarData
   517 					sta :ztmp
   518 					lda >@VarData
   519 					ldy #@VarDataSize-1
   520 					jmp @FreeMem
   521 					els
   522 A25C 60				rts						; ret
   523 					eif
   524 				.endl
   525
   526 A25D			.local	UPDATE_COUNTER_2				; PROCEDURE | ASSEMBLER | REGISTER
   527
   528 				; -------------------  ASM Block 00000057  -------------------
   529
   530 A25D F8			      sed
   531
   532 A25E A0 00		      ldy #0
   533 A260 B1 0C		      lda (counter),y
   534 A262 18 65 08		      add v
   535 A265 91 0C		      sta (counter),y
   536
   537 A267 D8			      cld
   538
   539 A268 A0 00		      ldy #0
   540 A26A B1 0C		      lda (counter),y
   541 A26C 48			      pha
   542 A26D 29 0F		      and #%00001111
   543 A26F 09 30		      ora #%00110000
   544 A271 A0 03		      ldy #3
   545 A273 91 04		      sta (scr_counter),y
   546 A275 68			      pla
   547 A276 4A 4A 4A 4A		:4    lsr
   548 A27A 09 30		      ora #%00110000
   549 A27C 88			      dey
   550 A27D 91 04		      sta (scr_counter),y
   551
   552 				; ------------------------------------------------------------
   553
   554 = 0008			V	= :EDX
   555 = 000C			COUNTER	= :ECX
   556 = 0004			SCR_COUNTER	= :EAX
   557 A27F			@exit
   558 					.ifdef @new
   559 					lda <@VarData
   560 					sta :ztmp
   561 					lda >@VarData
   562 					ldy #@VarDataSize-1
   563 					jmp @FreeMem
   564 					els
   565 A27F 60				rts						; ret
   566 					eif
   567 				.endl
   568
   569 A280			.local	UPDATE_COUNTER_4				; PROCEDURE | ASSEMBLER | REGISTER
   570
   571 				; -------------------  ASM Block 00000058  -------------------
   572
   573 A280 F8			      sed
   574
   575 A281 A0 00		      ldy #0
   576 A283 B1 0C		      lda (counter),y
   577 A285 18 65 08		      add v
   578 A288 91 0C		      sta (counter),y
   579 A28A 90 08		      bcc @+
   580 A28C C8			      iny
   581 A28D B1 0C		      lda (counter),y
   582 A28F 18 69 01		      add #1
   583 A292 91 0C		      sta (counter),y
   584
   585 A294 D8			@     cld
   586
   587 A295 A0 00		      ldy #0
   588 A297 B1 0C		      lda (counter),y
   589 A299 48			      pha
   590 A29A 29 0F		      and #%00001111
   591 A29C 09 30		      ora #%00110000
   592 A29E A0 03		      ldy #3
   593 A2A0 91 04		      sta (scr_counter),y
   594 A2A2 68			      pla
   595 A2A3 4A 4A 4A 4A		:4    lsr
   596 A2A7 09 30		      ora #%00110000
   597 A2A9 88			      dey
   598 A2AA 91 04		      sta (scr_counter),y
   599
   600 A2AC 88			      dey
   601 A2AD B1 0C		      lda (counter),y
   602 A2AF 29 0F		      and #%00001111
   603 A2B1 09 30		      ora #%00110000
   604 A2B3 91 04		      sta (scr_counter),y
   605 A2B5 B1 0C		      lda (counter),y
   606 A2B7 4A 4A 4A 4A		:4    lsr
   607 A2BB 09 30		      ora #%00110000
   608 A2BD 88			      dey
   609 A2BE 91 04		      sta (scr_counter),y
   610
   611 				; ------------------------------------------------------------
   612
   613 = 0008			V	= :EDX
   614 = 000C			COUNTER	= :ECX
   615 = 0004			SCR_COUNTER	= :EAX
   616 A2C0			@exit
   617 					.ifdef @new
   618 					lda <@VarData
   619 					sta :ztmp
   620 					lda >@VarData
   621 					ldy #@VarDataSize-1
   622 					jmp @FreeMem
   623 					els
   624 A2C0 60				rts						; ret
   625 					eif
   626 				.endl
   627
   628 A2C1			.local	PRND_0112					; PROCEDURE | ASSEMBLER | OVERLOAD
   629
   630 				; -------------------  ASM Block 00000059  -------------------
   631
   632 A2C1 AD 04 90		      lda VICCR4
   633 A2C4 65 60		      adc RTCLOCK
   634 A2C6 4D 27 91		      eor VIA2T1LH
   635 A2C9 4D 26 91		      eor VIA2T1LL
   636 A2CC 4D 14 91		      eor VIA1T1CL
   637 A2CF 4D 15 91		      eor VIA1T1CH
   638 A2D2 85 62		      sta RND
   639
   640 A2D4			@exit
   641 					.ifdef @new
   642 					lda <@VarData
   643 					sta :ztmp
   644 					lda >@VarData
   645 					ldy #@VarDataSize-1
   646 					jmp @FreeMem
   647 					els
   648 A2D4 60				rts						; ret
   649 					eif
   650 				.endl
   651
   652 A2D5			.local	PRND_0113					; PROCEDURE | OVERLOAD | REGISTER
   653
   654 				; optimize FAIL ('PRND_0112', SYS_VIC20), line = 555
   655
   656 A2D5 20 C1 A2			jsr PRND_0112
   657
   658 				; optimize OK (SYS_VIC20), line = 557
   659
   660 A2D8 A5 62			lda RND
   661 A2DA 25 04			and MASK
   662 A2DC 85 54			sta T0B
   663
   664 				; optimize OK (SYS_VIC20), line = 559
   665
   666 A2DE C5 08			cmp A
   667 A2E0 B0 05			jcs l_0137
   668 A2E2 18 65 08			add A
   669 A2E5 85 54			sta T0B
   670 A2E7			l_0137
   671
   672 				; optimize OK (SYS_VIC20), line = 560
   673
   674 A2E7 A5 0C			lda B
   675 A2E9 C5 54			cmp T0B
   676 A2EB B0 08			jcs l_0151
   677
   678 				; --- RepeatUntilProlog
   679 A2ED			l_0153
   680
   681 				; optimize OK (SYS_VIC20), line = 561
   682
   683 A2ED 46 54			lsr T0B
   684
   685 				; optimize OK (SYS_VIC20), line = 562
   686
   687 A2EF A5 0C			lda B
   688 A2F1 C5 54			cmp T0B
   689 A2F3 90 F8			jcc l_0153
   690 A2F5			l_0151
   691
   692 				; optimize OK (SYS_VIC20), line = 564
   693
   694 A2F5 A5 54			lda T0B
   695 A2F7 85 62			sta RND
   696
   697 				; ------------------------------------------------------------
   698
   699 = 0008			A	= :EDX
   700 = 000C			B	= :ECX
   701 = 0004			MASK	= :EAX
   702 A2F9			@exit
   703 					.ifdef @new
   704 					lda <@VarData
   705 					sta :ztmp
   706 					lda >@VarData
   707 					ldy #@VarDataSize-1
   708 					jmp @FreeMem
   709 					els
   710 A2F9 60				rts						; ret
   711 					eif
   712 				.endl
   713
   714 				; ------------------------------------------------------------
   715 				; ------------------------------------------------------------
   716 A2FA			@UnitInit
   717
   718 				; optimize OK (SYS_VIC20), line = 571
   719
   720 A2FA A9 00			lda #$00
   721 A2FC 85 56			sta SCR
   722 A2FE A9 1C			lda #$1C
   723 A300 85 57			sta SCR+1
   724
   725 				; optimize OK (SYS_VIC20), line = 572
   726
   727 A302 A9 00			lda #$00
   728 A304 85 58			sta COLMAP
   729 A306 A9 94			lda #$94
   730 A308 85 59			sta COLMAP+1
   731
   732 A30A 60				rts
   733
   734 				; ------------------------------------------------------------
   735
   736 = 0000			BLACK	= $00
   737 = 0001			WHITE	= $01
   738 = 0002			RED	= $02
   739 = 0003			CYAN	= $03
   740 = 0004			PURPLE	= $04
   741 = 0005			GREEN	= $05
   742 = 0006			BLUE	= $06
   743 = 0007			YELLOW	= $07
   744 = 0008			ORANGE	= $08
   745 = 0009			LIGHT_ORANGE	= $09
   746 = 000A			LIGHT_RED	= $0A
   747 = 000B			LIGHT_CYAN	= $0B
   748 = 000C			LIGHT_PURPLE	= $0C
   749 = 000D			LIGHT_GREEN	= $0D
   750 = 000E			LIGHT_BLUE	= $0E
   751 = 000F			LIGHT_YELLOW	= $0F
   752 = 1000			CHARSET_ADR	= $1000
   753 = 1C00			SCREEN_ADR	= $1C00
   754 = 9400			COLORMAP_ADR	= $9400
   755 = 0019			ROW_SIZE	= $19
   756 = 001E			COL_SIZE	= $1E
   757 = 001F			ROW_MASK	= $1F
   758 = 001F			COL_MASK	= $1F
   759 = 02EE			SCREEN_SIZE	= $02EE
   760 = 0400			CHARSET_SIZE	= $0400
   761 = A000			CART_ADR	= $A000
   762 = 2000			CART_SIZE	= $2000
   763 = 0004			JOY_UP	= $04
   764 = 0008			JOY_DOWN	= $08
   765 = 0010			JOY_LEFT	= $10
   766 = 0080			JOY_RIGHT	= $80
   767 = 0020			JOY_FIRE	= $20
   768 = 10011100		JOY_DIR_MASK	= $10011100
   769 = 0060			RTCLOCK	= $60
   770 = 0061			JOY	= $61
   771 = 0062			RND	= $62
   772 = 0054			ZP_0_B	= $54
   773 = 0055			ZP_1_B	= $55
   774 = 0056			ZP_0_W	= $56
   775 = 0058			ZP_1_W	= $58
   776 = 005A			ZP_2_W	= $5A
   777 = 005C			ZP_3_W	= $5C
   778 = 005E			ZP_0_P	= $5E
   779 = A06C			adr.VIC_DEF	= CODEORIGIN+$0060
   780 A30B			.var VIC_DEF	= adr.VIC_DEF .word
   781 = 5686			PAL_TIMER1	= $5686
   782 = 0092			VBI_START	= $92
   783 = 0314			CINV	= $0314
   784 = 0316			CBINV	= $0316
   785 = 0318			NMINV	= $0318
   786 = 9000			VICCR0	= $9000
   787 = 9001			VICCR1	= $9001
   788 = 9002			VICCR2	= $9002
   789 = 9003			VICCR3	= $9003
   790 = 9004			VICCR4	= $9004
   791 = 9005			VICCR5	= $9005
   792 = 9006			VICCR6	= $9006
   793 = 9007			VICCR7	= $9007
   794 = 9008			VICCR8	= $9008
   795 = 9009			VICCR9	= $9009
   796 = 900A			VICCRA	= $900A
   797 = 900B			VICCRB	= $900B
   798 = 900C			VICCRC	= $900C
   799 = 900D			VICCRD	= $900D
   800 = 900E			VICCRE	= $900E
   801 = 900F			VICCRF	= $900F
   802 = 9110			VIA1PB	= $9110
   803 = 9111			VIA1PA	= $9111
   804 = 9112			VIA1DDRB	= $9112
   805 = 9113			VIA1DDRA	= $9113
   806 = 9114			VIA1T1CL	= $9114
   807 = 9115			VIA1T1CH	= $9115
   808 = 9116			VIA1T1LL	= $9116
   809 = 9117			VIA1T1LH	= $9117
   810 = 9118			VIA1T2CL	= $9118
   811 = 9119			VIA1T2CH	= $9119
   812 = 911A			VIA1SR	= $911A
   813 = 911B			VIA1ACR	= $911B
   814 = 911C			VIA1PCR	= $911C
   815 = 911D			VIA1IFR	= $911D
   816 = 911E			VIA1IER	= $911E
   817 = 911F			VIA1PA2	= $911F
   818 = 9120			VIA2PB	= $9120
   819 = 9121			VIA2PA	= $9121
   820 = 9122			VIA2DDRB	= $9122
   821 = 9123			VIA2DDRA	= $9123
   822 = 9124			VIA2T1CL	= $9124
   823 = 9125			VIA2T1CH	= $9125
   824 = 9126			VIA2T1LL	= $9126
   825 = 9127			VIA2T1LH	= $9127
   826 = 9128			VIA2T2CL	= $9128
   827 = 9129			VIA2T2CH	= $9129
   828 = 912A			VIA2SR	= $912A
   829 = 912B			VIA2ACR	= $912B
   830 = 912C			VIA2PCR	= $912C
   831 = 912D			VIA2IFR	= $912D
   832 = 912E			VIA2IER	= $912E
   833 = 912F			VIA2PA2	= $912F
   834 = 0056			SCR	= $56
   835 = 0058			COLMAP	= $58
   836 = 005A			TMP	= $5A
   837 = 005E			GAME_VBI	= $5E
   838 = 0054			T0B	= $54
   839 = 0055			T1B	= $55
   840
   841 = A30B 6C A0		VIC_DEF
   841 				.endl							; UNIT SYS_VIC20
   842
   843 A30D			.local	WELCOME_SCR					; PROCEDURE | INLINE
   844
   845 					.MACRO m@INLINE
   846 				
   847 				; optimize OK (game.inc), line = 82
   848 				
   849 					lda #$01
   850 					jsr SYS_VIC20.CLRCOL
   851 				
   852 				; optimize OK (game.inc), line = 84
   853 				
   854 					lda #$0C
   855 					sta T0B
   856 					sta T2B
   857 				
   858 				; optimize OK (game.inc), line = 86
   859 				
   860 					lda adr.TXT_INFO
   861 					lsr @
   862 					sta T1B
   863 					lda T0B
   864 					sub T1B
   865 					sta T0B
   866 				
   867 				; optimize OK (game.inc), line = 87
   868 				
   869 					sta SYS_VIC20.SET_XY.X
   870 					lda #$02
   871 					sta SYS_VIC20.SET_XY.Y
   872 					jsr SYS_VIC20.SET_XY
   873 				
   874 				; optimize OK (game.inc), line = 88
   875 				
   876 					lda #$07
   877 					sta SYS_VIC20.PRINT.COL
   878 					lda #$53
   879 					sta SYS_VIC20.PRINT.S
   880 					lda #$A0
   881 					sta SYS_VIC20.PRINT.S+1
   882 					jsr SYS_VIC20.PRINT
   883 				
   884 				; optimize OK (game.inc), line = 90
   885 				
   886 					lda adr.TXT_TURBO
   887 					lsr @
   888 					sta T1B
   889 					lda T2B
   890 					sub T1B
   891 					sta T2B
   892 				
   893 				; optimize OK (game.inc), line = 91
   894 				
   895 					sta SYS_VIC20.SET_XY.X
   896 					lda #$19
   897 					sta SYS_VIC20.SET_XY.Y
   898 					jsr SYS_VIC20.SET_XY
   899 				
   900 				; optimize OK (game.inc), line = 92
   901 				
   902 					lda #$07
   903 					sta SYS_VIC20.PRINT.COL
   904 					lda #$3E
   905 					sta SYS_VIC20.PRINT.S
   906 					lda #$A0
   907 					sta SYS_VIC20.PRINT.S+1
   908 					jsr SYS_VIC20.PRINT
   909 				
   910 				; --- RepeatUntilProlog
   911 				l_01AF
   912 				
   913 				; optimize OK (game.inc), line = 94
   914 				
   915 					lda SYS_VIC20.JOY
   916 					and #$20
   917 					jeq l_01AF
   918 					.ENDM
   919 A30D			@exit
   920 				.endl
   921
   922 A30D			.local	DRAW_FRAME					; PROCEDURE
   923
   924 				; optimize OK (game.inc), line = 103
   925
   926 A30D A9 19			lda #$19
   927 A30F 85 73			sta T0W
   928 A311 A9 1C			lda #$1C
   929 A313 85 74			sta T0W+1
   930
   931 				; optimize OK (game.inc), line = 104
   932
   933 A315 A9 1A			lda #$1A
   934 A317 85 70			sta I
   935
   936 A319			l_01D1
   937 				; --- ForToDoCondition
   938
   939 				; optimize OK (game.inc), line = 105
   940
   941 A319 A4 74			ldy T0W+1
   942 A31B 84 01			sty :bp+1
   943 A31D A4 73			ldy T0W
   944 A31F A9 43			lda #$43
   945 A321 91 00			sta (:bp),y
   946
   947 				; optimize OK (game.inc), line = 106
   948
   949 A323 A4 73 84 02 A4 74 + 	mwy T0W :bp2
   950 A32B A0 18			ldy #$18
   951 A32D A9 42			lda #$42
   952 A32F 91 02			sta (:bp2),y
   953
   954 				; optimize OK (game.inc), line = 107
   955
   956 A331 A5 73			lda T0W
   957 A333 18 69 19			add #$19
   958 A336 85 73			sta T0W
   959 A338 90 02			scc
   960 A33A E6 74			inc T0W+1
   961
   962 				; --- ForToDoEpilog
   963 A33C C6 70			dec I
   964 A33E 10 D9			jpl l_01D1
   965 A340			l_01DF
   966
   967 				; optimize OK (game.inc), line = 110
   968
   969 A340 A9 18			lda #$18
   970 A342 85 70			sta I
   971
   972 A344			l_01FA
   973 				; --- ForToDoCondition
   974
   975 				; optimize OK (game.inc), line = 111
   976
   977 A344 A4 70			ldy I
   978 A346 A9 41			lda #$41
   979 A348 99 00 1C			sta $1C00,y
   980
   981 				; optimize OK (game.inc), line = 112
   982
   983 A34B 99 BC 1E			sta $1EBC,y
   984
   985 				; --- ForToDoEpilog
   986 A34E C6 70			dec I
   987 A350 10 F2			jpl l_01FA
   988 A352			l_0208
   989
   990 				; ------------------------------------------------------------
   991
   992 = 0070			I	= $70
   993 A352			@exit
   994 					.ifdef @new
   995 					lda <@VarData
   996 					sta :ztmp
   997 					lda >@VarData
   998 					ldy #@VarDataSize-1
   999 					jmp @FreeMem
  1000 					els
  1001 A352 60				rts						; ret
  1002 					eif
  1003 				.endl
  1004
  1005 A353			.local	PRESS_FIRE					; PROCEDURE
  1006
  1007 				; optimize OK (game.inc), line = 120
  1008
  1009 A353 A9 19			lda #$19
  1010 A355 38 ED 32 A0			sub adr.TXT_FIRE
  1011 A359 38 E9 02			sub #$02
  1012 A35C 85 08			sta SYS_VIC20.SET_XY.X
  1013 A35E A9 00			lda #$00
  1014 A360 85 0C			sta SYS_VIC20.SET_XY.Y
  1015 A362 20 01 A2			jsr SYS_VIC20.SET_XY
  1016
  1017 				; optimize OK (game.inc), line = 121
  1018
  1019 A365 A9 01			lda #$01
  1020 A367 85 08			sta SYS_VIC20.PRINT.COL
  1021 A369 A9 32			lda #$32
  1022 A36B 85 0C			sta SYS_VIC20.PRINT.S
  1023 A36D A9 A0			lda #$A0
  1024 A36F 85 0D			sta SYS_VIC20.PRINT.S+1
  1025 A371 20 3C A2			jsr SYS_VIC20.PRINT
  1026
  1027 				; --- RepeatUntilProlog
  1028 A374			l_0231
  1029
  1030 				; optimize OK (game.inc), line = 123
  1031
  1032 A374 A5 61			lda SYS_VIC20.JOY
  1033 A376 29 20			and #$20
  1034 A378 F0 FA			jeq l_0231
  1035 A37A			@exit
  1036 					.ifdef @new
  1037 					lda <@VarData
  1038 					sta :ztmp
  1039 					lda >@VarData
  1040 					ldy #@VarDataSize-1
  1041 					jmp @FreeMem
  1042 					els
  1043 A37A 60				rts						; ret
  1044 					eif
  1045 				.endl
  1046
  1047 A37B			.local	PUT_SNAKE					; PROCEDURE
  1048
  1049 				; optimize OK (game.inc), line = 130
  1050
  1051 A37B A9 44			lda #$44
  1052 A37D 85 7A			sta HEAD_DIR
  1053
  1054 				; optimize OK (game.inc), line = 131
  1055
  1056 A37F 85 79			sta TAIL_DIR
  1057
  1058 				; optimize OK (game.inc), line = 132
  1059
  1060 A381 A9 83			lda #$83
  1061 A383 85 84			sta HEAD_POS
  1062 A385 A9 1D			lda #$1D
  1063 A387 85 85			sta HEAD_POS+1
  1064
  1065 				; optimize OK (game.inc), line = 133
  1066
  1067 A389 A9 83			lda #$83
  1068 A38B 85 86			sta HEAD_POS_COL
  1069 A38D A9 95			lda #$95
  1070 A38F 85 87			sta HEAD_POS_COL+1
  1071
  1072 				; optimize OK (game.inc), line = 135
  1073
  1074 A391 A4 85			ldy HEAD_POS+1
  1075 A393 84 01			sty :bp+1
  1076 A395 A4 84			ldy HEAD_POS
  1077 A397 A9 48			lda #$48
  1078 A399 91 00			sta (:bp),y
  1079 A39B A4 87			ldy HEAD_POS_COL+1
  1080 A39D 84 01			sty :bp+1
  1081 A39F A4 86			ldy HEAD_POS_COL
  1082 A3A1 A9 01			lda #$01
  1083 A3A3 91 00			sta (:bp),y
  1084
  1085 				; optimize OK (game.inc), line = 137
  1086
  1087 A3A5 A5 84			lda HEAD_POS
  1088 A3A7 85 73			sta T0W
  1089 A3A9 A5 85			lda HEAD_POS+1
  1090 A3AB 85 74			sta T0W+1
  1091 A3AD A5 86			lda HEAD_POS_COL
  1092 A3AF 85 75			sta T1W
  1093 A3B1 A5 87			lda HEAD_POS_COL+1
  1094 A3B3 85 76			sta T1W+1
  1095
  1096 				; optimize OK (game.inc), line = 138
  1097
  1098 A3B5 A9 00			lda #$00
  1099 A3B7 85 70			sta T0B
  1100
  1101 A3B9			l_0271
  1102 				; --- ForToDoCondition
  1103
  1104 				; optimize OK (game.inc), line = 139
  1105
  1106 A3B9 A5 73			lda T0W
  1107 A3BB 18 69 19			add #$19
  1108 A3BE 85 73			sta T0W
  1109 A3C0 90 02			scc
  1110 A3C2 E6 74			inc T0W+1
  1111 A3C4 A5 75			lda T1W
  1112 A3C6 18 69 19			add #$19
  1113 A3C9 85 75			sta T1W
  1114 A3CB 90 02			scc
  1115 A3CD E6 76			inc T1W+1
  1116
  1117 				; optimize OK (game.inc), line = 140
  1118
  1119 A3CF A4 74			ldy T0W+1
  1120 A3D1 84 01			sty :bp+1
  1121 A3D3 A4 73			ldy T0W
  1122 A3D5 A9 4C			lda #$4C
  1123 A3D7 91 00			sta (:bp),y
  1124 A3D9 A4 76			ldy T1W+1
  1125 A3DB 84 01			sty :bp+1
  1126 A3DD A4 75			ldy T1W
  1127 A3DF A9 01			lda #$01
  1128 A3E1 91 00			sta (:bp),y
  1129
  1130 				; --- ForToDoEpilog
  1131 A3E3 C6 70			dec T0B
  1132 A3E5 10 D2			jpl l_0271
  1133 A3E7			l_027F
  1134
  1135 				; optimize OK (game.inc), line = 143
  1136
  1137 A3E7 A5 73			lda T0W
  1138 A3E9 18 69 19			add #$19
  1139 A3EC 85 73			sta T0W
  1140 A3EE 90 02			scc
  1141 A3F0 E6 74			inc T0W+1
  1142 A3F2 A5 75			lda T1W
  1143 A3F4 18 69 19			add #$19
  1144 A3F7 85 75			sta T1W
  1145 A3F9 90 02			scc
  1146 A3FB E6 76			inc T1W+1
  1147 A3FD A5 73			lda T0W
  1148 A3FF 85 88			sta TAIL_POS
  1149 A401 A5 74			lda T0W+1
  1150 A403 85 89			sta TAIL_POS+1
  1151
  1152 				; optimize OK (game.inc), line = 144
  1153
  1154 A405 85 01			sta :bp+1
  1155 A407 A4 88			ldy TAIL_POS
  1156 A409 A9 44			lda #$44
  1157 A40B 91 00			sta (:bp),y
  1158 A40D A4 76			ldy T1W+1
  1159 A40F 84 01			sty :bp+1
  1160 A411 A4 75			ldy T1W
  1161 A413 A9 01			lda #$01
  1162 A415 91 00			sta (:bp),y
  1163
  1164 				; ------------------------------------------------------------
  1165
  1166 A417			@exit
  1167 					.ifdef @new
  1168 					lda <@VarData
  1169 					sta :ztmp
  1170 					lda >@VarData
  1171 					ldy #@VarDataSize-1
  1172 					jmp @FreeMem
  1173 					els
  1174 A417 60				rts						; ret
  1175 					eif
  1176 				.endl
  1177
  1178 A418			.local	DRAW_BOTTOM_LINE				; PROCEDURE
  1179
  1180 				; optimize OK (game.inc), line = 151
  1181
  1182 A418 A9 00			lda #$00
  1183 A41A 85 08			sta SYS_VIC20.SET_XY.X
  1184 A41C A9 1D			lda #$1D
  1185 A41E 85 0C			sta SYS_VIC20.SET_XY.Y
  1186 A420 20 01 A2			jsr SYS_VIC20.SET_XY
  1187
  1188 				; optimize OK (game.inc), line = 152
  1189
  1190 A423 A9 01			lda #$01
  1191 A425 85 08			sta SYS_VIC20.PRINT.COL
  1192 A427 A9 0C			lda #$0C
  1193 A429 85 0C			sta SYS_VIC20.PRINT.S
  1194 A42B A9 A0			lda #$A0
  1195 A42D 85 0D			sta SYS_VIC20.PRINT.S+1
  1196 A42F 20 3C A2			jsr SYS_VIC20.PRINT
  1197
  1198 				; optimize OK (game.inc), line = 154
  1199
  1200 A432 AD 0C A0			lda adr.TXT_LEVEL
  1201 A435 18 69 01			add #$01
  1202 A438 85 08			sta SYS_VIC20.SET_XY.X
  1203 A43A A9 1D			lda #$1D
  1204 A43C 85 0C			sta SYS_VIC20.SET_XY.Y
  1205 A43E 20 01 A2			jsr SYS_VIC20.SET_XY
  1206
  1207 				; optimize OK (game.inc), line = 155
  1208
  1209 A441 A9 01			lda #$01
  1210 A443 85 08			sta SYS_VIC20.PRINT.COL
  1211 A445 A9 23			lda #$23
  1212 A447 85 0C			sta SYS_VIC20.PRINT.S
  1213 A449 A9 A0			lda #$A0
  1214 A44B 85 0D			sta SYS_VIC20.PRINT.S+1
  1215 A44D 20 3C A2			jsr SYS_VIC20.PRINT
  1216
  1217 				; optimize OK (game.inc), line = 157
  1218
  1219 A450 A9 19			lda #$19
  1220 A452 38 ED 16 A0			sub adr.TXT_POINTS
  1221 A456 85 08			sta SYS_VIC20.SET_XY.X
  1222 A458 A9 1D			lda #$1D
  1223 A45A 85 0C			sta SYS_VIC20.SET_XY.Y
  1224 A45C 20 01 A2			jsr SYS_VIC20.SET_XY
  1225
  1226 				; optimize OK (game.inc), line = 158
  1227
  1228 A45F A9 01			lda #$01
  1229 A461 85 08			sta SYS_VIC20.PRINT.COL
  1230 A463 A9 16			lda #$16
  1231 A465 85 0C			sta SYS_VIC20.PRINT.S
  1232 A467 A9 A0			lda #$A0
  1233 A469 85 0D			sta SYS_VIC20.PRINT.S+1
  1234 A46B 20 3C A2			jsr SYS_VIC20.PRINT
  1235 A46E			@exit
  1236 					.ifdef @new
  1237 					lda <@VarData
  1238 					sta :ztmp
  1239 					lda >@VarData
  1240 					ldy #@VarDataSize-1
  1241 					jmp @FreeMem
  1242 					els
  1243 A46E 60				rts						; ret
  1244 					eif
  1245 				.endl
  1246
  1247 A46F			.local	PRINT_HI_SCORE					; PROCEDURE
  1248
  1249 				; optimize OK (game.inc), line = 165
  1250
  1251 A46F A9 02			lda #$02
  1252 A471 85 08			sta SYS_VIC20.SET_XY.X
  1253 A473 A9 00			lda #$00
  1254 A475 85 0C			sta SYS_VIC20.SET_XY.Y
  1255 A477 20 01 A2			jsr SYS_VIC20.SET_XY
  1256
  1257 				; optimize OK (game.inc), line = 166
  1258
  1259 A47A A9 01			lda #$01
  1260 A47C 85 08			sta SYS_VIC20.PRINT.COL
  1261 A47E A9 29			lda #$29
  1262 A480 85 0C			sta SYS_VIC20.PRINT.S
  1263 A482 A9 A0			lda #$A0
  1264 A484 85 0D			sta SYS_VIC20.PRINT.S+1
  1265 A486 20 3C A2			jsr SYS_VIC20.PRINT
  1266
  1267 				; optimize OK (game.inc), line = 167
  1268
  1269 A489 A9 00			lda #$00
  1270 A48B 85 08			sta SYS_VIC20.UPDATE_COUNTER_4.V
  1271 A48D A9 82			lda #$82
  1272 A48F 85 0C			sta SYS_VIC20.UPDATE_COUNTER_4.COUNTER
  1273 A491 A9 00			lda #$00
  1274 A493 85 0D			sta SYS_VIC20.UPDATE_COUNTER_4.COUNTER+1
  1275 A495 A9 05			lda #$05
  1276 A497 85 04			sta SYS_VIC20.UPDATE_COUNTER_4.SCR_COUNTER
  1277 A499 A9 1C			lda #$1C
  1278 A49B 85 05			sta SYS_VIC20.UPDATE_COUNTER_4.SCR_COUNTER+1
  1279 A49D 20 80 A2			jsr SYS_VIC20.UPDATE_COUNTER_4
  1280 A4A0			@exit
  1281 					.ifdef @new
  1282 					lda <@VarData
  1283 					sta :ztmp
  1284 					lda >@VarData
  1285 					ldy #@VarDataSize-1
  1286 					jmp @FreeMem
  1287 					els
  1288 A4A0 60				rts						; ret
  1289 					eif
  1290 				.endl
  1291
  1292 A4A1			.local	HALL_OF_FAME					; PROCEDURE
  1293
  1294 				; optimize OK (game.inc), line = 174
  1295
  1296 A4A1 A5 83			lda HI_SCORE_BCD+1
  1297 A4A3 C5 81			cmp SCORE_BCD+1
  1298 A4A5 D0 04			bne @+
  1299 A4A7 A5 82			lda HI_SCORE_BCD
  1300 A4A9 C5 80			cmp SCORE_BCD
  1301 				@
  1302 A4AB B0 08			jcs l_02DD
  1303 A4AD A5 80			lda SCORE_BCD
  1304 A4AF 85 82			sta HI_SCORE_BCD
  1305 A4B1 A5 81			lda SCORE_BCD+1
  1306 A4B3 85 83			sta HI_SCORE_BCD+1
  1307 A4B5			l_02DD
  1308
  1309 				; optimize FAIL ('PRINT_HI_SCORE', game.inc), line = 175
  1310
  1311 A4B5 20 6F A4			jsr PRINT_HI_SCORE
  1312 A4B8			@exit
  1313 					.ifdef @new
  1314 					lda <@VarData
  1315 					sta :ztmp
  1316 					lda >@VarData
  1317 					ldy #@VarDataSize-1
  1318 					jmp @FreeMem
  1319 					els
  1320 A4B8 60				rts						; ret
  1321 					eif
  1322 				.endl
  1323
  1324 A4B9			.local	MOVE_TAIL					; PROCEDURE
  1325
  1326 				; optimize OK (game.inc), line = 182
  1327
  1328 A4B9 A4 89			ldy TAIL_POS+1
  1329 A4BB 84 01			sty :bp+1
  1330 A4BD A4 88			ldy TAIL_POS
  1331 A4BF A9 20			lda #$20
  1332 A4C1 91 00			sta (:bp),y
  1333
  1334 				; optimize OK (game.inc), line = 184
  1335
  1336 A4C3 A5 79			lda TAIL_DIR
  1337 A4C5 8D 7B A9			sta @CASETMP_0003
  1338 A4C8 C9 44			cmp #$44
  1339 A4CA D0 0E			jne l_02F9
  1340 				@
  1341
  1342 				; optimize OK (game.inc), line = 185
  1343
  1344 A4CC A5 88			lda TAIL_POS
  1345 A4CE 38 E9 19			sub #$19
  1346 A4D1 85 88			sta TAIL_POS
  1347 A4D3 B0 02			scs
  1348 A4D5 C6 89			dec TAIL_POS+1
  1349
  1350 A4D7 4C 05 A5			jmp a_0003
  1351 A4DA			l_02F9
  1352 A4DA C9 45			cmp #$45
  1353 A4DC D0 0E			jne l_0303
  1354 				@
  1355
  1356 				; optimize OK (game.inc), line = 186
  1357
  1358 A4DE A5 88			lda TAIL_POS
  1359 A4E0 18 69 19			add #$19
  1360 A4E3 85 88			sta TAIL_POS
  1361 A4E5 90 02			scc
  1362 A4E7 E6 89			inc TAIL_POS+1
  1363
  1364 A4E9 4C 05 A5			jmp a_0003
  1365 A4EC			l_0303
  1366 A4EC C9 46			cmp #$46
  1367 A4EE D0 09			jne l_030D
  1368 				@
  1369
  1370 				; optimize FAIL (0, game.inc), line = 187
  1371
  1372 A4F0 E6 88			inc TAIL_POS
  1373 A4F2 D0 02			sne
  1374 A4F4 E6 89			inc TAIL_POS+1
  1375
  1376 A4F6 4C 05 A5			jmp a_0003
  1377 A4F9			l_030D
  1378 A4F9 C9 47			cmp #$47
  1379 A4FB D0 08			jne l_031A
  1380 				@
  1381
  1382 				; optimize FAIL (0, game.inc), line = 188
  1383
  1384 A4FD A5 88			lda TAIL_POS
  1385 A4FF D0 02			bne @+
  1386 A501 C6 89			dec TAIL_POS+1
  1387 				@
  1388 A503 C6 88			dec TAIL_POS
  1389
  1390 A505			l_031A
  1391 A505			a_0003
  1392
  1393 				; optimize OK (game.inc), line = 191
  1394
  1395 A505 A4 89			ldy TAIL_POS+1
  1396 A507 84 01			sty :bp+1
  1397 A509 A4 88			ldy TAIL_POS
  1398 A50B B1 00			lda (:bp),y
  1399 A50D 85 70			sta T0B
  1400
  1401 				; optimize OK (game.inc), line = 193
  1402
  1403 A50F A5 79			lda TAIL_DIR
  1404 A511 8D 7C A9			sta @CASETMP_0004
  1405 A514 C9 44			cmp #$44
  1406 A516 F0 04			beq @+
  1407 A518 C9 45			cmp #$45
  1408 A51A D0 23			jne l_0339
  1409 				@
  1410
  1411 				; optimize OK (game.inc), line = 195
  1412
  1413 A51C A5 70			lda T0B
  1414 A51E 8D 7D A9			sta @CASETMP_0005
  1415 A521 C9 50			cmp #$50
  1416 A523 F0 04			beq @+
  1417 A525 C9 4E			cmp #$4E
  1418 A527 D0 07			jne l_0346
  1419 				@
  1420
  1421 				; optimize OK (game.inc), line = 196
  1422
  1423 A529 A9 47			lda #$47
  1424 A52B 85 79			sta TAIL_DIR
  1425
  1426 A52D 4C 3C A5			jmp a_0005
  1427 A530			l_0346
  1428 A530 C9 51			cmp #$51
  1429 A532 F0 04			beq @+
  1430 A534 C9 4F			cmp #$4F
  1431 A536 D0 04			jne l_0355
  1432 				@
  1433
  1434 				; optimize OK (game.inc), line = 197
  1435
  1436 A538 A9 46			lda #$46
  1437 A53A 85 79			sta TAIL_DIR
  1438
  1439 A53C			l_0355
  1440 A53C			a_0005
  1441
  1442 A53C 4C 67 A5			jmp a_0004
  1443 A53F			l_0339
  1444 A53F C9 46			cmp #$46
  1445 A541 F0 04			beq @+
  1446 A543 C9 47			cmp #$47
  1447 A545 D0 20			jne l_036A
  1448 				@
  1449
  1450 				; optimize OK (game.inc), line = 201
  1451
  1452 A547 A5 70			lda T0B
  1453 A549 8D 7E A9			sta @CASETMP_0006
  1454 A54C C9 4E			cmp #$4E
  1455 A54E F0 04			beq @+
  1456 A550 C9 4F			cmp #$4F
  1457 A552 D0 07			jne l_0377
  1458 				@
  1459
  1460 				; optimize OK (game.inc), line = 202
  1461
  1462 A554 A9 44			lda #$44
  1463 A556 85 79			sta TAIL_DIR
  1464
  1465 A558 4C 67 A5			jmp a_0006
  1466 A55B			l_0377
  1467 A55B C9 50			cmp #$50
  1468 A55D F0 04			beq @+
  1469 A55F C9 51			cmp #$51
  1470 A561 D0 04			jne l_0386
  1471 				@
  1472
  1473 				; optimize OK (game.inc), line = 203
  1474
  1475 A563 A9 45			lda #$45
  1476 A565 85 79			sta TAIL_DIR
  1477
  1478 A567			l_0386
  1479 A567			a_0006
  1480
  1481 A567			l_036A
  1482 A567			a_0004
  1483
  1484 				; optimize OK (game.inc), line = 208
  1485
  1486 A567 A4 89			ldy TAIL_POS+1
  1487 A569 84 01			sty :bp+1
  1488 A56B A4 88			ldy TAIL_POS
  1489 A56D A5 79			lda TAIL_DIR
  1490 A56F 91 00			sta (:bp),y
  1491
  1492 				; ------------------------------------------------------------
  1493
  1494 = A97B			@CASETMP_0003	= DATAORIGIN+$0003
  1495 = A97C			@CASETMP_0004	= DATAORIGIN+$0004
  1496 = A97D			@CASETMP_0005	= DATAORIGIN+$0005
  1497 = A97E			@CASETMP_0006	= DATAORIGIN+$0006
  1498
  1499 = A97B			@VarData	= @CASETMP_0003
  1500 = 0004			@VarDataSize	= 4
  1501
  1502 A571			@exit
  1503 					.ifdef @new
  1504 					lda <@VarData
  1505 					sta :ztmp
  1506 					lda >@VarData
  1507 					ldy #@VarDataSize-1
  1508 					jmp @FreeMem
  1509 					els
  1510 A571 60				rts						; ret
  1511 					eif
  1512 				.endl
  1513
  1514 A572			.local	UPDATE_SNAKE					; PROCEDURE | REGISTER
  1515 A572 85 08			sta S
  1516
  1517 				; optimize OK (game.inc), line = 215
  1518
  1519 A574 29 3F			and #$3F
  1520 A576 8D 7F A9			sta @CASETMP_0007
  1521 A579 C9 01			cmp #$01
  1522 A57B D0 07			jne l_03AF
  1523 				@
  1524
  1525 				; optimize OK (game.inc), line = 216
  1526
  1527 A57D A9 4F			lda #$4F
  1528 A57F 85 8C			sta SNAKE.BODY
  1529
  1530 A581 4C B8 A5			jmp a_0007
  1531 A584			l_03AF
  1532 A584 C9 02			cmp #$02
  1533 A586 D0 07			jne l_03BC
  1534 				@
  1535
  1536 				; optimize OK (game.inc), line = 217
  1537
  1538 A588 A9 4E			lda #$4E
  1539 A58A 85 8C			sta SNAKE.BODY
  1540
  1541 A58C 4C B8 A5			jmp a_0007
  1542 A58F			l_03BC
  1543 A58F C9 04			cmp #$04
  1544 A591 D0 07			jne l_03C9
  1545 				@
  1546
  1547 				; optimize OK (game.inc), line = 218
  1548
  1549 A593 A9 51			lda #$51
  1550 A595 85 8C			sta SNAKE.BODY
  1551
  1552 A597 4C B8 A5			jmp a_0007
  1553 A59A			l_03C9
  1554 A59A C9 08			cmp #$08
  1555 A59C D0 07			jne l_03D6
  1556 				@
  1557
  1558 				; optimize OK (game.inc), line = 219
  1559
  1560 A59E A9 50			lda #$50
  1561 A5A0 85 8C			sta SNAKE.BODY
  1562
  1563 A5A2 4C B8 A5			jmp a_0007
  1564 A5A5			l_03D6
  1565 A5A5 C9 10			cmp #$10
  1566 A5A7 D0 07			jne l_03E3
  1567 				@
  1568
  1569 				; optimize OK (game.inc), line = 220
  1570
  1571 A5A9 A9 4C			lda #$4C
  1572 A5AB 85 8C			sta SNAKE.BODY
  1573
  1574 A5AD 4C B8 A5			jmp a_0007
  1575 A5B0			l_03E3
  1576 A5B0 C9 20			cmp #$20
  1577 A5B2 D0 04			jne l_03F0
  1578 				@
  1579
  1580 				; optimize OK (game.inc), line = 221
  1581
  1582 A5B4 A9 4D			lda #$4D
  1583 A5B6 85 8C			sta SNAKE.BODY
  1584
  1585 A5B8			l_03F0
  1586 A5B8			a_0007
  1587
  1588 				; optimize OK (game.inc), line = 224
  1589
  1590 A5B8 A5 08			lda S
  1591 A5BA 29 C0			and #$C0
  1592 A5BC 8D 80 A9			sta @CASETMP_0008
  1593 A5BF C9 00			cmp #$00
  1594 A5C1 D0 0B			jne l_040D
  1595 				@
  1596
  1597 				; optimize OK (game.inc), line = 225
  1598
  1599 A5C3 A9 48			lda #$48
  1600 A5C5 85 8B			sta SNAKE.HEAD
  1601 A5C7 A9 E7			lda #$E7
  1602 A5C9 85 8D			sta SNAKE.M
  1603
  1604 A5CB 4C F8 A5			jmp a_0008
  1605 A5CE			l_040D
  1606 A5CE C9 40			cmp #$40
  1607 A5D0 D0 0B			jne l_041E
  1608 				@
  1609
  1610 				; optimize OK (game.inc), line = 226
  1611
  1612 A5D2 A9 49			lda #$49
  1613 A5D4 85 8B			sta SNAKE.HEAD
  1614 A5D6 A9 19			lda #$19
  1615 A5D8 85 8D			sta SNAKE.M
  1616
  1617 A5DA 4C F8 A5			jmp a_0008
  1618 A5DD			l_041E
  1619 A5DD C9 80			cmp #$80
  1620 A5DF D0 0B			jne l_042F
  1621 				@
  1622
  1623 				; optimize OK (game.inc), line = 227
  1624
  1625 A5E1 A9 4B			lda #$4B
  1626 A5E3 85 8B			sta SNAKE.HEAD
  1627 A5E5 A9 01			lda #$01
  1628 A5E7 85 8D			sta SNAKE.M
  1629
  1630 A5E9 4C F8 A5			jmp a_0008
  1631 A5EC			l_042F
  1632 A5EC C9 C0			cmp #$C0
  1633 A5EE D0 08			jne l_0440
  1634 				@
  1635
  1636 				; optimize OK (game.inc), line = 228
  1637
  1638 A5F0 A9 4A			lda #$4A
  1639 A5F2 85 8B			sta SNAKE.HEAD
  1640 A5F4 A9 FF			lda #$FF
  1641 A5F6 85 8D			sta SNAKE.M
  1642
  1643 A5F8			l_0440
  1644 A5F8			a_0008
  1645
  1646 				; optimize OK (game.inc), line = 231
  1647
  1648 A5F8 A0 00			ldy #$00
  1649 A5FA A5 8D			lda SNAKE.M
  1650 A5FC 10 01			spl
  1651 A5FE 88				dey
  1652 A5FF 18 65 84			add HEAD_POS
  1653 A602 85 73			sta T0W
  1654 A604 98				tya
  1655 A605 65 85			adc HEAD_POS+1
  1656 A607 85 74			sta T0W+1
  1657
  1658 				; optimize OK (game.inc), line = 232
  1659
  1660 A609 85 01			sta :bp+1
  1661 A60B A4 73			ldy T0W
  1662 A60D B1 00			lda (:bp),y
  1663 A60F 85 75			sta T1W
  1664 A611 A9 00			lda #$00
  1665 A613 85 76			sta T1W+1
  1666
  1667 				; optimize OK (game.inc), line = 234
  1668
  1669 A615 D0 04			bne @+
  1670 A617 A5 75			lda T1W
  1671 A619 C9 20			cmp #$20
  1672 				@
  1673 A61B F0 0D			jeq l_047Dx
  1674 A61D A5 76			lda T1W+1
  1675 A61F D0 04			bne @+
  1676 A621 A5 75			lda T1W
  1677 A623 C9 40			cmp #$40
  1678 				@
  1679 A625 F0 03 4C B0 A6		jne l_047D
  1680 A62A			l_047Dx
  1681
  1682 				; optimize OK (game.inc), line = 236
  1683
  1684 A62A A5 76			lda T1W+1
  1685 A62C D0 04			bne @+
  1686 A62E A5 75			lda T1W
  1687 A630 C9 40			cmp #$40
  1688 				@
  1689 A632 D0 3F			jne l_048F
  1690
  1691 				; optimize OK (game.inc), line = 237
  1692
  1693 A634 A9 00			lda #$00
  1694 A636 85 8A			sta FRUIT_ON_BOARD
  1695
  1696 				; optimize OK (game.inc), line = 239
  1697
  1698 A638 A9 10			lda #$10
  1699 A63A 85 08			sta SYS_VIC20.UPDATE_COUNTER_4.V
  1700 A63C A9 80			lda #$80
  1701 A63E 85 0C			sta SYS_VIC20.UPDATE_COUNTER_4.COUNTER
  1702 A640 A9 00			lda #$00
  1703 A642 85 0D			sta SYS_VIC20.UPDATE_COUNTER_4.COUNTER+1
  1704 A644 A9 EA			lda #$EA
  1705 A646 85 04			sta SYS_VIC20.UPDATE_COUNTER_4.SCR_COUNTER
  1706 A648 A9 1E			lda #$1E
  1707 A64A 85 05			sta SYS_VIC20.UPDATE_COUNTER_4.SCR_COUNTER+1
  1708 A64C 20 80 A2			jsr SYS_VIC20.UPDATE_COUNTER_4
  1709
  1710 				; optimize FAIL (0, game.inc), line = 241
  1711
  1712 A64F C6 7B			dec LEVEL_UP
  1713
  1714 				; optimize OK (game.inc), line = 242
  1715
  1716 A651 D0 1D			jne l_04AE
  1717
  1718 				; optimize FAIL (0, game.inc), line = 243
  1719
  1720 A653 E6 7F			inc LEVEL
  1721
  1722 				; optimize OK (game.inc), line = 244
  1723
  1724 A655 A9 01			lda #$01
  1725 A657 85 08			sta SYS_VIC20.UPDATE_COUNTER_2.V
  1726 A659 A9 7E			lda #$7E
  1727 A65B 85 0C			sta SYS_VIC20.UPDATE_COUNTER_2.COUNTER
  1728 A65D A9 00			lda #$00
  1729 A65F 85 0D			sta SYS_VIC20.UPDATE_COUNTER_2.COUNTER+1
  1730 A661 A9 D9			lda #$D9
  1731 A663 85 04			sta SYS_VIC20.UPDATE_COUNTER_2.SCR_COUNTER
  1732 A665 A9 1E			lda #$1E
  1733 A667 85 05			sta SYS_VIC20.UPDATE_COUNTER_2.SCR_COUNTER+1
  1734 A669 20 5D A2			jsr SYS_VIC20.UPDATE_COUNTER_2
  1735
  1736 				; optimize OK (game.inc), line = 245
  1737
  1738 A66C A9 0A			lda #$0A
  1739 A66E 85 7B			sta LEVEL_UP
  1740 A670			l_04AE
  1741 A670 4C 76 A6			jmp l_04C6
  1742 A673			l_048F
  1743
  1744 				; optimize FAIL ('MOVE_TAIL', game.inc), line = 249
  1745
  1746 A673 20 B9 A4			jsr MOVE_TAIL
  1747 A676			l_04C6
  1748
  1749 				; optimize OK (game.inc), line = 251
  1750
  1751 A676 A4 85			ldy HEAD_POS+1
  1752 A678 84 01			sty :bp+1
  1753 A67A A4 84			ldy HEAD_POS
  1754 A67C A5 8C			lda SNAKE.BODY
  1755 A67E 91 00			sta (:bp),y
  1756
  1757 				; optimize OK (game.inc), line = 253
  1758
  1759 A680 A0 00			ldy #$00
  1760 A682 A5 8D			lda SNAKE.M
  1761 A684 10 01			spl
  1762 A686 88				dey
  1763 A687 18 65 86			add HEAD_POS_COL
  1764 A68A 85 86			sta HEAD_POS_COL
  1765 A68C 98				tya
  1766 A68D 65 87			adc HEAD_POS_COL+1
  1767 A68F 85 87			sta HEAD_POS_COL+1
  1768
  1769 				; optimize OK (game.inc), line = 254
  1770
  1771 A691 A4 74			ldy T0W+1
  1772 A693 84 01			sty :bp+1
  1773 A695 A4 73			ldy T0W
  1774 A697 A5 8B			lda SNAKE.HEAD
  1775 A699 91 00			sta (:bp),y
  1776
  1777 				; optimize OK (game.inc), line = 255
  1778
  1779 A69B A4 87			ldy HEAD_POS_COL+1
  1780 A69D 84 01			sty :bp+1
  1781 A69F A4 86			ldy HEAD_POS_COL
  1782 A6A1 A9 01			lda #$01
  1783 A6A3 91 00			sta (:bp),y
  1784
  1785 				; optimize OK (game.inc), line = 256
  1786
  1787 A6A5 A5 73			lda T0W
  1788 A6A7 85 84			sta HEAD_POS
  1789 A6A9 A5 74			lda T0W+1
  1790 A6AB 85 85			sta HEAD_POS+1
  1791 A6AD 4C B4 A6			jmp l_04F0
  1792 A6B0			l_047D
  1793
  1794 				; optimize OK (game.inc), line = 259
  1795
  1796 A6B0 A9 01			lda #$01
  1797 A6B2 85 FB			sta GAME_OVER
  1798 A6B4			l_04F0
  1799
  1800 				; ------------------------------------------------------------
  1801
  1802 = 0008			S	= :EDX
  1803 = A97F			@CASETMP_0007	= DATAORIGIN+$0007
  1804 = A980			@CASETMP_0008	= DATAORIGIN+$0008
  1805
  1806 = A97F			@VarData	= @CASETMP_0007
  1807 = 0002			@VarDataSize	= 2
  1808
  1809 A6B4			@exit
  1810 					.ifdef @new
  1811 					lda <@VarData
  1812 					sta :ztmp
  1813 					lda >@VarData
  1814 					ldy #@VarDataSize-1
  1815 					jmp @FreeMem
  1816 					els
  1817 A6B4 60				rts						; ret
  1818 					eif
  1819 				.endl
  1820
  1821 A6B5			.local	MOVE_SNAKE					; PROCEDURE
  1822
  1823 				; optimize OK (game.inc), line = 265
  1824
  1825 A6B5 A5 7A			lda HEAD_DIR
  1826 A6B7 8D 81 A9			sta @CASETMP_0009
  1827 A6BA C9 44			cmp #$44
  1828 A6BC D0 07			jne l_0503
  1829 				@
  1830
  1831 				; optimize OK (game.inc), line = 266
  1832
  1833 A6BE A9 10			lda #$10
  1834 A6C0 85 70			sta T0B
  1835
  1836 A6C2 4C E3 A6			jmp a_0009
  1837 A6C5			l_0503
  1838 A6C5 C9 45			cmp #$45
  1839 A6C7 D0 07			jne l_0510
  1840 				@
  1841
  1842 				; optimize OK (game.inc), line = 267
  1843
  1844 A6C9 A9 50			lda #$50
  1845 A6CB 85 70			sta T0B
  1846
  1847 A6CD 4C E3 A6			jmp a_0009
  1848 A6D0			l_0510
  1849 A6D0 C9 46			cmp #$46
  1850 A6D2 D0 07			jne l_051D
  1851 				@
  1852
  1853 				; optimize OK (game.inc), line = 268
  1854
  1855 A6D4 A9 A0			lda #$A0
  1856 A6D6 85 70			sta T0B
  1857
  1858 A6D8 4C E3 A6			jmp a_0009
  1859 A6DB			l_051D
  1860 A6DB C9 47			cmp #$47
  1861 A6DD D0 04			jne l_052A
  1862 				@
  1863
  1864 				; optimize OK (game.inc), line = 269
  1865
  1866 A6DF A9 E0			lda #$E0
  1867 A6E1 85 70			sta T0B
  1868
  1869 A6E3			l_052A
  1870 A6E3			a_0009
  1871
  1872 				; optimize OK (game.inc), line = 272
  1873
  1874 A6E3 A5 70			lda T0B
  1875 A6E5 20 72 A5			jsr UPDATE_SNAKE
  1876
  1877 				; ------------------------------------------------------------
  1878
  1879 = A981			@CASETMP_0009	= DATAORIGIN+$0009
  1880
  1881 = A981			@VarData	= @CASETMP_0009
  1882 = 0001			@VarDataSize	= 1
  1883
  1884 A6E8			@exit
  1885 					.ifdef @new
  1886 					lda <@VarData
  1887 					sta :ztmp
  1888 					lda >@VarData
  1889 					ldy #@VarDataSize-1
  1890 					jmp @FreeMem
  1891 					els
  1892 A6E8 60				rts						; ret
  1893 					eif
  1894 				.endl
  1895
  1896 A6E9			.local	JOY_HANDLER					; PROCEDURE
  1897
  1898 				; optimize OK (game.inc), line = 279
  1899
  1900 A6E9 A9 00			lda #$00
  1901 A6EB 85 70			sta T0B
  1902
  1903 				; optimize OK (game.inc), line = 281
  1904
  1905 A6ED A5 61			lda SYS_VIC20.JOY
  1906 A6EF 29 04			and #$04
  1907 A6F1 F0 23			jeq l_0564
  1908 A6F3 A5 7A			lda HEAD_DIR
  1909 A6F5 C9 45			cmp #$45
  1910 A6F7 F0 1D			jeq l_0564
  1911
  1912 				; optimize OK (game.inc), line = 282
  1913
  1914 A6F9 8D 82 A9			sta @CASETMP_000A
  1915 A6FC C9 47			cmp #$47
  1916 A6FE D0 07			jne l_0570
  1917 				@
  1918
  1919 				; optimize OK (game.inc), line = 283
  1920
  1921 A700 A9 01			lda #$01
  1922 A702 85 70			sta T0B
  1923
  1924 A704 4C 0F A7			jmp a_000A
  1925 A707			l_0570
  1926 A707 C9 46			cmp #$46
  1927 A709 D0 04			jne l_057D
  1928 				@
  1929
  1930 				; optimize OK (game.inc), line = 284
  1931
  1932 A70B A9 02			lda #$02
  1933 A70D 85 70			sta T0B
  1934
  1935 A70F			l_057D
  1936 A70F			a_000A
  1937
  1938 				; optimize OK (game.inc), line = 286
  1939
  1940 A70F A9 44			lda #$44
  1941 A711 85 7A			sta HEAD_DIR
  1942 A713 4C 8C A7			jmp l_0594
  1943 A716			l_0564
  1944
  1945 				; optimize OK (game.inc), line = 288
  1946
  1947 A716 A5 61			lda SYS_VIC20.JOY
  1948 A718 29 08			and #$08
  1949 A71A F0 23			jeq l_05B6
  1950 A71C A5 7A			lda HEAD_DIR
  1951 A71E C9 44			cmp #$44
  1952 A720 F0 1D			jeq l_05B6
  1953
  1954 				; optimize OK (game.inc), line = 289
  1955
  1956 A722 8D 83 A9			sta @CASETMP_000B
  1957 A725 C9 47			cmp #$47
  1958 A727 D0 07			jne l_05C2
  1959 				@
  1960
  1961 				; optimize OK (game.inc), line = 290
  1962
  1963 A729 A9 44			lda #$44
  1964 A72B 85 70			sta T0B
  1965
  1966 A72D 4C 38 A7			jmp a_000B
  1967 A730			l_05C2
  1968 A730 C9 46			cmp #$46
  1969 A732 D0 04			jne l_05CF
  1970 				@
  1971
  1972 				; optimize OK (game.inc), line = 291
  1973
  1974 A734 A9 48			lda #$48
  1975 A736 85 70			sta T0B
  1976
  1977 A738			l_05CF
  1978 A738			a_000B
  1979
  1980 				; optimize OK (game.inc), line = 293
  1981
  1982 A738 A9 45			lda #$45
  1983 A73A 85 7A			sta HEAD_DIR
  1984 A73C 4C 8C A7			jmp l_05E6
  1985 A73F			l_05B6
  1986
  1987 				; optimize OK (game.inc), line = 295
  1988
  1989 A73F A5 61			lda SYS_VIC20.JOY
  1990 A741 10 23			jpl l_0608
  1991 A743 A5 7A			lda HEAD_DIR
  1992 A745 C9 47			cmp #$47
  1993 A747 F0 1D			jeq l_0608
  1994
  1995 				; optimize OK (game.inc), line = 296
  1996
  1997 A749 8D 84 A9			sta @CASETMP_000C
  1998 A74C C9 44			cmp #$44
  1999 A74E D0 07			jne l_0614
  2000 				@
  2001
  2002 				; optimize OK (game.inc), line = 297
  2003
  2004 A750 A9 84			lda #$84
  2005 A752 85 70			sta T0B
  2006
  2007 A754 4C 5F A7			jmp a_000C
  2008 A757			l_0614
  2009 A757 C9 45			cmp #$45
  2010 A759 D0 04			jne l_0621
  2011 				@
  2012
  2013 				; optimize OK (game.inc), line = 298
  2014
  2015 A75B A9 81			lda #$81
  2016 A75D 85 70			sta T0B
  2017
  2018 A75F			l_0621
  2019 A75F			a_000C
  2020
  2021 				; optimize OK (game.inc), line = 300
  2022
  2023 A75F A9 46			lda #$46
  2024 A761 85 7A			sta HEAD_DIR
  2025 A763 4C 8C A7			jmp l_0638
  2026 A766			l_0608
  2027
  2028 				; optimize OK (game.inc), line = 302
  2029
  2030 A766 A5 61			lda SYS_VIC20.JOY
  2031 A768 29 10			and #$10
  2032 A76A F0 20			jeq l_065A
  2033 A76C A5 7A			lda HEAD_DIR
  2034 A76E C9 46			cmp #$46
  2035 A770 F0 1A			jeq l_065A
  2036
  2037 				; optimize OK (game.inc), line = 303
  2038
  2039 A772 8D 85 A9			sta @CASETMP_000D
  2040 A775 C9 44			cmp #$44
  2041 A777 D0 07			jne l_0666
  2042 				@
  2043
  2044 				; optimize OK (game.inc), line = 304
  2045
  2046 A779 A9 C8			lda #$C8
  2047 A77B 85 70			sta T0B
  2048
  2049 A77D 4C 88 A7			jmp a_000D
  2050 A780			l_0666
  2051 A780 C9 45			cmp #$45
  2052 A782 D0 04			jne l_0673
  2053 				@
  2054
  2055 				; optimize OK (game.inc), line = 305
  2056
  2057 A784 A9 C2			lda #$C2
  2058 A786 85 70			sta T0B
  2059
  2060 A788			l_0673
  2061 A788			a_000D
  2062
  2063 				; optimize OK (game.inc), line = 307
  2064
  2065 A788 A9 47			lda #$47
  2066 A78A 85 7A			sta HEAD_DIR
  2067 A78C			l_065A
  2068 A78C			l_0638
  2069 A78C			l_05E6
  2070 A78C			l_0594
  2071
  2072 				; optimize OK (game.inc), line = 309
  2073
  2074 A78C A5 61			lda SYS_VIC20.JOY
  2075 A78E 29 20			and #$20
  2076 A790 F0 06			jeq l_0699
  2077 A792 A5 77			lda SNAKE_SPEED
  2078 A794 4A				lsr @
  2079 A795 4A				lsr @
  2080 A796 85 77			sta SNAKE_SPEED
  2081 A798			l_0699
  2082
  2083 				; optimize OK (game.inc), line = 311
  2084
  2085 A798 A5 70			lda T0B
  2086 A79A F0 09			jeq l_06B8
  2087
  2088 				; optimize OK (game.inc), line = 312
  2089
  2090 A79C A5 77			lda SNAKE_SPEED
  2091 A79E 85 78			sta SNAKE_SPD_C
  2092
  2093 				; optimize OK (game.inc), line = 313
  2094
  2095 A7A0 A5 70			lda T0B
  2096 A7A2 20 72 A5			jsr UPDATE_SNAKE
  2097 A7A5			l_06B8
  2098
  2099 				; ------------------------------------------------------------
  2100
  2101 = A982			@CASETMP_000A	= DATAORIGIN+$000A
  2102 = A983			@CASETMP_000B	= DATAORIGIN+$000B
  2103 = A984			@CASETMP_000C	= DATAORIGIN+$000C
  2104 = A985			@CASETMP_000D	= DATAORIGIN+$000D
  2105
  2106 = A982			@VarData	= @CASETMP_000A
  2107 = 0004			@VarDataSize	= 4
  2108
  2109 A7A5			@exit
  2110 					.ifdef @new
  2111 					lda <@VarData
  2112 					sta :ztmp
  2113 					lda >@VarData
  2114 					ldy #@VarDataSize-1
  2115 					jmp @FreeMem
  2116 					els
  2117 A7A5 60				rts						; ret
  2118 					eif
  2119 				.endl
  2120
  2121 A7A6			.local	PUT_FRUIT					; PROCEDURE
  2122
  2123 				; optimize OK (game.inc), line = 321
  2124
  2125 A7A6 A9 01			lda #$01
  2126 A7A8 85 08			sta SYS_VIC20.PRND_0113.A
  2127 A7AA A9 18			lda #$18
  2128 A7AC 85 0C			sta SYS_VIC20.PRND_0113.B
  2129 A7AE A9 1F			lda #$1F
  2130 A7B0 85 04			sta SYS_VIC20.PRND_0113.MASK
  2131 A7B2 20 D5 A2			jsr SYS_VIC20.PRND_0113
  2132 A7B5 A5 62			lda SYS_VIC20.RND
  2133 A7B7 85 70			sta T0B
  2134
  2135 				; optimize OK (game.inc), line = 322
  2136
  2137 A7B9 A9 01			lda #$01
  2138 A7BB 85 08			sta SYS_VIC20.PRND_0113.A
  2139 A7BD A9 1B			lda #$1B
  2140 A7BF 85 0C			sta SYS_VIC20.PRND_0113.B
  2141 A7C1 A9 1F			lda #$1F
  2142 A7C3 85 04			sta SYS_VIC20.PRND_0113.MASK
  2143 A7C5 20 D5 A2			jsr SYS_VIC20.PRND_0113
  2144 A7C8 A5 62			lda SYS_VIC20.RND
  2145 A7CA 85 71			sta T1B
  2146
  2147 				; optimize OK (game.inc), line = 324
  2148
  2149 A7CC 85 0C			sta :ecx
  2150 A7CE A9 19			lda #$19
  2151 A7D0 85 04			sta :eax
  2152 					.ifdef fmulinit
  2153 					fmulu_8
  2154 					els
  2155 A7D2 20 FC A0			imulCL
  2156 					eif
  2157 A7D5 A5 04			lda :eax
  2158 A7D7 85 73			sta T0W
  2159 A7D9 A5 05			lda :eax+1
  2160 A7DB 85 74			sta T0W+1
  2161 A7DD 18 69 1C			add #$1C
  2162 A7E0 85 74			sta T0W+1
  2163 A7E2 A5 73			lda T0W
  2164 A7E4 18 65 70			add T0B
  2165 A7E7 85 73			sta T0W
  2166 A7E9 90 02			scc
  2167 A7EB E6 74			inc T0W+1
  2168
  2169 				; optimize OK (game.inc), line = 326
  2170
  2171 A7ED A4 74			ldy T0W+1
  2172 A7EF 84 01			sty :bp+1
  2173 A7F1 A4 73			ldy T0W
  2174 A7F3 B1 00			lda (:bp),y
  2175 A7F5 C9 20			cmp #$20
  2176 A7F7 D0 1A			jne l_06FD
  2177
  2178 				; optimize OK (game.inc), line = 327
  2179
  2180 A7F9 A5 70			lda T0B
  2181 A7FB 85 08			sta SYS_VIC20.SET_XY.X
  2182 A7FD A5 71			lda T1B
  2183 A7FF 85 0C			sta SYS_VIC20.SET_XY.Y
  2184 A801 20 01 A2			jsr SYS_VIC20.SET_XY
  2185 A804 A9 05			lda #$05
  2186 A806 85 08			sta SYS_VIC20.PUT_CHAR.COL
  2187 A808 A9 40			lda #$40
  2188 A80A 85 0C			sta SYS_VIC20.PUT_CHAR.C
  2189 A80C 20 52 A2			jsr SYS_VIC20.PUT_CHAR
  2190
  2191 				; optimize OK (game.inc), line = 328
  2192
  2193 A80F A9 01			lda #$01
  2194 A811 85 8A			sta FRUIT_ON_BOARD
  2195 A813			l_06FD
  2196 A813			@exit
  2197 					.ifdef @new
  2198 					lda <@VarData
  2199 					sta :ztmp
  2200 					lda >@VarData
  2201 					ldy #@VarDataSize-1
  2202 					jmp @FreeMem
  2203 					els
  2204 A813 60				rts						; ret
  2205 					eif
  2206 				.endl
  2207
  2208 A814			.local	UPDATE_TIME					; PROCEDURE | INLINE
  2209
  2210 					.MACRO m@INLINE
  2211 				
  2212 				; optimize FAIL (0, game.inc), line = 336
  2213 				
  2214 					dec TIME_ENTITY
  2215 				
  2216 				; optimize OK (game.inc), line = 337
  2217 				
  2218 					jne l_0728
  2219 				
  2220 				; optimize OK (game.inc), line = 338
  2221 				
  2222 					lda #$C8
  2223 					sta TIME_ENTITY
  2224 				
  2225 				; optimize OK (game.inc), line = 339
  2226 				
  2227 					lda #$01
  2228 					sta SYS_VIC20.UPDATE_COUNTER_2.V
  2229 					lda #$7D
  2230 					sta SYS_VIC20.UPDATE_COUNTER_2.COUNTER
  2231 					lda #$00
  2232 					sta SYS_VIC20.UPDATE_COUNTER_2.COUNTER+1
  2233 					lda #$DE
  2234 					sta SYS_VIC20.UPDATE_COUNTER_2.SCR_COUNTER
  2235 					lda #$1E
  2236 					sta SYS_VIC20.UPDATE_COUNTER_2.SCR_COUNTER+1
  2237 					jsr SYS_VIC20.UPDATE_COUNTER_2
  2238 				l_0728
  2239 					.ENDM
  2240 A814			@exit
  2241 				.endl
  2242
  2243 A814			.local	SNAKE_STEP					; PROCEDURE | INLINE
  2244
  2245 					.MACRO m@INLINE
  2246 				
  2247 				; optimize OK (game.inc), line = 347
  2248 				
  2249 					lda #$0E
  2250 					sub LEVEL
  2251 					sta SNAKE_SPEED
  2252 				
  2253 				; optimize OK (game.inc), line = 348
  2254 				
  2255 					cmp #$02
  2256 					jcs l_0753
  2257 					lda #$02
  2258 					sta SNAKE_SPEED
  2259 				l_0753
  2260 				
  2261 				; optimize FAIL ('JOY_HANDLER', game.inc), line = 350
  2262 				
  2263 					jsr JOY_HANDLER
  2264 				
  2265 				; optimize OK (game.inc), line = 352
  2266 				
  2267 					lda SNAKE_SPD_C
  2268 					jne l_076D
  2269 				
  2270 				; optimize FAIL ('MOVE_SNAKE', game.inc), line = 353
  2271 				
  2272 					jsr MOVE_SNAKE
  2273 				
  2274 				; optimize OK (game.inc), line = 354
  2275 				
  2276 					lda SNAKE_SPEED
  2277 					sta SNAKE_SPD_C
  2278 					jmp l_077E
  2279 				l_076D
  2280 				
  2281 				; optimize FAIL (0, game.inc), line = 356
  2282 				
  2283 					dec SNAKE_SPD_C
  2284 				l_077E
  2285 					.ENDM
  2286 A814			@exit
  2287 				.endl
  2288
  2289 A814			.local	SET_GAME					; PROCEDURE
  2290
  2291 				; optimize OK (game.inc), line = 363
  2292
  2293 A814 A9 20			lda #$20
  2294 A816 20 DB A1			jsr SYS_VIC20.CLRSCR
  2295 A819 A9 07			lda #$07
  2296 A81B 20 EE A1			jsr SYS_VIC20.CLRCOL
  2297
  2298 				; optimize FAIL ('DRAW_FRAME', game.inc), line = 364
  2299
  2300 A81E 20 0D A3			jsr DRAW_FRAME
  2301 A821 20 18 A4			jsr DRAW_BOTTOM_LINE
  2302 A824 20 7B A3			jsr PUT_SNAKE
  2303 A827 20 6F A4			jsr PRINT_HI_SCORE
  2304
  2305 				; optimize OK (game.inc), line = 366
  2306
  2307 A82A A9 C8			lda #$C8
  2308 A82C 85 7C			sta TIME_ENTITY
  2309
  2310 				; optimize OK (game.inc), line = 367
  2311
  2312 A82E A9 0A			lda #$0A
  2313 A830 85 7B			sta LEVEL_UP
  2314
  2315 				; optimize OK (game.inc), line = 368
  2316
  2317 A832 A9 00			lda #$00
  2318 A834 85 80			sta SCORE_BCD
  2319 A836 85 81			sta SCORE_BCD+1
  2320
  2321 				; optimize OK (game.inc), line = 369
  2322
  2323 A838 85 7D			sta TIME_BCD
  2324
  2325 				; optimize OK (game.inc), line = 370
  2326
  2327 A83A 85 7E			sta LEVEL_BCD
  2328
  2329 				; optimize OK (game.inc), line = 371
  2330
  2331 A83C 85 7F			sta LEVEL
  2332
  2333 				; optimize OK (game.inc), line = 372
  2334
  2335 A83E 85 78			sta SNAKE_SPD_C
  2336
  2337 				; optimize OK (game.inc), line = 373
  2338
  2339 A840 85 8A			sta FRUIT_ON_BOARD
  2340
  2341 				; optimize OK (game.inc), line = 374
  2342
  2343 A842 85 FB			sta GAME_OVER
  2344
  2345 				; optimize OK (game.inc), line = 376
  2346
  2347 A844 A9 01			lda #$01
  2348 A846 20 CF A1			jsr SYS_VIC20.WAIT_00DC
  2349 A849			@exit
  2350 					.ifdef @new
  2351 					lda <@VarData
  2352 					sta :ztmp
  2353 					lda >@VarData
  2354 					ldy #@VarDataSize-1
  2355 					jmp @FreeMem
  2356 					els
  2357 A849 60				rts						; ret
  2358 					eif
  2359 				.endl
  2360
  2361 A84A			.local	RESTART_GAME					; PROCEDURE
  2362
  2363 				; optimize FAIL ('HALL_OF_FAME', game.inc), line = 383
  2364
  2365 A84A 20 A1 A4			jsr HALL_OF_FAME
  2366
  2367 				; optimize OK (game.inc), line = 384
  2368
  2369 A84D A9 19			lda #$19
  2370 A84F 20 CF A1			jsr SYS_VIC20.WAIT_00DC
  2371
  2372 				; optimize FAIL ('PRESS_FIRE', game.inc), line = 385
  2373
  2374 A852 20 53 A3			jsr PRESS_FIRE
  2375
  2376 				; optimize FAIL ('SET_GAME', game.inc), line = 386
  2377
  2378 A855 20 14 A8			jsr SET_GAME
  2379 A858			@exit
  2380 					.ifdef @new
  2381 					lda <@VarData
  2382 					sta :ztmp
  2383 					lda >@VarData
  2384 					ldy #@VarDataSize-1
  2385 					jmp @FreeMem
  2386 					els
  2387 A858 60				rts						; ret
  2388 					eif
  2389 				.endl
  2390
  2391 A859			.local	VBI						; PROCEDURE
  2392
  2393 				; optimize OK (game.inc), line = 393
  2394
  2395 A859 A5 FB			lda GAME_OVER
  2396 A85B D0 52			jne l_07D0
  2397
  2398 				; optimize FAIL ('m@INLINE', game.inc), line = 394
  2399
  2400 A85D				.local +MAIN.UPDATE_TIME
  2401 A85D				m@INLINE
Macro: MAIN.UPDATE_TIME.M@INLINE [Source: vic20.a65]
     4 A85D C6 7C			dec TIME_ENTITY
     8 A85F D0 1B			jne l_0728
    12 A861 A9 C8			lda #$C8
    13 A863 85 7C			sta TIME_ENTITY
    17 A865 A9 01			lda #$01
    18 A867 85 08			sta SYS_VIC20.UPDATE_COUNTER_2.V
    19 A869 A9 7D			lda #$7D
    20 A86B 85 0C			sta SYS_VIC20.UPDATE_COUNTER_2.COUNTER
    21 A86D A9 00			lda #$00
    22 A86F 85 0D			sta SYS_VIC20.UPDATE_COUNTER_2.COUNTER+1
    23 A871 A9 DE			lda #$DE
    24 A873 85 04			sta SYS_VIC20.UPDATE_COUNTER_2.SCR_COUNTER
    25 A875 A9 1E			lda #$1E
    26 A877 85 05			sta SYS_VIC20.UPDATE_COUNTER_2.SCR_COUNTER+1
    27 A879 20 5D A2			jsr SYS_VIC20.UPDATE_COUNTER_2
    28 A87C			l_0728
Source: vic20.a65
  2402 					.endl
  2403
  2404 				; optimize FAIL ('m@INLINE', game.inc), line = 395
  2405
  2406 A87C				.local +MAIN.SNAKE_STEP
  2407 A87C				m@INLINE
Macro: MAIN.SNAKE_STEP.M@INLINE [Source: vic20.a65]
     4 A87C A9 0E			lda #$0E
     5 A87E 38 E5 7F			sub LEVEL
     6 A881 85 77			sta SNAKE_SPEED
    10 A883 C9 02			cmp #$02
    11 A885 B0 04			jcs l_0753
    12 A887 A9 02			lda #$02
    13 A889 85 77			sta SNAKE_SPEED
    14 A88B			l_0753
    18 A88B 20 E9 A6			jsr JOY_HANDLER
    22 A88E A5 78			lda SNAKE_SPD_C
    23 A890 D0 0A			jne l_076D
    27 A892 20 B5 A6			jsr MOVE_SNAKE
    31 A895 A5 77			lda SNAKE_SPEED
    32 A897 85 78			sta SNAKE_SPD_C
    33 A899 4C 9E A8			jmp l_077E
    34 A89C			l_076D
    38 A89C C6 78			dec SNAKE_SPD_C
    39 A89E			l_077E
Source: vic20.a65
  2408 					.endl
  2409
  2410 				; optimize OK (game.inc), line = 396
  2411
  2412 A89E A5 8A			lda FRUIT_ON_BOARD
  2413 A8A0 D0 03			jne l_07E2
  2414 A8A2 20 A6 A7			jsr PUT_FRUIT
  2415 A8A5			l_07E2
  2416
  2417 				; optimize OK (game.inc), line = 397
  2418
  2419 A8A5 A5 7D			lda TIME_BCD
  2420 A8A7 C9 99			cmp #$99
  2421 A8A9 D0 04			jne l_07F8
  2422 A8AB A9 01			lda #$01
  2423 A8AD 85 FB			sta GAME_OVER
  2424 A8AF			l_07F8
  2425 A8AF			l_07D0
  2426 A8AF			@exit
  2427 					.ifdef @new
  2428 					lda <@VarData
  2429 					sta :ztmp
  2430 					lda >@VarData
  2431 					ldy #@VarDataSize-1
  2432 					jmp @FreeMem
  2433 					els
  2434 A8AF 60				rts						; ret
  2435 					eif
  2436 				.endl
  2437
  2438 A8B0			.local	PREPARE						; PROCEDURE
  2439
  2440 				; optimize OK (game.inc), line = 405
  2441
  2442 A8B0 A9 00			lda #$00
  2443 A8B2 85 08			sta SYSTEM.MOVE_00B1.SOURCE
  2444 A8B4 A9 BC			lda #$BC
  2445 A8B6 85 09			sta SYSTEM.MOVE_00B1.SOURCE+1
  2446 A8B8 A9 00			lda #$00
  2447 A8BA 85 0C			sta SYSTEM.MOVE_00B1.DEST
  2448 A8BC A9 10			lda #$10
  2449 A8BE 85 0D			sta SYSTEM.MOVE_00B1.DEST+1
  2450 A8C0 A9 00			lda #$00
  2451 A8C2 85 04			sta SYSTEM.MOVE_00B1.COUNT
  2452 A8C4 A9 04			lda #$04
  2453 A8C6 85 05			sta SYSTEM.MOVE_00B1.COUNT+1
  2454 A8C8				.local +MAIN.SYSTEM.MOVE_00B1
  2455 A8C8				m@INLINE
Macro: MAIN.SYSTEM.MOVE_00B1.M@INLINE [Source: vic20.a65]
     4 A8C8 20 A7 A0			jsr @move
Source: vic20.a65
  2456 					.endl
  2457
  2458 				; optimize OK (game.inc), line = 406
  2459
  2460 A8CB A9 12			lda #$12
  2461 A8CD 85 08			sta SYSTEM.MOVE_00B1.SOURCE
  2462 A8CF A9 B9			lda #$B9
  2463 A8D1 85 09			sta SYSTEM.MOVE_00B1.SOURCE+1
  2464 A8D3 A9 00			lda #$00
  2465 A8D5 85 0C			sta SYSTEM.MOVE_00B1.DEST
  2466 A8D7 A9 1C			lda #$1C
  2467 A8D9 85 0D			sta SYSTEM.MOVE_00B1.DEST+1
  2468 A8DB A9 EE			lda #$EE
  2469 A8DD 85 04			sta SYSTEM.MOVE_00B1.COUNT
  2470 A8DF A9 02			lda #$02
  2471 A8E1 85 05			sta SYSTEM.MOVE_00B1.COUNT+1
  2472 A8E3				.local +MAIN.SYSTEM.MOVE_00B1
  2473 A8E3				m@INLINE
Macro: MAIN.SYSTEM.MOVE_00B1.M@INLINE [Source: vic20.a65]
     4 A8E3 20 A7 A0			jsr @move
Source: vic20.a65
  2474 					.endl
  2475
  2476 				; optimize FAIL ('VBI', game.inc), line = 412
  2477
  2478 A8E6 20 59 A8			jsr VBI
  2479 A8E9			@exit
  2480 					.ifdef @new
  2481 					lda <@VarData
  2482 					sta :ztmp
  2483 					lda >@VarData
  2484 					ldy #@VarDataSize-1
  2485 					jmp @FreeMem
  2486 					els
  2487 A8E9 60				rts						; ret
  2488 					eif
  2489 				.endl
  2490 A8EA			l_0067
  2491
  2492 				; optimize OK (game.inc), line = 418
  2493
  2494 A8EA A9 01			lda #$01
  2495 A8EC 85 FB			sta GAME_OVER
  2496
  2497 				; optimize FAIL ('PREPARE', game.inc), line = 420
  2498
  2499 A8EE 20 B0 A8			jsr PREPARE
  2500 A8F1 20 93 A1			jsr SYS_VIC20.SYS_INIT
  2501 A8F4				.local +MAIN.WELCOME_SCR
  2502 A8F4				m@INLINE
Macro: MAIN.WELCOME_SCR.M@INLINE [Source: vic20.a65]
     4 A8F4 A9 01			lda #$01
     5 A8F6 20 EE A1			jsr SYS_VIC20.CLRCOL
     9 A8F9 A9 0C			lda #$0C
    10 A8FB 85 70			sta T0B
    11 A8FD 85 72			sta T2B
    15 A8FF AD 53 A0			lda adr.TXT_INFO
    16 A902 4A				lsr @
    17 A903 85 71			sta T1B
    18 A905 A5 70			lda T0B
    19 A907 38 E5 71			sub T1B
    20 A90A 85 70			sta T0B
    24 A90C 85 08			sta SYS_VIC20.SET_XY.X
    25 A90E A9 02			lda #$02
    26 A910 85 0C			sta SYS_VIC20.SET_XY.Y
    27 A912 20 01 A2			jsr SYS_VIC20.SET_XY
    31 A915 A9 07			lda #$07
    32 A917 85 08			sta SYS_VIC20.PRINT.COL
    33 A919 A9 53			lda #$53
    34 A91B 85 0C			sta SYS_VIC20.PRINT.S
    35 A91D A9 A0			lda #$A0
    36 A91F 85 0D			sta SYS_VIC20.PRINT.S+1
    37 A921 20 3C A2			jsr SYS_VIC20.PRINT
    41 A924 AD 3E A0			lda adr.TXT_TURBO
    42 A927 4A				lsr @
    43 A928 85 71			sta T1B
    44 A92A A5 72			lda T2B
    45 A92C 38 E5 71			sub T1B
    46 A92F 85 72			sta T2B
    50 A931 85 08			sta SYS_VIC20.SET_XY.X
    51 A933 A9 19			lda #$19
    52 A935 85 0C			sta SYS_VIC20.SET_XY.Y
    53 A937 20 01 A2			jsr SYS_VIC20.SET_XY
    57 A93A A9 07			lda #$07
    58 A93C 85 08			sta SYS_VIC20.PRINT.COL
    59 A93E A9 3E			lda #$3E
    60 A940 85 0C			sta SYS_VIC20.PRINT.S
    61 A942 A9 A0			lda #$A0
    62 A944 85 0D			sta SYS_VIC20.PRINT.S+1
    63 A946 20 3C A2			jsr SYS_VIC20.PRINT
    66 A949			l_01AF
    70 A949 A5 61			lda SYS_VIC20.JOY
    71 A94B 29 20			and #$20
    72 A94D F0 FA			jeq l_01AF
Source: vic20.a65
  2503 					.endl
  2504
  2505 				; optimize OK (game.inc), line = 422
  2506
  2507 A94F A9 00			lda #$00
  2508 A951 85 82			sta HI_SCORE_BCD
  2509 A953 85 83			sta HI_SCORE_BCD+1
  2510 A955 20 14 A8			jsr SET_GAME
  2511
  2512 				; --- RepeatUntilProlog
  2513 A958			l_081C
  2514
  2515 				; optimize OK (game.inc), line = 425
  2516
  2517 A958 A5 FB			lda GAME_OVER
  2518 A95A F0 03			jeq l_0828
  2519 A95C 20 4A A8			jsr RESTART_GAME
  2520 A95F			l_0828
  2521
  2522 				; optimize OK (game.inc), line = 426
  2523
  2524 A95F 4C 58 A9			jmp l_081C
  2525
  2526 				; ------------------------------------------------------------
  2527
  2528 = BC00			CRT_CHARS_ADR	= $BC00
  2529 = B912			CRT_TITLE_ADR	= $B912
  2530 = 0000			GAME_BLACK	= $00
  2531 = 0001			GAME_WHITE	= $01
  2532 = 0002			GAME_RED	= $02
  2533 = 0003			GAME_CYAN	= $03
  2534 = 0004			GAME_PURPLE	= $04
  2535 = 0005			GAME_GREEN	= $05
  2536 = 0006			GAME_BLUE	= $06
  2537 = 0007			GAME_YELLOW	= $07
  2538 = 0008			GAME_ORANGE	= $08
  2539 = 0020			C_SPACE	= $20
  2540 = 0040			C_FRUIT	= $40
  2541 = 0041			C_WALL_H	= $41
  2542 = 0042			C_WALL_VE	= $42
  2543 = 0043			C_WALL_VW	= $43
  2544 = 0044			C_TAIL_UP	= $44
  2545 = 0045			C_TAIL_DOWN	= $45
  2546 = 0046			C_TAIL_RIGHT	= $46
  2547 = 0047			C_TAIL_LEFT	= $47
  2548 = 0048			C_HEAD_UP	= $48
  2549 = 0049			C_HEAD_DOWN	= $49
  2550 = 004A			C_HEAD_LEFT	= $4A
  2551 = 004B			C_HEAD_RIGHT	= $4B
  2552 = 004C			C_BODY_V	= $4C
  2553 = 004D			C_BODY_H	= $4D
  2554 = 004E			C_BODY_SW	= $4E
  2555 = 004F			C_BODY_SE	= $4F
  2556 = 0050			C_BODY_NW	= $50
  2557 = 0051			C_BODY_NE	= $51
  2558 = A00C			adr.TXT_LEVEL	= CODEORIGIN+$0000
  2559 A962			.var TXT_LEVEL	= adr.TXT_LEVEL .word
  2560 = A016			adr.TXT_POINTS	= CODEORIGIN+$000A
  2561 A962			.var TXT_POINTS	= adr.TXT_POINTS .word
  2562 = A023			adr.TXT_TIME	= CODEORIGIN+$0017
  2563 A962			.var TXT_TIME	= adr.TXT_TIME .word
  2564 = A029			adr.TXT_HSCORE	= CODEORIGIN+$001D
  2565 A962			.var TXT_HSCORE	= adr.TXT_HSCORE .word
  2566 = A032			adr.TXT_FIRE	= CODEORIGIN+$0026
  2567 A962			.var TXT_FIRE	= adr.TXT_FIRE .word
  2568 = A03E			adr.TXT_TURBO	= CODEORIGIN+$0032
  2569 A962			.var TXT_TURBO	= adr.TXT_TURBO .word
  2570 = A053			adr.TXT_INFO	= CODEORIGIN+$0047
  2571 A962			.var TXT_INFO	= adr.TXT_INFO .word
  2572 = 0002			SNAKE_SIZE	= $02
  2573 = 000E			GAME_SPEED	= $0E
  2574 = 000A			LEVEL_THOLD	= $0A
  2575 = 0002			SPEED_THOLD	= $02
  2576 = 00C8			TIME_E_SET	= $C8
  2577 = 0099			TIME_THOLD	= $99
  2578 = 0044			UP	= $44
  2579 = 0045			DOWN	= $45
  2580 = 0047			LEFT	= $47
  2581 = 0046			RIGHT	= $46
  2582 = 00E7			MOVE_UP	= $E7
  2583 = 0019			MOVE_DOWN	= $19
  2584 = 00FF			MOVE_LEFT	= $FF
  2585 = 0001			MOVE_RIGHT	= $01
  2586 = 0070			T0B	= $70
  2587 = 0071			T1B	= $71
  2588 = 0072			T2B	= $72
  2589 = 0073			T0W	= $73
  2590 = 0075			T1W	= $75
  2591 = 0077			SNAKE_SPEED	= $77
  2592 = 0078			SNAKE_SPD_C	= $78
  2593 = 0079			TAIL_DIR	= $79
  2594 = 007A			HEAD_DIR	= $7A
  2595 = 007B			LEVEL_UP	= $7B
  2596 = 007C			TIME_ENTITY	= $7C
  2597 = 007D			TIME_BCD	= $7D
  2598 = 007E			LEVEL_BCD	= $7E
  2599 = 007F			LEVEL	= $7F
  2600 = 0080			SCORE_BCD	= $80
  2601 = 0082			HI_SCORE_BCD	= $82
  2602 = 0084			HEAD_POS	= $84
  2603 = 0086			HEAD_POS_COL	= $86
  2604 = 0088			TAIL_POS	= $88
  2605 = 008A			FRUIT_ON_BOARD	= $8A
  2606 = 008B			adr.SNAKE	= $8B
  2607 A962			.var SNAKE	= adr.SNAKE .word
  2608 = 008B			SNAKE.HEAD	= $8B
  2609 = 008C			SNAKE.BODY	= $8C
  2610 = 008D			SNAKE.M	= $8D
  2611 = 00FB			GAME_OVER	= $FB
  2612 = 00FB			SF0B	= $FB
  2613 = 00FC			SF1B	= $FC
  2614 = 1C05			HI_SCR_SCORE	= $1C05
  2615 = 1EEA			SCR_SCORE	= $1EEA
  2616 = 1ED9			SCR_LEVEL	= $1ED9
  2617 = 1EDE			SCR_TIME	= $1EDE
  2618 A962			@exit
  2619
  2620 A962 A2 00		@halt	ldx #$00
  2621 A964 9A				txs
  2622
  2623 A965 60				rts
  2624
  2625 				; ------------------------------------------------------------
  2626
  2627 				; ------------------------------------------------------------
  2628
  2629 A966			.local	@DEFINES
  2630 A966			RAW
  2631 				.endl
  2632
  2633 A966			.local	@RESOURCE
  2634 				.endl
  2635
  2636 = A966 0C A0		TXT_LEVEL
  2636 = A968 16 A0		TXT_POINTS
  2636 = A96A 23 A0		TXT_TIME
  2636 = A96C 29 A0		TXT_HSCORE
  2636 = A96E 32 A0		TXT_FIRE
  2636 = A970 3E A0		TXT_TURBO
  2636 = A972 53 A0		TXT_INFO
  2636 = A974 8B 00		SNAKE
  2636 				.endl							; MAIN
  2637
  2638 				; ------------------------------------------------------------
  2639 				; ------------------------------------------------------------
  2640
  2641 				.macro	UNITINITIALIZATION
  2642 				
  2643 					.ifdef MAIN.SYSTEM.@UnitInit
  2644 					jsr MAIN.SYSTEM.@UnitInit
  2645 					.fi
  2646 				
  2647 					.ifdef MAIN.SYS_VIC20.@UnitInit
  2648 					jsr MAIN.SYS_VIC20.@UnitInit
  2649 					.fi
  2650 				.endm
  2651
  2652 				; ------------------------------------------------------------
  2653
  2654 					ift .SIZEOF(MAIN.SYSTEM) > 0
  2655 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  2655 				SYSTEM: $A12D..$A15A
  2656 					eif
  2657
  2658 					ift .SIZEOF(MAIN.SYS_VIC20) > 0
  2659 					.print 'SYS_VIC20: ',MAIN.SYS_VIC20,'..',MAIN.SYS_VIC20+.SIZEOF(MAIN.SYS_VIC20)-1
  2659 				SYS_VIC20: $A15B..$A30C
  2660 					eif
  2661
  2662 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  2662 				CODE: $A00C..$A965
  2663
  2664 				; ------------------------------------------------------------
  2665
  2666 A976				.align $0004
  2667
  2668 A978			DATAORIGIN
  2669
  2670 = 0000			VARINITSIZE	= *-DATAORIGIN
  2671 = 000E			VARDATASIZE	= 14
  2672
  2673 = A986			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  2674
  2675 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  2675 				DATA: $A978..$A986
  2676
  2677 				; ------------------------------------------------------------
  2678
  2679 				.macro	STATICDATA
  2680 				.by  $08 $0C $05 $16 $05 $0C $20 $30  $30 $00 $0B $10 $0F $09 $0E $14  $13 $20 $30 $30 $30 $30 $00 $04
  2681 				.by  $14 $3A $30 $30 $00 $07 $08 $09  $3A $30 $30 $30 $30 $00 $0A $10  $12 $05 $13 $13 $20 $06 $09 $12
  2682 				.by  $05 $00 $13 $08 $0F $0C $04 $20  $06 $09 $12 $05 $20 $06 $0F $12  $20 $14 $15 $12 $02 $0F $00 $17
  2683 				.by  $13 $03 $0F $12 $05 $20 $10 $0F  $09 $0E $14 $13 $20 $15 $0E $14  $09 $0C $20 $14 $3A $39 $39 $00
  2684 				.by  $09 $1A $19 $3C $00 $FC $00 $00  $FF $FF $00 $00 $00 $00 $00 $6E
  2685 				.endm
  2686
  2687 A978			.local	RESOURCE
  2688 A978				icl 'raw\resource.asm'
Source: resource.asm
     1
    48 					opt l+
  2689
  2690 A978				RCDATA 'res/title_cbm.scr' CRT_TITLE_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     6 A978				org main.CRT_TITLE_ADR
     8 B912 20 20 20 20 20 20 + 	ins 'res/title_cbm.scr',0
    10 					.print '$R RCDATA  ',main.CRT_TITLE_ADR,'..',*-1," 'res/title_cbm.scr'"
    10 				$R RCDATA  $B912..$BBFF 'res/title_cbm.scr'
Source: vic20.a65
  2691 BC00				RCDATA 'res/snake_cbm.fnt' CRT_CHARS_ADR 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     6 BC00				org main.CRT_CHARS_ADR
     8 BC00 00 3C 66 6E 6E 60 + 	ins 'res/snake_cbm.fnt',0
    10 					.print '$R RCDATA  ',main.CRT_CHARS_ADR,'..',*-1," 'res/snake_cbm.fnt'"
    10 				$R RCDATA  $BC00..$BFFF 'res/snake_cbm.fnt'
Source: vic20.a65
  2692 				.endl
  2693
  2694 					end
